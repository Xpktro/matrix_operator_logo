{"version":3,"sources":["../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/process/browser.js","node_modules/paper/dist/paper-full.js","node_modules/roughjs/src/segment.js","node_modules/roughjs/src/hachure.js","node_modules/roughjs/src/path.js","node_modules/roughjs/src/renderer.js","node_modules/roughjs/src/generator.js","node_modules/roughjs/src/canvas.js","node_modules/roughjs/src/index.js","js/application.js"],"names":["paper","self","undefined","require","window","document","Base","hidden","array","slice","create","Object","describe","getOwnPropertyDescriptor","define","defineProperty","forEach","iter","bind","i","l","length","call","forIn","hasOwnProperty","set","assign","dst","arguments","src","key","each","obj","desc","value","inject","dest","enumerable","beans","preserve","beansNames","field","name","val","get","substring","isFunc","res","prev","base","bean","match","toLowerCase","isPlainObject","writable","configurable","test","part","statics","prototype","extend","ctor","proto","initialize","apply","clone","constructor","pick","a","b","list","begin","end","module","exports","toString","_id","_class","_name","type","push","Formatter","instance","number","join","getClassName","importJSON","json","exportJSON","options","toJSON","serialize","props","exclude","filter","_prioritize","equals","obj1","obj2","Array","isArray","keys","read","start","amount","peek","__index","readIndex","_readIndex","readNull","__read","filtered","__filtered","remain","readList","entry","readNamed","getNamed","hasObject","__unfiltered","arg","_hasObject","hasNamed","source","prioritize","processed","handleKey","isPlainValue","asString","compact","dictionary","isRoot","formatter","precision","definitions","references","add","item","id","ref","unshift","_serialize","_compactSerialize","deserialize","_data","_setDictionary","_isRoot","isFirst","hasDictionary","isDictionary","args","JSON","stringify","target","parse","useTarget","Item","Layer","insert","splice","items","index","remove","append","_index","removed","capitalize","str","replace","toUpperCase","camelize","chr","hyphenate","Emitter","on","func","types","_eventTypes","handlers","_callbacks","indexOf","install","off","uninstall","once","emit","event","setTarget","currentTarget","stop","responds","attach","detach","fire","_installEvents","events","_events","isString","PaperScope","settings","applyMatrix","insertItems","handleSize","hitTolerance","project","projects","tools","_scopes","support","ctx","CanvasProvider","getContext","nativeDash","nativeBlendModes","BlendMode","nativeModes","release","agent","user","navigator","userAgent","os","exec","platform","browser","n","v1","v2","rv","chrome","v","version","versionNumber","parseFloat","webkit","atom","getView","_view","getPaper","execute","code","PaperScript","View","updateFocus","scope","that","setup","element","Project","createCanvas","width","height","getCanvas","activate","clear","handleAttribute","el","attr","getAttribute","hasAttribute","PaperScopeItem","_scope","_list","_reference","isActive","multiplier","Math","pow","round","pair","val1","val2","separator","point","x","y","size","rectangle","Numerical","abscissas","weights","abs","sqrt","log2","log","LOG2E","EPSILON","MACHINE_EPSILON","clamp","min","max","getDiscriminant","c","split","hi","lo","D","E","ad","bd","cd","p","dp","q","dq","getNormalizationFactor","norm","CURVETIME_EPSILON","GEOMETRIC_EPSILON","TRIGONOMETRIC_EPSILON","KAPPA","isZero","integrate","f","w","A","B","m","sum","Ax","findRoot","df","tolerance","fx","dx","nx","solveQuadratic","roots","x1","x2","Infinity","Q","R","count","boundless","minB","maxB","isFinite","solveCubic","d","b1","c2","qd","evaluate","x0","tmp","t","r","s","td","rd","UID","_pools","pool","Point","arg0","arg1","reading","hasY","_set","setAngle","angle","getLength","setLength","_angle","cos","sin","scale","getAngle","getAngleInRadians","PI","setAngleInRadians","getAngleInDegrees","setAngleInDegrees","atan2","div","NaN","dot","acos","getQuadrant","getDirectedAngle","cross","getDistance","squared","normalize","current","rotate","center","subtract","transform","matrix","_transformPoint","multiply","divide","modulo","negate","isInside","Rectangle","contains","isClose","isCollinear","isColinear","isOrthogonal","isNaN","isInQuadrant","point1","point2","random","y1","y2","op","LinkedPoint","owner","setter","_x","_y","_owner","_setter","_dontNotify","getX","setX","getY","setY","isSelected","_selection","_getSelection","setSelected","selected","_changeSelection","Size","hasHeight","size1","size2","LinkedSize","_width","_height","getWidth","setWidth","getHeight","setHeight","arg2","arg3","from","to","frm","next","rect","rt","getPoint","_dontLink","setPoint","getSize","_fw","_fh","setSize","sx","_sx","sy","_sy","h","getLeft","setLeft","left","getTop","setTop","top","getRight","setRight","right","getBottom","setBottom","bottom","getCenterX","setCenterX","getCenterY","setCenterY","getCenter","setCenter","getArea","isEmpty","_containsRectangle","_containsPoint","intersects","epsilon","intersect","unite","include","expand","hor","ver","parts","xFirst","LinkedRectangle","internal","Matrix","ok","_a","_b","_c","_d","_tx","_ty","concat","reset","Error","tx","ty","_changed","getValues","_applyMatrix","mx","recursively","_setApplyMatrix","isIdentity","translate","shear","skew","toRadians","tan","a1","c1","d1","a2","b2","d2","tx2","ty2","prepend","tx1","ty1","appended","prepended","invert","det","inverted","concatenate","preConcatenate","chain","_shiftless","_orNullIfIdentity","isInvertible","isSingular","_transformCoordinates","_transformCorners","coords","_transformBounds","bounds","j","inverseTransform","_inverseTransform","decompose","degrees","asin","translation","getTranslation","rotation","scaling","skewing","getScaling","getRotation","applyToContext","prop","Line","arg4","asVector","_px","_py","_vx","_vy","getVector","line","isInfinite","getSide","getSignedDistance","p1x","p1y","v1x","v1y","p2x","p2y","v2x","v2y","dy","u1","u2","uMin","uMax","px","py","vx","vy","ccw","_children","_namedChildren","_activeLayer","_currentStyle","Style","_selectionItems","_selectionCount","_updateVersion","flags","view","_needsUpdate","_requested","_autoUpdate","requestUpdate","changes","_changes","changesById","_changesById","children","getCurrentStyle","setCurrentStyle","style","getIndex","getOptions","getLayers","getActiveLayer","getSymbolDefinitions","ids","getItems","class","SymbolItem","definition","_definition","getSymbols","getSelectedItems","selectionItems","selection","isInserted","_updateSelection","selectAll","setFullySelected","deselectAll","addLayer","layer","insertLayer","_remove","_setProject","setName","_insertItem","_created","NO_INSERT","insertChild","_getItems","getItem","removeOn","sets","_removeSets","mousedrag","other","draw","pixelRatio","save","param","offset","viewMatrix","matrices","updateMatrix","restore","strokeWidth","_drawSelection","_serializeFields","_canApplyMatrix","_canScaleStroke","_pivot","_visible","_blendMode","_opacity","_locked","_guide","_clipMask","_selectBounds","_selectChildren","pivot","visible","blendMode","opacity","locked","guide","clipMask","data","_countItemEvent","onFrame","_animateItem","onLoad","onError","_itemHandlers","_initialize","hasProps","_matrix","_parent","_style","parent","fields","fontSize","Group","_defaults","symbol","_symbol","cacheParent","_project","_bounds","_position","_decomposed","_globalMatrix","_clearBoundsCache","getId","getName","_removeNamed","_getOwner","namedChildren","getStyle","setStyle","getSelection","setSelection","flag","isFullySelected","isClipMask","setClipMask","setFillColor","setStrokeColor","getData","setData","getPosition","position","getBounds","setPosition","getPivot","setPivot","getStrokeBounds","stroke","getHandleBounds","handle","getInternalBounds","hasMatrix","opts","_boundsOptions","getStrokeScaling","cacheItem","_getCachedBounds","setBounds","_backup","_getBounds","_updateBoundsCache","_getBoundsCacheKey","noInternal","cacheKey","cached","nonscaling","hasStroke","_getStrokeMatrix","_item","getViewMatrix","_boundsCache","cache","_decompose","decomposed","setRotation","setScaling","getMatrix","setMatrix","getGlobalMatrix","_dontClone","updateVersion","getApplyMatrix","setApplyMatrix","getTransformContent","setTransformContent","getProject","installEvents","getLayer","getParent","setParent","addChild","getChildren","setChildren","removeChildren","addChildren","getFirstChild","getLastChild","getNextSibling","getPreviousSibling","_equals","copy","deep","copyAttributes","copyContent","insertAbove","orig","excludeMatrix","rasterize","resolution","getResolution","topLeft","getTopLeft","floor","bottomRight","getBottomRight","ceil","raster","Raster","canvas","setCanvas","_contains","_asPathItem","Path","getIntersections","hitTest","_hitTest","HitResult","hitTestAll","all","hitTestChildren","_exclude","child","_hitTestChildren","parentViewMatrix","guides","tolerancePadding","_tolerancePadding","_getStrokePadding","checkSelf","hit","checkPoint","pt","checkPosition","checkCenter","checkBounds","points","_hitTestSelf","fill","hasFill","matches","compare","matchObject","firstOnly","overlapping","inside","recursive","path","childMatrix","insertChildren","inserted","notifySelf","_insertAt","insertBelow","sendToBack","bringToFront","appendTop","appendBottom","moveAbove","moveBelow","addTo","copyTo","reduce","namedArray","notifyParent","replaceWith","reverseChildren","reverse","isEditable","hasShadow","_getOrder","getList","list1","list2","hasChildren","isAbove","isBelow","isParent","isChild","isDescendant","isAncestor","isSibling","isGroupedWith","_applyRecursively","fillColor","getFillColor","strokeColor","getStrokeColor","_transformContent","decomp","applyRecursively","globalToLocal","localToGlobal","parentToLocal","localToParent","fitBounds","itemRatio","rectRatio","newBounds","_setStyles","fillStyle","toCanvasStyle","strokeStyle","lineWidth","getStrokeWidth","strokeJoin","getStrokeJoin","strokeCap","getStrokeCap","miterLimit","getMiterLimit","lineJoin","lineCap","dashArray","getDashArray","dashOffset","getDashOffset","setLineDash","lineDashOffset","mozDash","mozDashOffset","blur","getShadowBlur","getShadowOffset","shadowColor","getShadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","parentStrokeMatrix","globalMatrix","normalBlend","nativeBlend","direct","dontStart","clip","_canComposite","mainCtx","itemOffset","prevOffset","strokeMatrix","clipItem","globalAlpha","globalCompositeOperation","setTransform","_draw","pop","dontFinish","process","_isUpdated","CompoundPath","updated","itemSelected","boundsSelected","positionSelected","_drawSelected","color","getSelectedColor","half","beginPath","arc","deltas","delta","moveTo","lineTo","closePath","fillRect","hash","_clipItem","_getClipItem","isClipped","setClipped","clipped","Shape","radius","_type","_size","_radius","setType","setRadius","getType","getShape","setShape","getRadius","rad","toPath","toShape","dontPaint","untransformed","isCircle","rx","ry","kappa","cx","cy","bezierCurveTo","getFillRule","getCornerCenter","halfSize","dir","corner","quadrant","isOnEllipseStroke","padding","vector","hitStroke","hitFill","strokeRadius","strokePadding","outer","inner","createShape","Circle","Ellipse","ellipse","_readEllipse","crossOrigin","object","image","getElementById","setImage","setSource","_loaded","getSource","_image","_canvas","_setImage","copyCanvas","drawImage","_crossOrigin","getElement","getLoaded","u","getPpi","getImage","Event","setTimeout","DomEvent","load","error","complete","naturalWidth","naturalHeight","_context","e","modify","setContext","context","toDataURL","Image","getCrossOrigin","setCrossOrigin","getSubCanvas","getSubRaster","getAverageColor","PathItem","sampleSize","_sampleContext","clearRect","pixels","getImageData","channels","total","alpha","Color","getPixel","setPixel","components","_convert","_alpha","imageData","createImageData","putImageData","setImageData","setDefinition","SymbolDefinition","getDefinition","getSymbol","setSymbol","dontCenter","setItem","_dontCenter","place","values","segments","handles","ends","Segment","arg5","handleIn","handleOut","SegmentPoint","_point","hasHandles","_handleIn","_handleOut","_path","curves","_curves","curve","_closed","getHandleIn","setHandleIn","getHandleOut","setHandleOut","isSmooth","clearHandles","oldSelection","getPath","getCurve","_segments","getCurves","getLocation","CurveLocation","_segment1","getNext","smooth","_first","_last","factor","getPrevious","p0","p1","p2","d1_a","d1_2a","d2_a","d2_2a","N","k","isLast","reversed","removeSegment","segment","interpolate","handleIn1","handleIn2","handleOut2","handleOut1","change","Curve","arg6","arg7","seg1","seg2","handle1","handle2","segment1","segment2","_segment2","getPoint1","getHandle1","getHandle2","getPoint2","_length","classify","setPoint1","setPoint2","setHandle1","setHandle2","getSegment1","getSegment2","getPoints","getLine","getPart","getPartLength","divideAt","location","divideAtTime","time","getTimeAt","_setHandles","tMin","tMax","subdivide","setHandles","splitAt","splitAtTime","getLocationAtTime","isTime","straight","h1","h2","y0","x3","y3","x4","y4","x5","y5","x6","y6","x7","y7","x8","y8","x9","y9","getMonoCurves","io","o0","o1","o2","o3","isStraight","sort","coord","v0","v3","getTimeOf","p3","geomEpsilon","getNearestTime","minDist","minT","refine","dist","step","flip","isFlatEnough","flatness","ux","uy","_addBounds","minPad","maxPad","s1","s2","isLinear","third","hasLength","isHorizontal","getTangentAtTime","isVertical","getLocationAt","_isTime","getParameterAt","getOffsetAtTime","getLocationOf","getOffsetOf","loc","getOffset","getParameterOf","getNearestLocation","getNearestPoint","methods","_evaluateMethods","getLengthIntegrand","ax","bx","ay","by","getIterations","normalized","len","a3","d3","serpentine","t1","t2","hasRoots","t1Ok","t2Ok","f1","f2","ds","forward","rangeLength","diff","guess","getTangent","getWeightedTangent","getNormal","getWeightedNormal","getCurvature","getPeaks","addLocation","locations","overlap","excludeStart","excludeEnd","loc1","loc2","_intersection","addCurveIntersections","recursion","calls","fatLineEpsilon","q0x","q0y","q3x","q3y","dMin","dMax","dp0","dp1","dp2","dp3","hull","getConvexHull","tMinClip","tMaxClip","clipConvexHull","tMinNew","tMaxNew","dq0","dq1","dq2","dq3","dist1","dist2","distRatio","hullTop","hullBottom","clipConvexHullPart","threshold","qx","qy","getCurveLineIntersections","addCurveLineIntersections","addLineIntersection","getCurveIntersections","overlaps","getOverlaps","straight1","straight2","before","i1","i2","getLoopIntersection","info","curves1","curves2","matrix1","matrix2","_returnFirst","length1","length2","values2","arrays","curve1","values1","path1","getSquaredLineLength","timeEpsilon","straightBoth","l1","l2","pairs","_overlap","_distance","_setCurve","_time","getPointAtTime","_next","_previous","_version","_curve","_segment","_setSegment","getSegment","getTime","_offset","_curveOffset","trySegment","getParameter","getCurveOffset","getIntersection","getLastSegment","_ignoreOther","isTouching","inter","curve2","isCrossing","t1Inside","t2Inside","c4","c3","offsets","addOffsets","isInRange","getPointAt","v4","a4","hasOverlap","merge","search","found","path2","expanded","compound","pathData","first","isClockwise","setClockwise","clockwise","setPathData","relative","previous","control","getCoord","command","lower","move","cubicCurveTo","quadraticCurveTo","arcTo","winding","_getWinding","onPath","windingL","windingR","getCrossings","minLoc","isPath","itemsFrom","itemsTo","setClosed","paths1","paths2","matched","closed","setSegments","_segmentSelection","_area","getSegments","fullySelected","last","_add","getFirstSegment","_countCurves","getFirstCurve","getLastCurve","isClosed","getPathData","_precision","curX","curY","prevX","prevY","inX","inY","outX","outY","addSegment","skipLine","segs","_adjustCurves","insertSegment","addSegments","insertSegments","removeSegments","_includeCurves","area","_selectSegments","newSelection","last1","last2","first2","first1","simplify","flatten","flattener","PathFlattener","PathFitter","fit","_default","loop","asymmetric","paddingLeft","paddingRight","knots","n_1","rf","hx","hy","topCenter","seg3","seg4","isArc","pt1","pt2","shape","pos1","pos2","end1","end2","start2","numSegments","cap","hitCurves","isCloseEnough","checkSegmentPoint","seg","anchor","checkSegmentPoints","addToArea","checkSegmentStroke","isJoin","_addBevelJoin","_addSquareCap","drawHandles","pX","pY","drawHandle","hX","hY","drawSegments","drawSegment","dashLength","drawPart","getCurrentSegment","moveBy","curveTo","through","extent","middle","large","rxSq","rySq","xSq","ySq","throughSide","centerSide","ext","inc","z","out","_in","lineBy","curveBy","parameter","cubicCurveBy","quadraticCurveBy","arcBy","method","prevCoords","processSegment","joinBounds","addPoint","addRound","addJoin","addCap","phi","isArea","normal1","getNormalAtTime","normal2","normal","joinPadding","joinRadius","SQRT2","paddingX","paddingY","xn","xx","yn","yx","ellipseSegments","createPath","createEllipse","bl","getBottomLeft","tl","tr","getTopRight","br","RoundRectangle","Oval","Arc","RegularPolygon","sides","three","Star","radius1","radius2","paths","getCurrentPath","check","operators","preparePath","resolve","resolveCrossings","reorient","createResult","result","traceBoolean","operation","trace","splitBoolean","_path1","_path2","operator","crossings","divideLocations","collect","_overlapsOnly","propagateWinding","_winding","tracePaths","reorientPaths","added","addPath","linkIntersections","clearCurveHandles","lookup","container","sorted","entry1","getInteriorPoint","containerWinding","entry2","clearLater","results","clearCurves","clearLookup","renormalizeLocs","prevCurve","prevTime","origTime","newCurve","getWinding","dontFlip","ia","pv","pa","po","windingEpsilon","qualityEpsilon","paL","paR","pathWindingL","pathWindingR","onAnyPath","quality","vPrev","vClose","addWinding","a0","windingPrev","a3Prev","handleCurve","monoCurves","totalLength","curveLength","operand","SQRT1_2","wind","starts","isValid","_visited","isStart","visitPath","getCrossingSegments","collectStarts","nextInter","_prev","inter1","inter2","over1","over2","valid","finished","branches","branch","visited","shift","hasOverlaps","hasCrossings","intersections","nonZero","intercepts","mv","mo0","mo3","maxRecursion","ignoreStraight","minSpan","addCurve","computeParts","halves","tMid","_get","fitCubic","tan1","tan2","uPrime","chordLengthParameterize","maxError","parametersInOrder","generateBezier","findMaxError","reparameterize","tanCenter","C","X","b0","b3","detC0C1","alpha1","alpha2","detC0X","detXC1","c0","segLength","eps","degree","maxDist","P","TextItem","content","_content","_lines","setContent","getContent","getCharacterStyle","setCharacterStyle","getParagraphStyle","setParagraphStyle","PointText","lines","leading","getLeading","font","getFontStyle","textAlign","getJustification","fillText","strokeText","numLines","justification","getTextWidth","gray","rgb","hsb","hsl","gradient","componentParsers","colorCache","colorCtx","fromCSS","string","parseInt","hsbIndices","converters","g","achromatic","t3s","t3","properties","parser","_components","Gradient","_removeOwner","_addOwner","_properties","argType","parsers","stops","radial","getComponents","_canvasStyle","converter","convert","getAlpha","setAlpha","hasAlpha","col","isGradient","toCSS","hex","_stops","origin","destination","highlight","inverse","canvasGradient","_radial","createRadialGradient","createLinearGradient","addColorStop","_color","_types","components1","components2","setStops","setRadial","_owners","getStops","GradientStop","getRadial","stops1","stops2","rampPoint","setColor","setOffset","getRampPoint","setRampPoint","getColor","itemDefaults","fillRule","strokeScaling","shadowOffset","selectedColor","groupDefaults","fontFamily","fontWeight","textDefaults","_values","isColor","isPoint","old","_dontMerge","childValue","Font","WindingRule","isStyle","style1","style2","secondary","defaults2","value1","value2","getFontSize","getFontWeight","getFontFamily","getFont","setFont","getPixelSize","DomElement","handlePrefix","prefixes","suffix","prefix","getStyles","doc","nodeType","ownerDocument","defaultView","getComputedStyle","viewport","body","html","documentElement","getBoundingClientRect","clientLeft","clientTop","pageXOffset","scrollLeft","pageYOffset","scrollTop","getViewportBounds","innerWidth","clientWidth","innerHeight","clientHeight","isInvisible","isInView","getPrefixed","setPrefixed","addEventListener","removeEventListener","pos","targetTouches","changedTouches","pageX","clientX","pageY","clientY","getTarget","srcElement","getRelatedTarget","relatedTarget","toElement","requestAnimationFrame","nativeRequest","requested","callbacks","timer","handleCallbacks","functions","callback","setInterval","getCanvasSize","setAttribute","_viewEvents","none","userDrag","userSelect","touchCallout","contentZooming","tapHighlightColor","_windowEvents","resize","setViewSize","Stats","_stats","stats","domElement","appendChild","_element","_pixelRatio","devicePixelRatio","_setElementSize","_viewSize","_views","_viewsById","_focused","_frameItems","_frameItemCount","_itemEvents","native","virtual","node","_animate","play","pause","_count","getAutoUpdate","setAutoUpdate","autoUpdate","update","_handleFrame","now","Date","animate","_handleFrameItems","getPixelRatio","getViewSize","isVisible","parentNode","temp","createElement","removeChild","getZoom","setZoom","zoom","scrollBy","projectToView","viewToProject","getEventPoint","CanvasView","prevFocus","tempFocus","dragging","mouseDown","handleMouseMove","_handleMouseEvent","mousedown","mousemove","mouseup","pointerEnabled","msPointerEnabled","viewEvents","docEvents","mouseout","nodeName","scroll","called","prevented","fallbacks","doubleclick","wasInView","overView","downPoint","lastPoint","downItem","overItem","dragItem","clickItem","clickTime","dblClick","emitMouseEvent","prevPoint","stopItem","stopped","mouseEvent","MouseEvent","fallback","emitMouseEvents","hitItem","itemEventsMap","click","mouseenter","mouseleave","itemEvents","hitItems","nativeMove","tool","inView","mouse","substr","drag","down","up","preventDefault","_handleKeyEvent","character","keyEvent","KeyEvent","sign","HTMLCanvasElement","deviceRatio","backingStoreRatio","firefox","prevFont","measureText","stopPropagation","getTimeStamp","timeStamp","getModifiers","Key","modifiers","keyLookup","charLookup","keyMap","charMap","metaFixMap","downKey","alt","meta","capsLock","space","option","mac","getKey","keyIdentifier","String","fromCharCode","keyCode","keydown","altKey","metaKey","ctrlKey","keypress","charCode","keyup","isDown","ToolEvent","_choosePoint","toolPoint","getLastPoint","_lastPoint","setLastPoint","getDownPoint","_downPoint","setDownPoint","getMiddlePoint","_middlePoint","setMiddlePoint","middlePoint","getDelta","_delta","setDelta","getCount","setCount","Tool","_moveCount","_downCount","getMinDistance","_minDistance","setMinDistance","minDistance","_maxDistance","getMaxDistance","setMaxDistance","maxDistance","getFixedDistance","setFixedDistance","distance","Http","request","xhr","XMLHttpRequest","open","url","async","mimeType","overrideMimeType","onload","status","responseText","onerror","message","send","canvases","sr","sg","sb","sa","bg","bb","ba","dr","dg","db","getLum","setLum","mn","lmn","ln","mxl","getSat","setSat","md","modes","screen","overlay","darken","lighten","difference","exclusion","hue","saturation","luminosity","average","negation","mode","srcContext","dstContext","srcCanvas","dstData","SvgElement","svg","xmlns","xlink","attributeNamespace","href","tag","attributes","createElementNS","namespace","getAttributeNS","setAttributeNS","SvgStyles","true","false","property","attribute","toSVG","fromSVG","exportFilter","getTransform","coordinates","attrs","trans","exportGroup","childNode","exportSVG","exportRaster","embedImages","exportPath","matchShapes","exportShape","exportCompoundPath","exportSymbolItem","definitionItem","viewBox","overflow","exportGradient","gradientNode","getGradient","getOrigin","getDestination","getHighlight","fy","gradientUnits","stopColor","exportText","textContent","exporters","applyStyle","visibility","svgs","__id","typeId","exportDefinitions","defs","insertBefore","firstChild","XMLSerializer","serializeToString","exporter","onExport","setOptions","rootSize","getValue","allowNull","allowPercent","convertValue","map","importGroup","nodes","childNodes","isClip","isDefs","currentStyle","applyAttributes","querySelectorAll","importNode","importPoly","importPath","importGradient","scaleToBounds","_scaleToBounds","importers","clippath","polygon","polyline","lineargradient","radialgradient","use","circle","text","trim","applyTransform","transforms","applyOpacity","gradientTransform","setVisible","display","percent","styles","group","tagName","isElement","nextSibling","importer","onImport","expandShapes","importSVG","DOMParser","parseFromString","File","reader","FileReader","readAsText","global","acorn","root","mod","amd","input","inputLen","sourceFile","inpt","initTokenState","parseTopLevel","program","defaultOptions","ecmaVersion","strictSemicolons","allowTrailingCommas","forbidReserved","allowReturnOutsideFunction","onComment","ranges","directSourceFile","opt","getLineInfo","cur","lineBreak","lastIndex","column","tokenize","getToken","forceRegexp","lastEnd","tokEnd","readToken","tokStart","startLoc","tokStartLoc","endLoc","tokEndLoc","tokType","tokVal","jumpTo","reAllowed","tokPos","tokCurLine","tokLineStart","tokRegexpAllowed","skipSpace","lastStart","lastEndLoc","inFunction","labels","strict","raise","err","SyntaxError","raisedAt","empty","_num","_regexp","_string","_eof","_break","keyword","_case","beforeExpr","_catch","_continue","_debugger","_do","isLoop","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_while","_with","_new","_this","_null","atomValue","_true","_false","binop","keywordTypes","_bracketL","_bracketR","_braceL","_braceR","_parenL","_parenR","_comma","_semi","_colon","_dot","_question","_slash","_eq","isAssign","_assign","_incDec","postfix","isUpdate","_prefix","_logicalOR","_logicalAND","_bitwiseOR","_bitwiseXOR","_bitwiseAND","_equality","_relational","_bitShift","_plusMin","_multiplyModulo","tokTypes","bracketL","bracketR","braceL","braceR","parenL","parenR","comma","semi","colon","question","slash","eq","eof","num","regexp","kw","makePredicate","words","cats","compareTo","arr","cat","Function","isReservedWord3","isReservedWord5","isStrictReservedWord","isStrictBadIdWord","isKeyword","nonASCIIwhitespace","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","RegExp","nonASCIIidentifier","newline","isIdentifierStart","isIdentifierChar","line_loc_t","finishToken","skipBlockComment","skipLineComment","ch","charCodeAt","readToken_dot","readNumber","readToken_slash","readRegexp","finishOp","readToken_mult_modulo","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","getTokenFromCode","readHexNumber","readString","readWord","tok","escaped","inClass","charAt","mods","readWord1","readInt","radix","startsWithDot","isFloat","octal","quote","readHexChar","containsEsc","word","esc","escStr","setStrict","strct","lastIndexOf","node_t","node_loc_t","startNode","range","startNodeFrom","finishNode","isUseStrict","stmt","expression","eat","canInsertSemicolon","semicolon","unexpected","expect","checkLVal","expr","parseStatement","loopLabel","kind","switchLabel","starttype","isBreak","label","parseIdent","lab","parseParenExpression","parseFor","init","parseVar","declarations","parseForIn","parseExpression","parseFunction","consequent","alternate","argument","discriminant","cases","sawDefault","isCase","block","parseBlock","handler","clause","guard","guardedHandlers","finalizer","maybeName","allowStrict","oldStrict","noIn","decl","noComma","parseMaybeAssign","expressions","parseMaybeConditional","parseExprOps","parseExprOp","parseMaybeUnary","minPrec","prec","exprNode","parseExprSubscripts","parseSubscripts","parseExprAtom","noCalls","computed","callee","parseExprList","raw","tokStartLoc1","tokStart1","elements","parseObj","parseNew","sawGetSet","parsePropertyName","isGetSet","conflict","isStatement","params","oldInFunc","oldLabels","close","allowTrailingComma","allowEmpty","elts","liberal","binaryOperators","unaryOperators","__self","__$__","$__","compile","insertions","insertion","getCode","getBetween","replaceCode","walkAST","between","parentType","exp","encodeVLQ","base64","offsetCode","sourceMaps","lineBreaks","getElementsByTagName","innerHTML","safari","mappings","file","names","sourceRoot","sources","sourcesContent","preserveParens","btoa","unescape","encodeURIComponent","toolHandlers","compiled","expose","script","head","createTextNode","_execute","onResize","setOnResize","setOnFrame","loadScript","canvasId","scopeAttribute","baseURI","loadAll","readyState","Symbol","PlacedSymbol","RoughSegmentRelation","LEFT","RIGHT","INTERSECTS","AHEAD","BEHIND","SEPARATE","UNDEFINED","RoughSegment","px1","py1","px2","py2","RoughSegmentRelationConst","xi","Number","MAX_VALUE","yi","_undefined","isUndefined","otherSegment","grad1","grad2","int1","int2","_getLength","RoughHachureIterator","gap","sinAngle","cosAngle","tanAngle","deltaX","hGap","sLeft","sRight","getNextLine","xLower","xUpper","yLower","yUpper","PathToken","isType","ParsedPath","PARAMS","H","L","M","S","T","V","Z","COMMAND","NUMBER","EOD","parseData","processPoints","loadFromSegments","currentPoint","tokens","token","param_length","console","$1","RoughPath","parsed","bezierReflectionPoint","quadReflectionPoint","linearPoints","_linearPoints","lp","RoughArcConverter","radii","largeArcFlag","sweepFlag","radPerDeg","_segIndex","_numSegs","_rx","_ry","_sinPhi","_cosPhi","x1dash","y1dash","numerator","cxdash","cydash","_C","_theta","calculateVectorAngle","dtheta","_T","_from","getNextSegment","cp1","cp2","cosTheta1","sinTheta1","theta2","cosTheta2","sinTheta2","ta","tb","simplification","outSets","estLength","areas","minArea","minIndex","RoughRenderer","o","ops","_doubleLine","linearPath","_curveWithOffset","roughness","increment","curveStepCount","_getOffset","_ellipse","roughClosure","strt","stp","ellipseInc","arcInc","_arc","hachureFillArc","xc","yc","hachureFillShape","solidFillShape","xCoords","yCoords","maxRandomnessOffset","hachureAngle","hachureGap","it","rectCoords","_getIntersectingLines","hachureFillEllipse","fweight","fillWeight","aspectRatio","hyp","sinAnglePrime","cosAnglePrime","gapPrime","halfLen","xPos","_affine","svgPath","fitter","opList","_processSegment","_bezierTo","ros","prevSeg","ro","ob","prevKey","offset1","offset2","final","arcConverter","F","_line","lengthSq","halfOffset","divergePoint","midDispX","bowing","midDispY","closePoint","curveTightness","cachedVertArray","radOffset","ps","lineCoords","_roughScript","currentScript","RoughGenerator","config","_options","_drawable","lib","_renderer","workly","noWorker","tos","worklySource","worklyURL","rendererSource","roughURL","ourl","URL","createObjectURL","Blob","proxy","diameter","ret","_computePathSize","ns","pathNode","getBBox","RoughGeneratorAsync","RoughCanvas","_init","gen","generator","createRenderer","drawing","drawable","_drawToContext","_fillSketch","p2d","Path2D","hcanvas","createPattern","RoughCanvasAsync","viewWidth","viewHeight","firstDiagonal","secondDiagonal","firstVertical","secondVertical","roughCanvasElement","roughCanvas"],"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Q79EM+qE,CR69EFvsF,UAAUP,KQ79EQ,CR69ElB,GQ79EsBixB,CR69EF,CAAxB,EAA2B,CQ79EIpP,IAAT,CAAc;AAClCxH,AR69ED,SAAK2H,CQ79EE,ER69EP,EQ79EWnN,CR69EAC,IQ79EJ,AR69EP,CQ79EiB,CAAV,EAAa,CAAb,CAD4B;AAElCwF,AR69ED,QQ79EK,CR69EA2H,GQ79EIpN,AR69ET,GAAWE,EQ79EN,CAAU63E,CR69Ef,QQ79EK,EAAqBC,UAArB,CAF8B;AAGlCn3D,AR69ED,SAAKxT,GAAL,GAAW/H,EQ79EGub,ER69Ed,SQh+EmC;AAIlC3N,AR69ED,SAAK5F,GAAL,GAAW/H,EQ79EG2N,ER69Ed;AQj+EmC,ARk+EnChG,GQl+EqB,CAAtB,WRk+EYD,IAAX;AACA,IAND,MAMO;AQ59EP,AR69EC,MQ79EKirE,GR69EA/qE,GAAL,GAAWlN,KAAKjF,CAAhB,EQ79EsB,IAAIohB,KAAKpP,IAAT,CAAc;AACnCxH,AR69ED,SAAK4H,CQ79EE,ER69EP,EQ79EWpN,CR69EAC,IQ79EJ,CAAU,AR69EDhF,CQ79ET,AR69EP,EQ79EoB+8E,UAAb,CAD6B;AAEnCvyE,AR69ED,QQ79EK,CR69EA4H,GQ79EIrN,AR69ET,GAAWE,EQ79EN,CAAU63E,ER69EC/8E,CAAhB,MQ79EK,EAAqB,CAArB,CAF+B;AAGnC6lB,AR69ED,SAAKvT,GAAL,GAAWpN,EQ79EG2gB,GR69EE5lB,CAAhB,OQh+EoC;AAInCiY,AR69EDhG,eAAW5H,EQ79EG4N,ER69Ed;AQj+EoC,ARk+EpC,GQl+EsB,CAAvB;ARm+EA,OAAI,CAAChG,QAAL,EAAe;AQ59Ef,AR69EC,MQ79EKirE,GR69EA9qE,GAAL,IAAY,KAAKF,CQ79EI,ER69ErB,EQ79EyBiP,KAAKpP,IAAT,CAAc;AAClCxH,AR69ED,SAAK8H,CQ79EE,ER69EP,EQ79EWtN,ER69EC,GQ79EL,CAAU+3E,CR69EA3qE,GAAjB,QQ79E2B,CAApB,EAAuB4qE,aAAW,CAAlC,CAD4B;AAElCvyE,AR69ED,QQ79EK,IAAIzF,KAAJ,CAAU+3E,YAAU,CA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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","file":"285728eb62ec2b7041be35bb057ee8fd.map","sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*!\n * Paper.js v0.11.5 - The Swiss Army Knife of Vector Graphics Scripting.\n * http://paperjs.org/\n *\n * Copyright (c) 2011 - 2016, Juerg Lehni & Jonathan Puckey\n * http://scratchdisk.com/ & http://jonathanpuckey.com/\n *\n * Distributed under the MIT license. See LICENSE file for details.\n *\n * All rights reserved.\n *\n * Date: Thu Oct 5 16:16:29 2017 +0200\n *\n ***\n *\n * Straps.js - Class inheritance library with support for bean-style accessors\n *\n * Copyright (c) 2006 - 2016 Juerg Lehni\n * http://scratchdisk.com/\n *\n * Distributed under the MIT license.\n *\n ***\n *\n * Acorn.js\n * http://marijnhaverbeke.nl/acorn/\n *\n * Acorn is a tiny, fast JavaScript parser written in JavaScript,\n * created by Marijn Haverbeke and released under an MIT license.\n *\n */\n\nvar paper = function(self, undefined) {\n\nself = self || require('./node/self.js');\nvar window = self.window,\n\tdocument = self.document;\n\nvar Base = new function() {\n\tvar hidden = /^(statics|enumerable|beans|preserve)$/,\n\t\tarray = [],\n\t\tslice = array.slice,\n\t\tcreate = Object.create,\n\t\tdescribe = Object.getOwnPropertyDescriptor,\n\t\tdefine = Object.defineProperty,\n\n\t\tforEach = array.forEach || function(iter, bind) {\n\t\t\tfor (var i = 0, l = this.length; i < l; i++) {\n\t\t\t\titer.call(bind, this[i], i, this);\n\t\t\t}\n\t\t},\n\n\t\tforIn = function(iter, bind) {\n\t\t\tfor (var i in this) {\n\t\t\t\tif (this.hasOwnProperty(i))\n\t\t\t\t\titer.call(bind, this[i], i, this);\n\t\t\t}\n\t\t},\n\n\t\tset = Object.assign || function(dst) {\n\t\t\tfor (var i = 1, l = arguments.length; i < l; i++) {\n\t\t\t\tvar src = arguments[i];\n\t\t\t\tfor (var key in src) {\n\t\t\t\t\tif (src.hasOwnProperty(key))\n\t\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn dst;\n\t\t},\n\n\t\teach = function(obj, iter, bind) {\n\t\t\tif (obj) {\n\t\t\t\tvar desc = describe(obj, 'length');\n\t\t\t\t(desc && typeof desc.value === 'number' ? forEach : forIn)\n\t\t\t\t\t.call(obj, iter, bind = bind || obj);\n\t\t\t}\n\t\t\treturn bind;\n\t\t};\n\n\tfunction inject(dest, src, enumerable, beans, preserve) {\n\t\tvar beansNames = {};\n\n\t\tfunction field(name, val) {\n\t\t\tval = val || (val = describe(src, name))\n\t\t\t\t\t&& (val.get ? val : val.value);\n\t\t\tif (typeof val === 'string' && val[0] === '#')\n\t\t\t\tval = dest[val.substring(1)] || val;\n\t\t\tvar isFunc = typeof val === 'function',\n\t\t\t\tres = val,\n\t\t\t\tprev = preserve || isFunc && !val.base\n\t\t\t\t\t\t? (val && val.get ? name in dest : dest[name])\n\t\t\t\t\t\t: null,\n\t\t\t\tbean;\n\t\t\tif (!preserve || !prev) {\n\t\t\t\tif (isFunc && prev)\n\t\t\t\t\tval.base = prev;\n\t\t\t\tif (isFunc && beans !== false\n\t\t\t\t\t\t&& (bean = name.match(/^([gs]et|is)(([A-Z])(.*))$/)))\n\t\t\t\t\tbeansNames[bean[3].toLowerCase() + bean[4]] = bean[2];\n\t\t\t\tif (!res || isFunc || !res.get || typeof res.get !== 'function'\n\t\t\t\t\t\t|| !Base.isPlainObject(res)) {\n\t\t\t\t\tres = { value: res, writable: true };\n\t\t\t\t}\n\t\t\t\tif ((describe(dest, name)\n\t\t\t\t\t\t|| { configurable: true }).configurable) {\n\t\t\t\t\tres.configurable = true;\n\t\t\t\t\tres.enumerable = enumerable != null ? enumerable : !bean;\n\t\t\t\t}\n\t\t\t\tdefine(dest, name, res);\n\t\t\t}\n\t\t}\n\t\tif (src) {\n\t\t\tfor (var name in src) {\n\t\t\t\tif (src.hasOwnProperty(name) && !hidden.test(name))\n\t\t\t\t\tfield(name);\n\t\t\t}\n\t\t\tfor (var name in beansNames) {\n\t\t\t\tvar part = beansNames[name],\n\t\t\t\t\tset = dest['set' + part],\n\t\t\t\t\tget = dest['get' + part] || set && dest['is' + part];\n\t\t\t\tif (get && (beans === true || get.length === 0))\n\t\t\t\t\tfield(name, { get: get, set: set });\n\t\t\t}\n\t\t}\n\t\treturn dest;\n\t}\n\n\tfunction Base() {\n\t\tfor (var i = 0, l = arguments.length; i < l; i++) {\n\t\t\tvar src = arguments[i];\n\t\t\tif (src)\n\t\t\t\tset(this, src);\n\t\t}\n\t\treturn this;\n\t}\n\n\treturn inject(Base, {\n\t\tinject: function(src) {\n\t\t\tif (src) {\n\t\t\t\tvar statics = src.statics === true ? src : src.statics,\n\t\t\t\t\tbeans = src.beans,\n\t\t\t\t\tpreserve = src.preserve;\n\t\t\t\tif (statics !== src)\n\t\t\t\t\tinject(this.prototype, src, src.enumerable, beans, preserve);\n\t\t\t\tinject(this, statics, null, beans, preserve);\n\t\t\t}\n\t\t\tfor (var i = 1, l = arguments.length; i < l; i++)\n\t\t\t\tthis.inject(arguments[i]);\n\t\t\treturn this;\n\t\t},\n\n\t\textend: function() {\n\t\t\tvar base = this,\n\t\t\t\tctor,\n\t\t\t\tproto;\n\t\t\tfor (var i = 0, obj, l = arguments.length;\n\t\t\t\t\ti < l && !(ctor && proto); i++) {\n\t\t\t\tobj = arguments[i];\n\t\t\t\tctor = ctor || obj.initialize;\n\t\t\t\tproto = proto || obj.prototype;\n\t\t\t}\n\t\t\tctor = ctor || function() {\n\t\t\t\tbase.apply(this, arguments);\n\t\t\t};\n\t\t\tproto = ctor.prototype = proto || create(this.prototype);\n\t\t\tdefine(proto, 'constructor',\n\t\t\t\t\t{ value: ctor, writable: true, configurable: true });\n\t\t\tinject(ctor, this);\n\t\t\tif (arguments.length)\n\t\t\t\tthis.inject.apply(ctor, arguments);\n\t\t\tctor.base = base;\n\t\t\treturn ctor;\n\t\t}\n\t}).inject({\n\t\tenumerable: false,\n\n\t\tinitialize: Base,\n\n\t\tset: Base,\n\n\t\tinject: function() {\n\t\t\tfor (var i = 0, l = arguments.length; i < l; i++) {\n\t\t\t\tvar src = arguments[i];\n\t\t\t\tif (src) {\n\t\t\t\t\tinject(this, src, src.enumerable, src.beans, src.preserve);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\n\t\textend: function() {\n\t\t\tvar res = create(this);\n\t\t\treturn res.inject.apply(res, arguments);\n\t\t},\n\n\t\teach: function(iter, bind) {\n\t\t\treturn each(this, iter, bind);\n\t\t},\n\n\t\tclone: function() {\n\t\t\treturn new this.constructor(this);\n\t\t},\n\n\t\tstatics: {\n\t\t\tset: set,\n\t\t\teach: each,\n\t\t\tcreate: create,\n\t\t\tdefine: define,\n\t\t\tdescribe: describe,\n\n\t\t\tclone: function(obj) {\n\t\t\t\treturn set(new obj.constructor(), obj);\n\t\t\t},\n\n\t\t\tisPlainObject: function(obj) {\n\t\t\t\tvar ctor = obj != null && obj.constructor;\n\t\t\t\treturn ctor && (ctor === Object || ctor === Base\n\t\t\t\t\t\t|| ctor.name === 'Object');\n\t\t\t},\n\n\t\t\tpick: function(a, b) {\n\t\t\t\treturn a !== undefined ? a : b;\n\t\t\t},\n\n\t\t\tslice: function(list, begin, end) {\n\t\t\t\treturn slice.call(list, begin, end);\n\t\t\t}\n\t\t}\n\t});\n};\n\nif (typeof module !== 'undefined')\n\tmodule.exports = Base;\n\nBase.inject({\n\tenumerable: false,\n\n\ttoString: function() {\n\t\treturn this._id != null\n\t\t\t?  (this._class || 'Object') + (this._name\n\t\t\t\t? \" '\" + this._name + \"'\"\n\t\t\t\t: ' @' + this._id)\n\t\t\t: '{ ' + Base.each(this, function(value, key) {\n\t\t\t\tif (!/^_/.test(key)) {\n\t\t\t\t\tvar type = typeof value;\n\t\t\t\t\tthis.push(key + ': ' + (type === 'number'\n\t\t\t\t\t\t\t? Formatter.instance.number(value)\n\t\t\t\t\t\t\t: type === 'string' ? \"'\" + value + \"'\" : value));\n\t\t\t\t}\n\t\t\t}, []).join(', ') + ' }';\n\t},\n\n\tgetClassName: function() {\n\t\treturn this._class || '';\n\t},\n\n\timportJSON: function(json) {\n\t\treturn Base.importJSON(json, this);\n\t},\n\n\texportJSON: function(options) {\n\t\treturn Base.exportJSON(this, options);\n\t},\n\n\ttoJSON: function() {\n\t\treturn Base.serialize(this);\n\t},\n\n\tset: function(props, exclude) {\n\t\tif (props)\n\t\t\tBase.filter(this, props, exclude, this._prioritize);\n\t\treturn this;\n\t}\n}, {\n\nbeans: false,\nstatics: {\n\texports: {},\n\n\textend: function extend() {\n\t\tvar res = extend.base.apply(this, arguments),\n\t\t\tname = res.prototype._class;\n\t\tif (name && !Base.exports[name])\n\t\t\tBase.exports[name] = res;\n\t\treturn res;\n\t},\n\n\tequals: function(obj1, obj2) {\n\t\tif (obj1 === obj2)\n\t\t\treturn true;\n\t\tif (obj1 && obj1.equals)\n\t\t\treturn obj1.equals(obj2);\n\t\tif (obj2 && obj2.equals)\n\t\t\treturn obj2.equals(obj1);\n\t\tif (obj1 && obj2\n\t\t\t\t&& typeof obj1 === 'object' && typeof obj2 === 'object') {\n\t\t\tif (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\t\t\tvar length = obj1.length;\n\t\t\t\tif (length !== obj2.length)\n\t\t\t\t\treturn false;\n\t\t\t\twhile (length--) {\n\t\t\t\t\tif (!Base.equals(obj1[length], obj2[length]))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar keys = Object.keys(obj1),\n\t\t\t\t\tlength = keys.length;\n\t\t\t\tif (length !== Object.keys(obj2).length)\n\t\t\t\t\treturn false;\n\t\t\t\twhile (length--) {\n\t\t\t\t\tvar key = keys[length];\n\t\t\t\t\tif (!(obj2.hasOwnProperty(key)\n\t\t\t\t\t\t\t&& Base.equals(obj1[key], obj2[key])))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tread: function(list, start, options, amount) {\n\t\tif (this === Base) {\n\t\t\tvar value = this.peek(list, start);\n\t\t\tlist.__index++;\n\t\t\treturn value;\n\t\t}\n\t\tvar proto = this.prototype,\n\t\t\treadIndex = proto._readIndex,\n\t\t\tbegin = start || readIndex && list.__index || 0,\n\t\t\tlength = list.length,\n\t\t\tobj = list[begin];\n\t\tamount = amount || length - begin;\n\t\tif (obj instanceof this\n\t\t\t|| options && options.readNull && obj == null && amount <= 1) {\n\t\t\tif (readIndex)\n\t\t\t\tlist.__index = begin + 1;\n\t\t\treturn obj && options && options.clone ? obj.clone() : obj;\n\t\t}\n\t\tobj = Base.create(proto);\n\t\tif (readIndex)\n\t\t\tobj.__read = true;\n\t\tobj = obj.initialize.apply(obj, begin > 0 || begin + amount < length\n\t\t\t\t? Base.slice(list, begin, begin + amount)\n\t\t\t\t: list) || obj;\n\t\tif (readIndex) {\n\t\t\tlist.__index = begin + obj.__read;\n\t\t\tvar filtered = obj.__filtered;\n\t\t\tif (filtered) {\n\t\t\t\tlist.__filtered = filtered;\n\t\t\t\tobj.__filtered = undefined;\n\t\t\t}\n\t\t\tobj.__read = undefined;\n\t\t}\n\t\treturn obj;\n\t},\n\n\tpeek: function(list, start) {\n\t\treturn list[list.__index = start || list.__index || 0];\n\t},\n\n\tremain: function(list) {\n\t\treturn list.length - (list.__index || 0);\n\t},\n\n\treadList: function(list, start, options, amount) {\n\t\tvar res = [],\n\t\t\tentry,\n\t\t\tbegin = start || 0,\n\t\t\tend = amount ? begin + amount : list.length;\n\t\tfor (var i = begin; i < end; i++) {\n\t\t\tres.push(Array.isArray(entry = list[i])\n\t\t\t\t\t? this.read(entry, 0, options)\n\t\t\t\t\t: this.read(list, i, options, 1));\n\t\t}\n\t\treturn res;\n\t},\n\n\treadNamed: function(list, name, start, options, amount) {\n\t\tvar value = this.getNamed(list, name),\n\t\t\thasObject = value !== undefined;\n\t\tif (hasObject) {\n\t\t\tvar filtered = list.__filtered;\n\t\t\tif (!filtered) {\n\t\t\t\tfiltered = list.__filtered = Base.create(list[0]);\n\t\t\t\tfiltered.__unfiltered = list[0];\n\t\t\t}\n\t\t\tfiltered[name] = undefined;\n\t\t}\n\t\tvar l = hasObject ? [value] : list,\n\t\t\tres = this.read(l, start, options, amount);\n\t\treturn res;\n\t},\n\n\tgetNamed: function(list, name) {\n\t\tvar arg = list[0];\n\t\tif (list._hasObject === undefined)\n\t\t\tlist._hasObject = list.length === 1 && Base.isPlainObject(arg);\n\t\tif (list._hasObject)\n\t\t\treturn name ? arg[name] : list.__filtered || arg;\n\t},\n\n\thasNamed: function(list, name) {\n\t\treturn !!this.getNamed(list, name);\n\t},\n\n\tfilter: function(dest, source, exclude, prioritize) {\n\t\tvar processed;\n\n\t\tfunction handleKey(key) {\n\t\t\tif (!(exclude && key in exclude) &&\n\t\t\t\t!(processed && key in processed)) {\n\t\t\t\tvar value = source[key];\n\t\t\t\tif (value !== undefined)\n\t\t\t\t\tdest[key] = value;\n\t\t\t}\n\t\t}\n\n\t\tif (prioritize) {\n\t\t\tvar keys = {};\n\t\t\tfor (var i = 0, key, l = prioritize.length; i < l; i++) {\n\t\t\t\tif ((key = prioritize[i]) in source) {\n\t\t\t\t\thandleKey(key);\n\t\t\t\t\tkeys[key] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprocessed = keys;\n\t\t}\n\n\t\tObject.keys(source.__unfiltered || source).forEach(handleKey);\n\t\treturn dest;\n\t},\n\n\tisPlainValue: function(obj, asString) {\n\t\treturn Base.isPlainObject(obj) || Array.isArray(obj)\n\t\t\t\t|| asString && typeof obj === 'string';\n\t},\n\n\tserialize: function(obj, options, compact, dictionary) {\n\t\toptions = options || {};\n\n\t\tvar isRoot = !dictionary,\n\t\t\tres;\n\t\tif (isRoot) {\n\t\t\toptions.formatter = new Formatter(options.precision);\n\t\t\tdictionary = {\n\t\t\t\tlength: 0,\n\t\t\t\tdefinitions: {},\n\t\t\t\treferences: {},\n\t\t\t\tadd: function(item, create) {\n\t\t\t\t\tvar id = '#' + item._id,\n\t\t\t\t\t\tref = this.references[id];\n\t\t\t\t\tif (!ref) {\n\t\t\t\t\t\tthis.length++;\n\t\t\t\t\t\tvar res = create.call(item),\n\t\t\t\t\t\t\tname = item._class;\n\t\t\t\t\t\tif (name && res[0] !== name)\n\t\t\t\t\t\t\tres.unshift(name);\n\t\t\t\t\t\tthis.definitions[id] = res;\n\t\t\t\t\t\tref = this.references[id] = [id];\n\t\t\t\t\t}\n\t\t\t\t\treturn ref;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tif (obj && obj._serialize) {\n\t\t\tres = obj._serialize(options, dictionary);\n\t\t\tvar name = obj._class;\n\t\t\tif (name && !obj._compactSerialize && (isRoot || !compact)\n\t\t\t\t\t&& res[0] !== name) {\n\t\t\t\tres.unshift(name);\n\t\t\t}\n\t\t} else if (Array.isArray(obj)) {\n\t\t\tres = [];\n\t\t\tfor (var i = 0, l = obj.length; i < l; i++)\n\t\t\t\tres[i] = Base.serialize(obj[i], options, compact, dictionary);\n\t\t} else if (Base.isPlainObject(obj)) {\n\t\t\tres = {};\n\t\t\tvar keys = Object.keys(obj);\n\t\t\tfor (var i = 0, l = keys.length; i < l; i++) {\n\t\t\t\tvar key = keys[i];\n\t\t\t\tres[key] = Base.serialize(obj[key], options, compact,\n\t\t\t\t\t\tdictionary);\n\t\t\t}\n\t\t} else if (typeof obj === 'number') {\n\t\t\tres = options.formatter.number(obj, options.precision);\n\t\t} else {\n\t\t\tres = obj;\n\t\t}\n\t\treturn isRoot && dictionary.length > 0\n\t\t\t\t? [['dictionary', dictionary.definitions], res]\n\t\t\t\t: res;\n\t},\n\n\tdeserialize: function(json, create, _data, _setDictionary, _isRoot) {\n\t\tvar res = json,\n\t\t\tisFirst = !_data,\n\t\t\thasDictionary = isFirst && json && json.length\n\t\t\t\t&& json[0][0] === 'dictionary';\n\t\t_data = _data || {};\n\t\tif (Array.isArray(json)) {\n\t\t\tvar type = json[0],\n\t\t\t\tisDictionary = type === 'dictionary';\n\t\t\tif (json.length == 1 && /^#/.test(type)) {\n\t\t\t\treturn _data.dictionary[type];\n\t\t\t}\n\t\t\ttype = Base.exports[type];\n\t\t\tres = [];\n\t\t\tfor (var i = type ? 1 : 0, l = json.length; i < l; i++) {\n\t\t\t\tres.push(Base.deserialize(json[i], create, _data,\n\t\t\t\t\t\tisDictionary, hasDictionary));\n\t\t\t}\n\t\t\tif (type) {\n\t\t\t\tvar args = res;\n\t\t\t\tif (create) {\n\t\t\t\t\tres = create(type, args, isFirst || _isRoot);\n\t\t\t\t} else {\n\t\t\t\t\tres = Base.create(type.prototype);\n\t\t\t\t\ttype.apply(res, args);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (Base.isPlainObject(json)) {\n\t\t\tres = {};\n\t\t\tif (_setDictionary)\n\t\t\t\t_data.dictionary = res;\n\t\t\tfor (var key in json)\n\t\t\t\tres[key] = Base.deserialize(json[key], create, _data);\n\t\t}\n\t\treturn hasDictionary ? res[1] : res;\n\t},\n\n\texportJSON: function(obj, options) {\n\t\tvar json = Base.serialize(obj, options);\n\t\treturn options && options.asString == false\n\t\t\t\t? json\n\t\t\t\t: JSON.stringify(json);\n\t},\n\n\timportJSON: function(json, target) {\n\t\treturn Base.deserialize(\n\t\t\t\ttypeof json === 'string' ? JSON.parse(json) : json,\n\t\t\t\tfunction(ctor, args, isRoot) {\n\t\t\t\t\tvar useTarget = isRoot && target\n\t\t\t\t\t\t\t&& target.constructor === ctor,\n\t\t\t\t\t\tobj = useTarget ? target\n\t\t\t\t\t\t\t: Base.create(ctor.prototype);\n\t\t\t\t\tif (args.length === 1 && obj instanceof Item\n\t\t\t\t\t\t\t&& (useTarget || !(obj instanceof Layer))) {\n\t\t\t\t\t\tvar arg = args[0];\n\t\t\t\t\t\tif (Base.isPlainObject(arg))\n\t\t\t\t\t\t\targ.insert = false;\n\t\t\t\t\t}\n\t\t\t\t\t(useTarget ? obj.set : ctor).apply(obj, args);\n\t\t\t\t\tif (useTarget)\n\t\t\t\t\t\ttarget = null;\n\t\t\t\t\treturn obj;\n\t\t\t\t});\n\t},\n\n\tsplice: function(list, items, index, remove) {\n\t\tvar amount = items && items.length,\n\t\t\tappend = index === undefined;\n\t\tindex = append ? list.length : index;\n\t\tif (index > list.length)\n\t\t\tindex = list.length;\n\t\tfor (var i = 0; i < amount; i++)\n\t\t\titems[i]._index = index + i;\n\t\tif (append) {\n\t\t\tlist.push.apply(list, items);\n\t\t\treturn [];\n\t\t} else {\n\t\t\tvar args = [index, remove];\n\t\t\tif (items)\n\t\t\t\targs.push.apply(args, items);\n\t\t\tvar removed = list.splice.apply(list, args);\n\t\t\tfor (var i = 0, l = removed.length; i < l; i++)\n\t\t\t\tremoved[i]._index = undefined;\n\t\t\tfor (var i = index + amount, l = list.length; i < l; i++)\n\t\t\t\tlist[i]._index = i;\n\t\t\treturn removed;\n\t\t}\n\t},\n\n\tcapitalize: function(str) {\n\t\treturn str.replace(/\\b[a-z]/g, function(match) {\n\t\t\treturn match.toUpperCase();\n\t\t});\n\t},\n\n\tcamelize: function(str) {\n\t\treturn str.replace(/-(.)/g, function(match, chr) {\n\t\t\treturn chr.toUpperCase();\n\t\t});\n\t},\n\n\thyphenate: function(str) {\n\t\treturn str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\t}\n}});\n\nvar Emitter = {\n\ton: function(type, func) {\n\t\tif (typeof type !== 'string') {\n\t\t\tBase.each(type, function(value, key) {\n\t\t\t\tthis.on(key, value);\n\t\t\t}, this);\n\t\t} else {\n\t\t\tvar types = this._eventTypes,\n\t\t\t\tentry = types && types[type],\n\t\t\t\thandlers = this._callbacks = this._callbacks || {};\n\t\t\thandlers = handlers[type] = handlers[type] || [];\n\t\t\tif (handlers.indexOf(func) === -1) {\n\t\t\t\thandlers.push(func);\n\t\t\t\tif (entry && entry.install && handlers.length === 1)\n\t\t\t\t\tentry.install.call(this, type);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\n\toff: function(type, func) {\n\t\tif (typeof type !== 'string') {\n\t\t\tBase.each(type, function(value, key) {\n\t\t\t\tthis.off(key, value);\n\t\t\t}, this);\n\t\t\treturn;\n\t\t}\n\t\tvar types = this._eventTypes,\n\t\t\tentry = types && types[type],\n\t\t\thandlers = this._callbacks && this._callbacks[type],\n\t\t\tindex;\n\t\tif (handlers) {\n\t\t\tif (!func || (index = handlers.indexOf(func)) !== -1\n\t\t\t\t\t&& handlers.length === 1) {\n\t\t\t\tif (entry && entry.uninstall)\n\t\t\t\t\tentry.uninstall.call(this, type);\n\t\t\t\tdelete this._callbacks[type];\n\t\t\t} else if (index !== -1) {\n\t\t\t\thandlers.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\n\tonce: function(type, func) {\n\t\treturn this.on(type, function() {\n\t\t\tfunc.apply(this, arguments);\n\t\t\tthis.off(type, func);\n\t\t});\n\t},\n\n\temit: function(type, event) {\n\t\tvar handlers = this._callbacks && this._callbacks[type];\n\t\tif (!handlers)\n\t\t\treturn false;\n\t\tvar args = Base.slice(arguments, 1),\n\t\t\tsetTarget = event && event.target && !event.currentTarget;\n\t\thandlers = handlers.slice();\n\t\tif (setTarget)\n\t\t\tevent.currentTarget = this;\n\t\tfor (var i = 0, l = handlers.length; i < l; i++) {\n\t\t\tif (handlers[i].apply(this, args) == false) {\n\t\t\t\tif (event && event.stop)\n\t\t\t\t\tevent.stop();\n\t\t\t\tbreak;\n\t\t   }\n\t\t}\n\t\tif (setTarget)\n\t\t\tdelete event.currentTarget;\n\t\treturn true;\n\t},\n\n\tresponds: function(type) {\n\t\treturn !!(this._callbacks && this._callbacks[type]);\n\t},\n\n\tattach: '#on',\n\tdetach: '#off',\n\tfire: '#emit',\n\n\t_installEvents: function(install) {\n\t\tvar types = this._eventTypes,\n\t\t\thandlers = this._callbacks,\n\t\t\tkey = install ? 'install' : 'uninstall';\n\t\tif (types) {\n\t\t\tfor (var type in handlers) {\n\t\t\t\tif (handlers[type].length > 0) {\n\t\t\t\t\tvar entry = types[type],\n\t\t\t\t\t\tfunc = entry && entry[key];\n\t\t\t\t\tif (func)\n\t\t\t\t\t\tfunc.call(this, type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tstatics: {\n\t\tinject: function inject(src) {\n\t\t\tvar events = src._events;\n\t\t\tif (events) {\n\t\t\t\tvar types = {};\n\t\t\t\tBase.each(events, function(entry, key) {\n\t\t\t\t\tvar isString = typeof entry === 'string',\n\t\t\t\t\t\tname = isString ? entry : key,\n\t\t\t\t\t\tpart = Base.capitalize(name),\n\t\t\t\t\t\ttype = name.substring(2).toLowerCase();\n\t\t\t\t\ttypes[type] = isString ? {} : entry;\n\t\t\t\t\tname = '_' + name;\n\t\t\t\t\tsrc['get' + part] = function() {\n\t\t\t\t\t\treturn this[name];\n\t\t\t\t\t};\n\t\t\t\t\tsrc['set' + part] = function(func) {\n\t\t\t\t\t\tvar prev = this[name];\n\t\t\t\t\t\tif (prev)\n\t\t\t\t\t\t\tthis.off(type, prev);\n\t\t\t\t\t\tif (func)\n\t\t\t\t\t\t\tthis.on(type, func);\n\t\t\t\t\t\tthis[name] = func;\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tsrc._eventTypes = types;\n\t\t\t}\n\t\t\treturn inject.base.apply(this, arguments);\n\t\t}\n\t}\n};\n\nvar PaperScope = Base.extend({\n\t_class: 'PaperScope',\n\n\tinitialize: function PaperScope() {\n\t\tpaper = this;\n\t\tthis.settings = new Base({\n\t\t\tapplyMatrix: true,\n\t\t\tinsertItems: true,\n\t\t\thandleSize: 4,\n\t\t\thitTolerance: 0\n\t\t});\n\t\tthis.project = null;\n\t\tthis.projects = [];\n\t\tthis.tools = [];\n\t\tthis._id = PaperScope._id++;\n\t\tPaperScope._scopes[this._id] = this;\n\t\tvar proto = PaperScope.prototype;\n\t\tif (!this.support) {\n\t\t\tvar ctx = CanvasProvider.getContext(1, 1) || {};\n\t\t\tproto.support = {\n\t\t\t\tnativeDash: 'setLineDash' in ctx || 'mozDash' in ctx,\n\t\t\t\tnativeBlendModes: BlendMode.nativeModes\n\t\t\t};\n\t\t\tCanvasProvider.release(ctx);\n\t\t}\n\t\tif (!this.agent) {\n\t\t\tvar user = self.navigator.userAgent.toLowerCase(),\n\t\t\t\tos = (/(darwin|win|mac|linux|freebsd|sunos)/.exec(user)||[])[0],\n\t\t\t\tplatform = os === 'darwin' ? 'mac' : os,\n\t\t\t\tagent = proto.agent = proto.browser = { platform: platform };\n\t\t\tif (platform)\n\t\t\t\tagent[platform] = true;\n\t\t\tuser.replace(\n\t\t\t\t/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node)\\/?\\s*([.\\d]+)(?:.*version\\/([.\\d]+))?(?:.*rv\\:v?([.\\d]+))?/g,\n\t\t\t\tfunction(match, n, v1, v2, rv) {\n\t\t\t\t\tif (!agent.chrome) {\n\t\t\t\t\t\tvar v = n === 'opera' ? v2 :\n\t\t\t\t\t\t\t\t/^(node|trident)$/.test(n) ? rv : v1;\n\t\t\t\t\t\tagent.version = v;\n\t\t\t\t\t\tagent.versionNumber = parseFloat(v);\n\t\t\t\t\t\tn = n === 'trident' ? 'msie' : n;\n\t\t\t\t\t\tagent.name = n;\n\t\t\t\t\t\tagent[n] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (agent.chrome)\n\t\t\t\tdelete agent.webkit;\n\t\t\tif (agent.atom)\n\t\t\t\tdelete agent.chrome;\n\t\t}\n\t},\n\n\tversion: \"0.11.5\",\n\n\tgetView: function() {\n\t\tvar project = this.project;\n\t\treturn project && project._view;\n\t},\n\n\tgetPaper: function() {\n\t\treturn this;\n\t},\n\n\texecute: function(code, options) {\n\t\tpaper.PaperScript.execute(code, this, options);\n\t\tView.updateFocus();\n\t},\n\n\tinstall: function(scope) {\n\t\tvar that = this;\n\t\tBase.each(['project', 'view', 'tool'], function(key) {\n\t\t\tBase.define(scope, key, {\n\t\t\t\tconfigurable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn that[key];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tfor (var key in this)\n\t\t\tif (!/^_/.test(key) && this[key])\n\t\t\t\tscope[key] = this[key];\n\t},\n\n\tsetup: function(element) {\n\t\tpaper = this;\n\t\tthis.project = new Project(element);\n\t\treturn this;\n\t},\n\n\tcreateCanvas: function(width, height) {\n\t\treturn CanvasProvider.getCanvas(width, height);\n\t},\n\n\tactivate: function() {\n\t\tpaper = this;\n\t},\n\n\tclear: function() {\n\t\tvar projects = this.projects,\n\t\t\ttools = this.tools;\n\t\tfor (var i = projects.length - 1; i >= 0; i--)\n\t\t\tprojects[i].remove();\n\t\tfor (var i = tools.length - 1; i >= 0; i--)\n\t\t\ttools[i].remove();\n\t},\n\n\tremove: function() {\n\t\tthis.clear();\n\t\tdelete PaperScope._scopes[this._id];\n\t},\n\n\tstatics: new function() {\n\t\tfunction handleAttribute(name) {\n\t\t\tname += 'Attribute';\n\t\t\treturn function(el, attr) {\n\t\t\t\treturn el[name](attr) || el[name]('data-paper-' + attr);\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\t_scopes: {},\n\t\t\t_id: 0,\n\n\t\t\tget: function(id) {\n\t\t\t\treturn this._scopes[id] || null;\n\t\t\t},\n\n\t\t\tgetAttribute: handleAttribute('get'),\n\t\t\thasAttribute: handleAttribute('has')\n\t\t};\n\t}\n});\n\nvar PaperScopeItem = Base.extend(Emitter, {\n\n\tinitialize: function(activate) {\n\t\tthis._scope = paper;\n\t\tthis._index = this._scope[this._list].push(this) - 1;\n\t\tif (activate || !this._scope[this._reference])\n\t\t\tthis.activate();\n\t},\n\n\tactivate: function() {\n\t\tif (!this._scope)\n\t\t\treturn false;\n\t\tvar prev = this._scope[this._reference];\n\t\tif (prev && prev !== this)\n\t\t\tprev.emit('deactivate');\n\t\tthis._scope[this._reference] = this;\n\t\tthis.emit('activate', prev);\n\t\treturn true;\n\t},\n\n\tisActive: function() {\n\t\treturn this._scope[this._reference] === this;\n\t},\n\n\tremove: function() {\n\t\tif (this._index == null)\n\t\t\treturn false;\n\t\tBase.splice(this._scope[this._list], null, this._index, 1);\n\t\tif (this._scope[this._reference] == this)\n\t\t\tthis._scope[this._reference] = null;\n\t\tthis._scope = null;\n\t\treturn true;\n\t},\n\n\tgetView: function() {\n\t\treturn this._scope.getView();\n\t}\n});\n\nvar Formatter = Base.extend({\n\tinitialize: function(precision) {\n\t\tthis.precision = Base.pick(precision, 5);\n\t\tthis.multiplier = Math.pow(10, this.precision);\n\t},\n\n\tnumber: function(val) {\n\t\treturn this.precision < 16\n\t\t\t\t? Math.round(val * this.multiplier) / this.multiplier : val;\n\t},\n\n\tpair: function(val1, val2, separator) {\n\t\treturn this.number(val1) + (separator || ',') + this.number(val2);\n\t},\n\n\tpoint: function(val, separator) {\n\t\treturn this.number(val.x) + (separator || ',') + this.number(val.y);\n\t},\n\n\tsize: function(val, separator) {\n\t\treturn this.number(val.width) + (separator || ',')\n\t\t\t\t+ this.number(val.height);\n\t},\n\n\trectangle: function(val, separator) {\n\t\treturn this.point(val, separator) + (separator || ',')\n\t\t\t\t+ this.size(val, separator);\n\t}\n});\n\nFormatter.instance = new Formatter();\n\nvar Numerical = new function() {\n\n\tvar abscissas = [\n\t\t[  0.5773502691896257645091488],\n\t\t[0,0.7745966692414833770358531],\n\t\t[  0.3399810435848562648026658,0.8611363115940525752239465],\n\t\t[0,0.5384693101056830910363144,0.9061798459386639927976269],\n\t\t[  0.2386191860831969086305017,0.6612093864662645136613996,0.9324695142031520278123016],\n\t\t[0,0.4058451513773971669066064,0.7415311855993944398638648,0.9491079123427585245261897],\n\t\t[  0.1834346424956498049394761,0.5255324099163289858177390,0.7966664774136267395915539,0.9602898564975362316835609],\n\t\t[0,0.3242534234038089290385380,0.6133714327005903973087020,0.8360311073266357942994298,0.9681602395076260898355762],\n\t\t[  0.1488743389816312108848260,0.4333953941292471907992659,0.6794095682990244062343274,0.8650633666889845107320967,0.9739065285171717200779640],\n\t\t[0,0.2695431559523449723315320,0.5190961292068118159257257,0.7301520055740493240934163,0.8870625997680952990751578,0.9782286581460569928039380],\n\t\t[  0.1252334085114689154724414,0.3678314989981801937526915,0.5873179542866174472967024,0.7699026741943046870368938,0.9041172563704748566784659,0.9815606342467192506905491],\n\t\t[0,0.2304583159551347940655281,0.4484927510364468528779129,0.6423493394403402206439846,0.8015780907333099127942065,0.9175983992229779652065478,0.9841830547185881494728294],\n\t\t[  0.1080549487073436620662447,0.3191123689278897604356718,0.5152486363581540919652907,0.6872929048116854701480198,0.8272013150697649931897947,0.9284348836635735173363911,0.9862838086968123388415973],\n\t\t[0,0.2011940939974345223006283,0.3941513470775633698972074,0.5709721726085388475372267,0.7244177313601700474161861,0.8482065834104272162006483,0.9372733924007059043077589,0.9879925180204854284895657],\n\t\t[  0.0950125098376374401853193,0.2816035507792589132304605,0.4580167776572273863424194,0.6178762444026437484466718,0.7554044083550030338951012,0.8656312023878317438804679,0.9445750230732325760779884,0.9894009349916499325961542]\n\t];\n\n\tvar weights = [\n\t\t[1],\n\t\t[0.8888888888888888888888889,0.5555555555555555555555556],\n\t\t[0.6521451548625461426269361,0.3478548451374538573730639],\n\t\t[0.5688888888888888888888889,0.4786286704993664680412915,0.2369268850561890875142640],\n\t\t[0.4679139345726910473898703,0.3607615730481386075698335,0.1713244923791703450402961],\n\t\t[0.4179591836734693877551020,0.3818300505051189449503698,0.2797053914892766679014678,0.1294849661688696932706114],\n\t\t[0.3626837833783619829651504,0.3137066458778872873379622,0.2223810344533744705443560,0.1012285362903762591525314],\n\t\t[0.3302393550012597631645251,0.3123470770400028400686304,0.2606106964029354623187429,0.1806481606948574040584720,0.0812743883615744119718922],\n\t\t[0.2955242247147528701738930,0.2692667193099963550912269,0.2190863625159820439955349,0.1494513491505805931457763,0.0666713443086881375935688],\n\t\t[0.2729250867779006307144835,0.2628045445102466621806889,0.2331937645919904799185237,0.1862902109277342514260976,0.1255803694649046246346943,0.0556685671161736664827537],\n\t\t[0.2491470458134027850005624,0.2334925365383548087608499,0.2031674267230659217490645,0.1600783285433462263346525,0.1069393259953184309602547,0.0471753363865118271946160],\n\t\t[0.2325515532308739101945895,0.2262831802628972384120902,0.2078160475368885023125232,0.1781459807619457382800467,0.1388735102197872384636018,0.0921214998377284479144218,0.0404840047653158795200216],\n\t\t[0.2152638534631577901958764,0.2051984637212956039659241,0.1855383974779378137417166,0.1572031671581935345696019,0.1215185706879031846894148,0.0801580871597602098056333,0.0351194603317518630318329],\n\t\t[0.2025782419255612728806202,0.1984314853271115764561183,0.1861610000155622110268006,0.1662692058169939335532009,0.1395706779261543144478048,0.1071592204671719350118695,0.0703660474881081247092674,0.0307532419961172683546284],\n\t\t[0.1894506104550684962853967,0.1826034150449235888667637,0.1691565193950025381893121,0.1495959888165767320815017,0.1246289712555338720524763,0.0951585116824927848099251,0.0622535239386478928628438,0.0271524594117540948517806]\n\t];\n\n\tvar abs = Math.abs,\n\t\tsqrt = Math.sqrt,\n\t\tpow = Math.pow,\n\t\tlog2 = Math.log2 || function(x) {\n\t\t\treturn Math.log(x) * Math.LOG2E;\n\t\t},\n\t\tEPSILON = 1e-12,\n\t\tMACHINE_EPSILON = 1.12e-16;\n\n\tfunction clamp(value, min, max) {\n\t\treturn value < min ? min : value > max ? max : value;\n\t}\n\n\tfunction getDiscriminant(a, b, c) {\n\t\tfunction split(v) {\n\t\t\tvar x = v * 134217729,\n\t\t\t\ty = v - x,\n\t\t\t\thi = y + x,\n\t\t\t\tlo = v - hi;\n\t\t\treturn [hi, lo];\n\t\t}\n\n\t\tvar D = b * b - a * c,\n\t\t\tE = b * b + a * c;\n\t\tif (abs(D) * 3 < E) {\n\t\t\tvar ad = split(a),\n\t\t\t\tbd = split(b),\n\t\t\t\tcd = split(c),\n\t\t\t\tp = b * b,\n\t\t\t\tdp = (bd[0] * bd[0] - p + 2 * bd[0] * bd[1]) + bd[1] * bd[1],\n\t\t\t\tq = a * c,\n\t\t\t\tdq = (ad[0] * cd[0] - q + ad[0] * cd[1] + ad[1] * cd[0])\n\t\t\t\t\t\t+ ad[1] * cd[1];\n\t\t\tD = (p - q) + (dp - dq);\n\t\t}\n\t\treturn D;\n\t}\n\n\tfunction getNormalizationFactor() {\n\t\tvar norm = Math.max.apply(Math, arguments);\n\t\treturn norm && (norm < 1e-8 || norm > 1e8)\n\t\t\t\t? pow(2, -Math.round(log2(norm)))\n\t\t\t\t: 0;\n\t}\n\n\treturn {\n\t\tEPSILON: EPSILON,\n\t\tMACHINE_EPSILON: MACHINE_EPSILON,\n\t\tCURVETIME_EPSILON: 1e-8,\n\t\tGEOMETRIC_EPSILON: 1e-7,\n\t\tTRIGONOMETRIC_EPSILON: 1e-8,\n\t\tKAPPA: 4 * (sqrt(2) - 1) / 3,\n\n\t\tisZero: function(val) {\n\t\t\treturn val >= -EPSILON && val <= EPSILON;\n\t\t},\n\n\t\tclamp: clamp,\n\n\t\tintegrate: function(f, a, b, n) {\n\t\t\tvar x = abscissas[n - 2],\n\t\t\t\tw = weights[n - 2],\n\t\t\t\tA = (b - a) * 0.5,\n\t\t\t\tB = A + a,\n\t\t\t\ti = 0,\n\t\t\t\tm = (n + 1) >> 1,\n\t\t\t\tsum = n & 1 ? w[i++] * f(B) : 0;\n\t\t\twhile (i < m) {\n\t\t\t\tvar Ax = A * x[i];\n\t\t\t\tsum += w[i++] * (f(B + Ax) + f(B - Ax));\n\t\t\t}\n\t\t\treturn A * sum;\n\t\t},\n\n\t\tfindRoot: function(f, df, x, a, b, n, tolerance) {\n\t\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\tvar fx = f(x),\n\t\t\t\t\tdx = fx / df(x),\n\t\t\t\t\tnx = x - dx;\n\t\t\t\tif (abs(dx) < tolerance) {\n\t\t\t\t\tx = nx;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (fx > 0) {\n\t\t\t\t\tb = x;\n\t\t\t\t\tx = nx <= a ? (a + b) * 0.5 : nx;\n\t\t\t\t} else {\n\t\t\t\t\ta = x;\n\t\t\t\t\tx = nx >= b ? (a + b) * 0.5 : nx;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn clamp(x, a, b);\n\t\t},\n\n\t\tsolveQuadratic: function(a, b, c, roots, min, max) {\n\t\t\tvar x1, x2 = Infinity;\n\t\t\tif (abs(a) < EPSILON) {\n\t\t\t\tif (abs(b) < EPSILON)\n\t\t\t\t\treturn abs(c) < EPSILON ? -1 : 0;\n\t\t\t\tx1 = -c / b;\n\t\t\t} else {\n\t\t\t\tb *= -0.5;\n\t\t\t\tvar D = getDiscriminant(a, b, c);\n\t\t\t\tif (D && abs(D) < MACHINE_EPSILON) {\n\t\t\t\t\tvar f = getNormalizationFactor(abs(a), abs(b), abs(c));\n\t\t\t\t\tif (f) {\n\t\t\t\t\t\ta *= f;\n\t\t\t\t\t\tb *= f;\n\t\t\t\t\t\tc *= f;\n\t\t\t\t\t\tD = getDiscriminant(a, b, c);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (D >= -MACHINE_EPSILON) {\n\t\t\t\t\tvar Q = D < 0 ? 0 : sqrt(D),\n\t\t\t\t\t\tR = b + (b < 0 ? -Q : Q);\n\t\t\t\t\tif (R === 0) {\n\t\t\t\t\t\tx1 = c / a;\n\t\t\t\t\t\tx2 = -x1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx1 = R / a;\n\t\t\t\t\t\tx2 = c / R;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar count = 0,\n\t\t\t\tboundless = min == null,\n\t\t\t\tminB = min - EPSILON,\n\t\t\t\tmaxB = max + EPSILON;\n\t\t\tif (isFinite(x1) && (boundless || x1 > minB && x1 < maxB))\n\t\t\t\troots[count++] = boundless ? x1 : clamp(x1, min, max);\n\t\t\tif (x2 !== x1\n\t\t\t\t\t&& isFinite(x2) && (boundless || x2 > minB && x2 < maxB))\n\t\t\t\troots[count++] = boundless ? x2 : clamp(x2, min, max);\n\t\t\treturn count;\n\t\t},\n\n\t\tsolveCubic: function(a, b, c, d, roots, min, max) {\n\t\t\tvar f = getNormalizationFactor(abs(a), abs(b), abs(c), abs(d)),\n\t\t\t\tx, b1, c2, qd, q;\n\t\t\tif (f) {\n\t\t\t\ta *= f;\n\t\t\t\tb *= f;\n\t\t\t\tc *= f;\n\t\t\t\td *= f;\n\t\t\t}\n\n\t\t\tfunction evaluate(x0) {\n\t\t\t\tx = x0;\n\t\t\t\tvar tmp = a * x;\n\t\t\t\tb1 = tmp + b;\n\t\t\t\tc2 = b1 * x + c;\n\t\t\t\tqd = (tmp + b1) * x + c2;\n\t\t\t\tq = c2 * x + d;\n\t\t\t}\n\n\t\t\tif (abs(a) < EPSILON) {\n\t\t\t\ta = b;\n\t\t\t\tb1 = c;\n\t\t\t\tc2 = d;\n\t\t\t\tx = Infinity;\n\t\t\t} else if (abs(d) < EPSILON) {\n\t\t\t\tb1 = b;\n\t\t\t\tc2 = c;\n\t\t\t\tx = 0;\n\t\t\t} else {\n\t\t\t\tevaluate(-(b / a) / 3);\n\t\t\t\tvar t = q / a,\n\t\t\t\t\tr = pow(abs(t), 1/3),\n\t\t\t\t\ts = t < 0 ? -1 : 1,\n\t\t\t\t\ttd = -qd / a,\n\t\t\t\t\trd = td > 0 ? 1.324717957244746 * Math.max(r, sqrt(td)) : r,\n\t\t\t\t\tx0 = x - s * rd;\n\t\t\t\tif (x0 !== x) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tevaluate(x0);\n\t\t\t\t\t\tx0 = qd === 0 ? x : x - q / qd / (1 + MACHINE_EPSILON);\n\t\t\t\t\t} while (s * x0 > s * x);\n\t\t\t\t\tif (abs(a) * x * x > abs(d / x)) {\n\t\t\t\t\t\tc2 = -d / x;\n\t\t\t\t\t\tb1 = (c2 - c) / x;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar count = Numerical.solveQuadratic(a, b1, c2, roots, min, max),\n\t\t\t\tboundless = min == null;\n\t\t\tif (isFinite(x) && (count === 0\n\t\t\t\t\t|| count > 0 && x !== roots[0] && x !== roots[1])\n\t\t\t\t\t&& (boundless || x > min - EPSILON && x < max + EPSILON))\n\t\t\t\troots[count++] = boundless ? x : clamp(x, min, max);\n\t\t\treturn count;\n\t\t}\n\t};\n};\n\nvar UID = {\n\t_id: 1,\n\t_pools: {},\n\n\tget: function(name) {\n\t\tif (name) {\n\t\t\tvar pool = this._pools[name];\n\t\t\tif (!pool)\n\t\t\t\tpool = this._pools[name] = { _id: 1 };\n\t\t\treturn pool._id++;\n\t\t} else {\n\t\t\treturn this._id++;\n\t\t}\n\t}\n};\n\nvar Point = Base.extend({\n\t_class: 'Point',\n\t_readIndex: true,\n\n\tinitialize: function Point(arg0, arg1) {\n\t\tvar type = typeof arg0,\n\t\t\treading = this.__read,\n\t\t\tread = 0;\n\t\tif (type === 'number') {\n\t\t\tvar hasY = typeof arg1 === 'number';\n\t\t\tthis._set(arg0, hasY ? arg1 : arg0);\n\t\t\tif (reading)\n\t\t\t\tread = hasY ? 2 : 1;\n\t\t} else if (type === 'undefined' || arg0 === null) {\n\t\t\tthis._set(0, 0);\n\t\t\tif (reading)\n\t\t\t\tread = arg0 === null ? 1 : 0;\n\t\t} else {\n\t\t\tvar obj = type === 'string' ? arg0.split(/[\\s,]+/) || [] : arg0;\n\t\t\tread = 1;\n\t\t\tif (Array.isArray(obj)) {\n\t\t\t\tthis._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));\n\t\t\t} else if ('x' in obj) {\n\t\t\t\tthis._set(obj.x || 0, obj.y || 0);\n\t\t\t} else if ('width' in obj) {\n\t\t\t\tthis._set(obj.width || 0, obj.height || 0);\n\t\t\t} else if ('angle' in obj) {\n\t\t\t\tthis._set(obj.length || 0, 0);\n\t\t\t\tthis.setAngle(obj.angle || 0);\n\t\t\t} else {\n\t\t\t\tthis._set(0, 0);\n\t\t\t\tread = 0;\n\t\t\t}\n\t\t}\n\t\tif (reading)\n\t\t\tthis.__read = read;\n\t\treturn this;\n\t},\n\n\tset: '#initialize',\n\n\t_set: function(x, y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t},\n\n\tequals: function(point) {\n\t\treturn this === point || point\n\t\t\t\t&& (this.x === point.x && this.y === point.y\n\t\t\t\t\t|| Array.isArray(point)\n\t\t\t\t\t\t&& this.x === point[0] && this.y === point[1])\n\t\t\t\t|| false;\n\t},\n\n\tclone: function() {\n\t\treturn new Point(this.x, this.y);\n\t},\n\n\ttoString: function() {\n\t\tvar f = Formatter.instance;\n\t\treturn '{ x: ' + f.number(this.x) + ', y: ' + f.number(this.y) + ' }';\n\t},\n\n\t_serialize: function(options) {\n\t\tvar f = options.formatter;\n\t\treturn [f.number(this.x), f.number(this.y)];\n\t},\n\n\tgetLength: function() {\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t},\n\n\tsetLength: function(length) {\n\t\tif (this.isZero()) {\n\t\t\tvar angle = this._angle || 0;\n\t\t\tthis._set(\n\t\t\t\tMath.cos(angle) * length,\n\t\t\t\tMath.sin(angle) * length\n\t\t\t);\n\t\t} else {\n\t\t\tvar scale = length / this.getLength();\n\t\t\tif (Numerical.isZero(scale))\n\t\t\t\tthis.getAngle();\n\t\t\tthis._set(\n\t\t\t\tthis.x * scale,\n\t\t\t\tthis.y * scale\n\t\t\t);\n\t\t}\n\t},\n\tgetAngle: function() {\n\t\treturn this.getAngleInRadians.apply(this, arguments) * 180 / Math.PI;\n\t},\n\n\tsetAngle: function(angle) {\n\t\tthis.setAngleInRadians.call(this, angle * Math.PI / 180);\n\t},\n\n\tgetAngleInDegrees: '#getAngle',\n\tsetAngleInDegrees: '#setAngle',\n\n\tgetAngleInRadians: function() {\n\t\tif (!arguments.length) {\n\t\t\treturn this.isZero()\n\t\t\t\t\t? this._angle || 0\n\t\t\t\t\t: this._angle = Math.atan2(this.y, this.x);\n\t\t} else {\n\t\t\tvar point = Point.read(arguments),\n\t\t\t\tdiv = this.getLength() * point.getLength();\n\t\t\tif (Numerical.isZero(div)) {\n\t\t\t\treturn NaN;\n\t\t\t} else {\n\t\t\t\tvar a = this.dot(point) / div;\n\t\t\t\treturn Math.acos(a < -1 ? -1 : a > 1 ? 1 : a);\n\t\t\t}\n\t\t}\n\t},\n\n\tsetAngleInRadians: function(angle) {\n\t\tthis._angle = angle;\n\t\tif (!this.isZero()) {\n\t\t\tvar length = this.getLength();\n\t\t\tthis._set(\n\t\t\t\tMath.cos(angle) * length,\n\t\t\t\tMath.sin(angle) * length\n\t\t\t);\n\t\t}\n\t},\n\n\tgetQuadrant: function() {\n\t\treturn this.x >= 0 ? this.y >= 0 ? 1 : 4 : this.y >= 0 ? 2 : 3;\n\t}\n}, {\n\tbeans: false,\n\n\tgetDirectedAngle: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn Math.atan2(this.cross(point), this.dot(point)) * 180 / Math.PI;\n\t},\n\n\tgetDistance: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tx = point.x - this.x,\n\t\t\ty = point.y - this.y,\n\t\t\td = x * x + y * y,\n\t\t\tsquared = Base.read(arguments);\n\t\treturn squared ? d : Math.sqrt(d);\n\t},\n\n\tnormalize: function(length) {\n\t\tif (length === undefined)\n\t\t\tlength = 1;\n\t\tvar current = this.getLength(),\n\t\t\tscale = current !== 0 ? length / current : 0,\n\t\t\tpoint = new Point(this.x * scale, this.y * scale);\n\t\tif (scale >= 0)\n\t\t\tpoint._angle = this._angle;\n\t\treturn point;\n\t},\n\n\trotate: function(angle, center) {\n\t\tif (angle === 0)\n\t\t\treturn this.clone();\n\t\tangle = angle * Math.PI / 180;\n\t\tvar point = center ? this.subtract(center) : this,\n\t\t\tsin = Math.sin(angle),\n\t\t\tcos = Math.cos(angle);\n\t\tpoint = new Point(\n\t\t\tpoint.x * cos - point.y * sin,\n\t\t\tpoint.x * sin + point.y * cos\n\t\t);\n\t\treturn center ? point.add(center) : point;\n\t},\n\n\ttransform: function(matrix) {\n\t\treturn matrix ? matrix._transformPoint(this) : this;\n\t},\n\n\tadd: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x + point.x, this.y + point.y);\n\t},\n\n\tsubtract: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x - point.x, this.y - point.y);\n\t},\n\n\tmultiply: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x * point.x, this.y * point.y);\n\t},\n\n\tdivide: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x / point.x, this.y / point.y);\n\t},\n\n\tmodulo: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x % point.x, this.y % point.y);\n\t},\n\n\tnegate: function() {\n\t\treturn new Point(-this.x, -this.y);\n\t},\n\n\tisInside: function() {\n\t\treturn Rectangle.read(arguments).contains(this);\n\t},\n\n\tisClose: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\ttolerance = Base.read(arguments);\n\t\treturn this.getDistance(point) <= tolerance;\n\t},\n\n\tisCollinear: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn Point.isCollinear(this.x, this.y, point.x, point.y);\n\t},\n\n\tisColinear: '#isCollinear',\n\n\tisOrthogonal: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn Point.isOrthogonal(this.x, this.y, point.x, point.y);\n\t},\n\n\tisZero: function() {\n\t\tvar isZero = Numerical.isZero;\n\t\treturn isZero(this.x) && isZero(this.y);\n\t},\n\n\tisNaN: function() {\n\t\treturn isNaN(this.x) || isNaN(this.y);\n\t},\n\n\tisInQuadrant: function(q) {\n\t\treturn this.x * (q > 1 && q < 4 ? -1 : 1) >= 0\n\t\t\t&& this.y * (q > 2 ? -1 : 1) >= 0;\n\t},\n\n\tdot: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn this.x * point.x + this.y * point.y;\n\t},\n\n\tcross: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn this.x * point.y - this.y * point.x;\n\t},\n\n\tproject: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tscale = point.isZero() ? 0 : this.dot(point) / point.dot(point);\n\t\treturn new Point(\n\t\t\tpoint.x * scale,\n\t\t\tpoint.y * scale\n\t\t);\n\t},\n\n\tstatics: {\n\t\tmin: function() {\n\t\t\tvar point1 = Point.read(arguments),\n\t\t\t\tpoint2 = Point.read(arguments);\n\t\t\treturn new Point(\n\t\t\t\tMath.min(point1.x, point2.x),\n\t\t\t\tMath.min(point1.y, point2.y)\n\t\t\t);\n\t\t},\n\n\t\tmax: function() {\n\t\t\tvar point1 = Point.read(arguments),\n\t\t\t\tpoint2 = Point.read(arguments);\n\t\t\treturn new Point(\n\t\t\t\tMath.max(point1.x, point2.x),\n\t\t\t\tMath.max(point1.y, point2.y)\n\t\t\t);\n\t\t},\n\n\t\trandom: function() {\n\t\t\treturn new Point(Math.random(), Math.random());\n\t\t},\n\n\t\tisCollinear: function(x1, y1, x2, y2) {\n\t\t\treturn Math.abs(x1 * y2 - y1 * x2)\n\t\t\t\t\t<= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2))\n\t\t\t\t\t\t* 1e-8;\n\t\t},\n\n\t\tisOrthogonal: function(x1, y1, x2, y2) {\n\t\t\treturn Math.abs(x1 * x2 + y1 * y2)\n\t\t\t\t\t<= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2))\n\t\t\t\t\t\t* 1e-8;\n\t\t}\n\t}\n}, Base.each(['round', 'ceil', 'floor', 'abs'], function(key) {\n\tvar op = Math[key];\n\tthis[key] = function() {\n\t\treturn new Point(op(this.x), op(this.y));\n\t};\n}, {}));\n\nvar LinkedPoint = Point.extend({\n\tinitialize: function Point(x, y, owner, setter) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._owner = owner;\n\t\tthis._setter = setter;\n\t},\n\n\t_set: function(x, y, _dontNotify) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tif (!_dontNotify)\n\t\t\tthis._owner[this._setter](this);\n\t\treturn this;\n\t},\n\n\tgetX: function() {\n\t\treturn this._x;\n\t},\n\n\tsetX: function(x) {\n\t\tthis._x = x;\n\t\tthis._owner[this._setter](this);\n\t},\n\n\tgetY: function() {\n\t\treturn this._y;\n\t},\n\n\tsetY: function(y) {\n\t\tthis._y = y;\n\t\tthis._owner[this._setter](this);\n\t},\n\n\tisSelected: function() {\n\t\treturn !!(this._owner._selection & this._getSelection());\n\t},\n\n\tsetSelected: function(selected) {\n\t\tthis._owner._changeSelection(this._getSelection(), selected);\n\t},\n\n\t_getSelection: function() {\n\t\treturn this._setter === 'setPosition' ? 4 : 0;\n\t}\n});\n\nvar Size = Base.extend({\n\t_class: 'Size',\n\t_readIndex: true,\n\n\tinitialize: function Size(arg0, arg1) {\n\t\tvar type = typeof arg0,\n\t\t\treading = this.__read,\n\t\t\tread = 0;\n\t\tif (type === 'number') {\n\t\t\tvar hasHeight = typeof arg1 === 'number';\n\t\t\tthis._set(arg0, hasHeight ? arg1 : arg0);\n\t\t\tif (reading)\n\t\t\t\tread = hasHeight ? 2 : 1;\n\t\t} else if (type === 'undefined' || arg0 === null) {\n\t\t\tthis._set(0, 0);\n\t\t\tif (reading)\n\t\t\t\tread = arg0 === null ? 1 : 0;\n\t\t} else {\n\t\t\tvar obj = type === 'string' ? arg0.split(/[\\s,]+/) || [] : arg0;\n\t\t\tread = 1;\n\t\t\tif (Array.isArray(obj)) {\n\t\t\t\tthis._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));\n\t\t\t} else if ('width' in obj) {\n\t\t\t\tthis._set(obj.width || 0, obj.height || 0);\n\t\t\t} else if ('x' in obj) {\n\t\t\t\tthis._set(obj.x || 0, obj.y || 0);\n\t\t\t} else {\n\t\t\t\tthis._set(0, 0);\n\t\t\t\tread = 0;\n\t\t\t}\n\t\t}\n\t\tif (reading)\n\t\t\tthis.__read = read;\n\t\treturn this;\n\t},\n\n\tset: '#initialize',\n\n\t_set: function(width, height) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\treturn this;\n\t},\n\n\tequals: function(size) {\n\t\treturn size === this || size && (this.width === size.width\n\t\t\t\t&& this.height === size.height\n\t\t\t\t|| Array.isArray(size) && this.width === size[0]\n\t\t\t\t\t&& this.height === size[1]) || false;\n\t},\n\n\tclone: function() {\n\t\treturn new Size(this.width, this.height);\n\t},\n\n\ttoString: function() {\n\t\tvar f = Formatter.instance;\n\t\treturn '{ width: ' + f.number(this.width)\n\t\t\t\t+ ', height: ' + f.number(this.height) + ' }';\n\t},\n\n\t_serialize: function(options) {\n\t\tvar f = options.formatter;\n\t\treturn [f.number(this.width),\n\t\t\t\tf.number(this.height)];\n\t},\n\n\tadd: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width + size.width, this.height + size.height);\n\t},\n\n\tsubtract: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width - size.width, this.height - size.height);\n\t},\n\n\tmultiply: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width * size.width, this.height * size.height);\n\t},\n\n\tdivide: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width / size.width, this.height / size.height);\n\t},\n\n\tmodulo: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width % size.width, this.height % size.height);\n\t},\n\n\tnegate: function() {\n\t\treturn new Size(-this.width, -this.height);\n\t},\n\n\tisZero: function() {\n\t\tvar isZero = Numerical.isZero;\n\t\treturn isZero(this.width) && isZero(this.height);\n\t},\n\n\tisNaN: function() {\n\t\treturn isNaN(this.width) || isNaN(this.height);\n\t},\n\n\tstatics: {\n\t\tmin: function(size1, size2) {\n\t\t\treturn new Size(\n\t\t\t\tMath.min(size1.width, size2.width),\n\t\t\t\tMath.min(size1.height, size2.height));\n\t\t},\n\n\t\tmax: function(size1, size2) {\n\t\t\treturn new Size(\n\t\t\t\tMath.max(size1.width, size2.width),\n\t\t\t\tMath.max(size1.height, size2.height));\n\t\t},\n\n\t\trandom: function() {\n\t\t\treturn new Size(Math.random(), Math.random());\n\t\t}\n\t}\n}, Base.each(['round', 'ceil', 'floor', 'abs'], function(key) {\n\tvar op = Math[key];\n\tthis[key] = function() {\n\t\treturn new Size(op(this.width), op(this.height));\n\t};\n}, {}));\n\nvar LinkedSize = Size.extend({\n\tinitialize: function Size(width, height, owner, setter) {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tthis._owner = owner;\n\t\tthis._setter = setter;\n\t},\n\n\t_set: function(width, height, _dontNotify) {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tif (!_dontNotify)\n\t\t\tthis._owner[this._setter](this);\n\t\treturn this;\n\t},\n\n\tgetWidth: function() {\n\t\treturn this._width;\n\t},\n\n\tsetWidth: function(width) {\n\t\tthis._width = width;\n\t\tthis._owner[this._setter](this);\n\t},\n\n\tgetHeight: function() {\n\t\treturn this._height;\n\t},\n\n\tsetHeight: function(height) {\n\t\tthis._height = height;\n\t\tthis._owner[this._setter](this);\n\t}\n});\n\nvar Rectangle = Base.extend({\n\t_class: 'Rectangle',\n\t_readIndex: true,\n\tbeans: true,\n\n\tinitialize: function Rectangle(arg0, arg1, arg2, arg3) {\n\t\tvar type = typeof arg0,\n\t\t\tread;\n\t\tif (type === 'number') {\n\t\t\tthis._set(arg0, arg1, arg2, arg3);\n\t\t\tread = 4;\n\t\t} else if (type === 'undefined' || arg0 === null) {\n\t\t\tthis._set(0, 0, 0, 0);\n\t\t\tread = arg0 === null ? 1 : 0;\n\t\t} else if (arguments.length === 1) {\n\t\t\tif (Array.isArray(arg0)) {\n\t\t\t\tthis._set.apply(this, arg0);\n\t\t\t\tread = 1;\n\t\t\t} else if (arg0.x !== undefined || arg0.width !== undefined) {\n\t\t\t\tthis._set(arg0.x || 0, arg0.y || 0,\n\t\t\t\t\t\targ0.width || 0, arg0.height || 0);\n\t\t\t\tread = 1;\n\t\t\t} else if (arg0.from === undefined && arg0.to === undefined) {\n\t\t\t\tthis._set(0, 0, 0, 0);\n\t\t\t\tBase.filter(this, arg0);\n\t\t\t\tread = 1;\n\t\t\t}\n\t\t}\n\t\tif (read === undefined) {\n\t\t\tvar frm = Point.readNamed(arguments, 'from'),\n\t\t\t\tnext = Base.peek(arguments),\n\t\t\t\tx = frm.x,\n\t\t\t\ty = frm.y,\n\t\t\t\twidth,\n\t\t\t\theight;\n\t\t\tif (next && next.x !== undefined\n\t\t\t\t\t|| Base.hasNamed(arguments, 'to')) {\n\t\t\t\tvar to = Point.readNamed(arguments, 'to');\n\t\t\t\twidth = to.x - x;\n\t\t\t\theight = to.y - y;\n\t\t\t\tif (width < 0) {\n\t\t\t\t\tx = to.x;\n\t\t\t\t\twidth = -width;\n\t\t\t\t}\n\t\t\t\tif (height < 0) {\n\t\t\t\t\ty = to.y;\n\t\t\t\t\theight = -height;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar size = Size.read(arguments);\n\t\t\t\twidth = size.width;\n\t\t\t\theight = size.height;\n\t\t\t}\n\t\t\tthis._set(x, y, width, height);\n\t\t\tread = arguments.__index;\n\t\t\tvar filtered = arguments.__filtered;\n\t\t\tif (filtered)\n\t\t\t\tthis.__filtered = filtered;\n\t\t}\n\t\tif (this.__read)\n\t\t\tthis.__read = read;\n\t\treturn this;\n\t},\n\n\tset: '#initialize',\n\n\t_set: function(x, y, width, height) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\treturn this;\n\t},\n\n\tclone: function() {\n\t\treturn new Rectangle(this.x, this.y, this.width, this.height);\n\t},\n\n\tequals: function(rect) {\n\t\tvar rt = Base.isPlainValue(rect)\n\t\t\t\t? Rectangle.read(arguments)\n\t\t\t\t: rect;\n\t\treturn rt === this\n\t\t\t\t|| rt && this.x === rt.x && this.y === rt.y\n\t\t\t\t\t&& this.width === rt.width && this.height === rt.height\n\t\t\t\t|| false;\n\t},\n\n\ttoString: function() {\n\t\tvar f = Formatter.instance;\n\t\treturn '{ x: ' + f.number(this.x)\n\t\t\t\t+ ', y: ' + f.number(this.y)\n\t\t\t\t+ ', width: ' + f.number(this.width)\n\t\t\t\t+ ', height: ' + f.number(this.height)\n\t\t\t\t+ ' }';\n\t},\n\n\t_serialize: function(options) {\n\t\tvar f = options.formatter;\n\t\treturn [f.number(this.x),\n\t\t\t\tf.number(this.y),\n\t\t\t\tf.number(this.width),\n\t\t\t\tf.number(this.height)];\n\t},\n\n\tgetPoint: function(_dontLink) {\n\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\treturn new ctor(this.x, this.y, this, 'setPoint');\n\t},\n\n\tsetPoint: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis.x = point.x;\n\t\tthis.y = point.y;\n\t},\n\n\tgetSize: function(_dontLink) {\n\t\tvar ctor = _dontLink ? Size : LinkedSize;\n\t\treturn new ctor(this.width, this.height, this, 'setSize');\n\t},\n\n\t_fw: 1,\n\t_fh: 1,\n\n\tsetSize: function() {\n\t\tvar size = Size.read(arguments),\n\t\t\tsx = this._sx,\n\t\t\tsy = this._sy,\n\t\t\tw = size.width,\n\t\t\th = size.height;\n\t\tif (sx) {\n\t\t\tthis.x += (this.width - w) * sx;\n\t\t}\n\t\tif (sy) {\n\t\t\tthis.y += (this.height - h) * sy;\n\t\t}\n\t\tthis.width = w;\n\t\tthis.height = h;\n\t\tthis._fw = this._fh = 1;\n\t},\n\n\tgetLeft: function() {\n\t\treturn this.x;\n\t},\n\n\tsetLeft: function(left) {\n\t\tif (!this._fw) {\n\t\t\tvar amount = left - this.x;\n\t\t\tthis.width -= this._sx === 0.5 ? amount * 2 : amount;\n\t\t}\n\t\tthis.x = left;\n\t\tthis._sx = this._fw = 0;\n\t},\n\n\tgetTop: function() {\n\t\treturn this.y;\n\t},\n\n\tsetTop: function(top) {\n\t\tif (!this._fh) {\n\t\t\tvar amount = top - this.y;\n\t\t\tthis.height -= this._sy === 0.5 ? amount * 2 : amount;\n\t\t}\n\t\tthis.y = top;\n\t\tthis._sy = this._fh = 0;\n\t},\n\n\tgetRight: function() {\n\t\treturn this.x + this.width;\n\t},\n\n\tsetRight: function(right) {\n\t\tif (!this._fw) {\n\t\t\tvar amount = right - this.x;\n\t\t\tthis.width = this._sx === 0.5 ? amount * 2 : amount;\n\t\t}\n\t\tthis.x = right - this.width;\n\t\tthis._sx = 1;\n\t\tthis._fw = 0;\n\t},\n\n\tgetBottom: function() {\n\t\treturn this.y + this.height;\n\t},\n\n\tsetBottom: function(bottom) {\n\t\tif (!this._fh) {\n\t\t\tvar amount = bottom - this.y;\n\t\t\tthis.height = this._sy === 0.5 ? amount * 2 : amount;\n\t\t}\n\t\tthis.y = bottom - this.height;\n\t\tthis._sy = 1;\n\t\tthis._fh = 0;\n\t},\n\n\tgetCenterX: function() {\n\t\treturn this.x + this.width / 2;\n\t},\n\n\tsetCenterX: function(x) {\n\t\tif (this._fw || this._sx === 0.5) {\n\t\t\tthis.x = x - this.width / 2;\n\t\t} else {\n\t\t\tif (this._sx) {\n\t\t\t\tthis.x += (x - this.x) * 2 * this._sx;\n\t\t\t}\n\t\t\tthis.width = (x - this.x) * 2;\n\t\t}\n\t\tthis._sx = 0.5;\n\t\tthis._fw = 0;\n\t},\n\n\tgetCenterY: function() {\n\t\treturn this.y + this.height / 2;\n\t},\n\n\tsetCenterY: function(y) {\n\t\tif (this._fh || this._sy === 0.5) {\n\t\t\tthis.y = y - this.height / 2;\n\t\t} else {\n\t\t\tif (this._sy) {\n\t\t\t\tthis.y += (y - this.y) * 2 * this._sy;\n\t\t\t}\n\t\t\tthis.height = (y - this.y) * 2;\n\t\t}\n\t\tthis._sy = 0.5;\n\t\tthis._fh = 0;\n\t},\n\n\tgetCenter: function(_dontLink) {\n\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\treturn new ctor(this.getCenterX(), this.getCenterY(), this, 'setCenter');\n\t},\n\n\tsetCenter: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis.setCenterX(point.x);\n\t\tthis.setCenterY(point.y);\n\t\treturn this;\n\t},\n\n\tgetArea: function() {\n\t\treturn this.width * this.height;\n\t},\n\n\tisEmpty: function() {\n\t\treturn this.width === 0 || this.height === 0;\n\t},\n\n\tcontains: function(arg) {\n\t\treturn arg && arg.width !== undefined\n\t\t\t\t|| (Array.isArray(arg) ? arg : arguments).length === 4\n\t\t\t\t? this._containsRectangle(Rectangle.read(arguments))\n\t\t\t\t: this._containsPoint(Point.read(arguments));\n\t},\n\n\t_containsPoint: function(point) {\n\t\tvar x = point.x,\n\t\t\ty = point.y;\n\t\treturn x >= this.x && y >= this.y\n\t\t\t\t&& x <= this.x + this.width\n\t\t\t\t&& y <= this.y + this.height;\n\t},\n\n\t_containsRectangle: function(rect) {\n\t\tvar x = rect.x,\n\t\t\ty = rect.y;\n\t\treturn x >= this.x && y >= this.y\n\t\t\t\t&& x + rect.width <= this.x + this.width\n\t\t\t\t&& y + rect.height <= this.y + this.height;\n\t},\n\n\tintersects: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tepsilon = Base.read(arguments) || 0;\n\t\treturn rect.x + rect.width > this.x - epsilon\n\t\t\t\t&& rect.y + rect.height > this.y - epsilon\n\t\t\t\t&& rect.x < this.x + this.width + epsilon\n\t\t\t\t&& rect.y < this.y + this.height + epsilon;\n\t},\n\n\tintersect: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tx1 = Math.max(this.x, rect.x),\n\t\t\ty1 = Math.max(this.y, rect.y),\n\t\t\tx2 = Math.min(this.x + this.width, rect.x + rect.width),\n\t\t\ty2 = Math.min(this.y + this.height, rect.y + rect.height);\n\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t},\n\n\tunite: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tx1 = Math.min(this.x, rect.x),\n\t\t\ty1 = Math.min(this.y, rect.y),\n\t\t\tx2 = Math.max(this.x + this.width, rect.x + rect.width),\n\t\t\ty2 = Math.max(this.y + this.height, rect.y + rect.height);\n\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t},\n\n\tinclude: function() {\n\t\tvar point = Point.read(arguments);\n\t\tvar x1 = Math.min(this.x, point.x),\n\t\t\ty1 = Math.min(this.y, point.y),\n\t\t\tx2 = Math.max(this.x + this.width, point.x),\n\t\t\ty2 = Math.max(this.y + this.height, point.y);\n\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t},\n\n\texpand: function() {\n\t\tvar amount = Size.read(arguments),\n\t\t\thor = amount.width,\n\t\t\tver = amount.height;\n\t\treturn new Rectangle(this.x - hor / 2, this.y - ver / 2,\n\t\t\t\tthis.width + hor, this.height + ver);\n\t},\n\n\tscale: function(hor, ver) {\n\t\treturn this.expand(this.width * hor - this.width,\n\t\t\t\tthis.height * (ver === undefined ? hor : ver) - this.height);\n\t}\n}, Base.each([\n\t\t['Top', 'Left'], ['Top', 'Right'],\n\t\t['Bottom', 'Left'], ['Bottom', 'Right'],\n\t\t['Left', 'Center'], ['Top', 'Center'],\n\t\t['Right', 'Center'], ['Bottom', 'Center']\n\t],\n\tfunction(parts, index) {\n\t\tvar part = parts.join(''),\n\t\t\txFirst = /^[RL]/.test(part);\n\t\tif (index >= 4)\n\t\t\tparts[1] += xFirst ? 'Y' : 'X';\n\t\tvar x = parts[xFirst ? 0 : 1],\n\t\t\ty = parts[xFirst ? 1 : 0],\n\t\t\tgetX = 'get' + x,\n\t\t\tgetY = 'get' + y,\n\t\t\tsetX = 'set' + x,\n\t\t\tsetY = 'set' + y,\n\t\t\tget = 'get' + part,\n\t\t\tset = 'set' + part;\n\t\tthis[get] = function(_dontLink) {\n\t\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\t\treturn new ctor(this[getX](), this[getY](), this, set);\n\t\t};\n\t\tthis[set] = function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\tthis[setX](point.x);\n\t\t\tthis[setY](point.y);\n\t\t};\n\t}, {\n\t\tbeans: true\n\t}\n));\n\nvar LinkedRectangle = Rectangle.extend({\n\tinitialize: function Rectangle(x, y, width, height, owner, setter) {\n\t\tthis._set(x, y, width, height, true);\n\t\tthis._owner = owner;\n\t\tthis._setter = setter;\n\t},\n\n\t_set: function(x, y, width, height, _dontNotify) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tif (!_dontNotify)\n\t\t\tthis._owner[this._setter](this);\n\t\treturn this;\n\t}\n},\nnew function() {\n\tvar proto = Rectangle.prototype;\n\n\treturn Base.each(['x', 'y', 'width', 'height'], function(key) {\n\t\tvar part = Base.capitalize(key),\n\t\t\tinternal = '_' + key;\n\t\tthis['get' + part] = function() {\n\t\t\treturn this[internal];\n\t\t};\n\n\t\tthis['set' + part] = function(value) {\n\t\t\tthis[internal] = value;\n\t\t\tif (!this._dontNotify)\n\t\t\t\tthis._owner[this._setter](this);\n\t\t};\n\t}, Base.each(['Point', 'Size', 'Center',\n\t\t\t'Left', 'Top', 'Right', 'Bottom', 'CenterX', 'CenterY',\n\t\t\t'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',\n\t\t\t'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'],\n\t\tfunction(key) {\n\t\t\tvar name = 'set' + key;\n\t\t\tthis[name] = function() {\n\t\t\t\tthis._dontNotify = true;\n\t\t\t\tproto[name].apply(this, arguments);\n\t\t\t\tthis._dontNotify = false;\n\t\t\t\tthis._owner[this._setter](this);\n\t\t\t};\n\t\t}, {\n\t\t\tisSelected: function() {\n\t\t\t\treturn !!(this._owner._selection & 2);\n\t\t\t},\n\n\t\t\tsetSelected: function(selected) {\n\t\t\t\tvar owner = this._owner;\n\t\t\t\tif (owner._changeSelection) {\n\t\t\t\t\towner._changeSelection(2, selected);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t);\n});\n\nvar Matrix = Base.extend({\n\t_class: 'Matrix',\n\n\tinitialize: function Matrix(arg, _dontNotify) {\n\t\tvar count = arguments.length,\n\t\t\tok = true;\n\t\tif (count >= 6) {\n\t\t\tthis._set.apply(this, arguments);\n\t\t} else if (count === 1 || count === 2) {\n\t\t\tif (arg instanceof Matrix) {\n\t\t\t\tthis._set(arg._a, arg._b, arg._c, arg._d, arg._tx, arg._ty,\n\t\t\t\t\t\t_dontNotify);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tthis._set.apply(this,\n\t\t\t\t\t\t_dontNotify ? arg.concat([_dontNotify]) : arg);\n\t\t\t} else {\n\t\t\t\tok = false;\n\t\t\t}\n\t\t} else if (!count) {\n\t\t\tthis.reset();\n\t\t} else {\n\t\t\tok = false;\n\t\t}\n\t\tif (!ok) {\n\t\t\tthrow new Error('Unsupported matrix parameters');\n\t\t}\n\t\treturn this;\n\t},\n\n\tset: '#initialize',\n\n\t_set: function(a, b, c, d, tx, ty, _dontNotify) {\n\t\tthis._a = a;\n\t\tthis._b = b;\n\t\tthis._c = c;\n\t\tthis._d = d;\n\t\tthis._tx = tx;\n\t\tthis._ty = ty;\n\t\tif (!_dontNotify)\n\t\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn Base.serialize(this.getValues(), options, true, dictionary);\n\t},\n\n\t_changed: function() {\n\t\tvar owner = this._owner;\n\t\tif (owner) {\n\t\t\tif (owner._applyMatrix) {\n\t\t\t\towner.transform(null, true);\n\t\t\t} else {\n\t\t\t\towner._changed(9);\n\t\t\t}\n\t\t}\n\t},\n\n\tclone: function() {\n\t\treturn new Matrix(this._a, this._b, this._c, this._d,\n\t\t\t\tthis._tx, this._ty);\n\t},\n\n\tequals: function(mx) {\n\t\treturn mx === this || mx && this._a === mx._a && this._b === mx._b\n\t\t\t\t&& this._c === mx._c && this._d === mx._d\n\t\t\t\t&& this._tx === mx._tx && this._ty === mx._ty;\n\t},\n\n\ttoString: function() {\n\t\tvar f = Formatter.instance;\n\t\treturn '[[' + [f.number(this._a), f.number(this._c),\n\t\t\t\t\tf.number(this._tx)].join(', ') + '], ['\n\t\t\t\t+ [f.number(this._b), f.number(this._d),\n\t\t\t\t\tf.number(this._ty)].join(', ') + ']]';\n\t},\n\n\treset: function(_dontNotify) {\n\t\tthis._a = this._d = 1;\n\t\tthis._b = this._c = this._tx = this._ty = 0;\n\t\tif (!_dontNotify)\n\t\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tapply: function(recursively, _setApplyMatrix) {\n\t\tvar owner = this._owner;\n\t\tif (owner) {\n\t\t\towner.transform(null, true, Base.pick(recursively, true),\n\t\t\t\t\t_setApplyMatrix);\n\t\t\treturn this.isIdentity();\n\t\t}\n\t\treturn false;\n\t},\n\n\ttranslate: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tx = point.x,\n\t\t\ty = point.y;\n\t\tthis._tx += x * this._a + y * this._c;\n\t\tthis._ty += x * this._b + y * this._d;\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tscale: function() {\n\t\tvar scale = Point.read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\tif (center)\n\t\t\tthis.translate(center);\n\t\tthis._a *= scale.x;\n\t\tthis._b *= scale.x;\n\t\tthis._c *= scale.y;\n\t\tthis._d *= scale.y;\n\t\tif (center)\n\t\t\tthis.translate(center.negate());\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\trotate: function(angle ) {\n\t\tangle *= Math.PI / 180;\n\t\tvar center = Point.read(arguments, 1),\n\t\t\tx = center.x,\n\t\t\ty = center.y,\n\t\t\tcos = Math.cos(angle),\n\t\t\tsin = Math.sin(angle),\n\t\t\ttx = x - x * cos + y * sin,\n\t\t\tty = y - x * sin - y * cos,\n\t\t\ta = this._a,\n\t\t\tb = this._b,\n\t\t\tc = this._c,\n\t\t\td = this._d;\n\t\tthis._a = cos * a + sin * c;\n\t\tthis._b = cos * b + sin * d;\n\t\tthis._c = -sin * a + cos * c;\n\t\tthis._d = -sin * b + cos * d;\n\t\tthis._tx += tx * a + ty * c;\n\t\tthis._ty += tx * b + ty * d;\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tshear: function() {\n\t\tvar shear = Point.read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\tif (center)\n\t\t\tthis.translate(center);\n\t\tvar a = this._a,\n\t\t\tb = this._b;\n\t\tthis._a += shear.y * this._c;\n\t\tthis._b += shear.y * this._d;\n\t\tthis._c += shear.x * a;\n\t\tthis._d += shear.x * b;\n\t\tif (center)\n\t\t\tthis.translate(center.negate());\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tskew: function() {\n\t\tvar skew = Point.read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true }),\n\t\t\ttoRadians = Math.PI / 180,\n\t\t\tshear = new Point(Math.tan(skew.x * toRadians),\n\t\t\t\tMath.tan(skew.y * toRadians));\n\t\treturn this.shear(shear, center);\n\t},\n\n\tappend: function(mx, _dontNotify) {\n\t\tif (mx) {\n\t\t\tvar a1 = this._a,\n\t\t\t\tb1 = this._b,\n\t\t\t\tc1 = this._c,\n\t\t\t\td1 = this._d,\n\t\t\t\ta2 = mx._a,\n\t\t\t\tb2 = mx._c,\n\t\t\t\tc2 = mx._b,\n\t\t\t\td2 = mx._d,\n\t\t\t\ttx2 = mx._tx,\n\t\t\t\tty2 = mx._ty;\n\t\t\tthis._a = a2 * a1 + c2 * c1;\n\t\t\tthis._c = b2 * a1 + d2 * c1;\n\t\t\tthis._b = a2 * b1 + c2 * d1;\n\t\t\tthis._d = b2 * b1 + d2 * d1;\n\t\t\tthis._tx += tx2 * a1 + ty2 * c1;\n\t\t\tthis._ty += tx2 * b1 + ty2 * d1;\n\t\t\tif (!_dontNotify)\n\t\t\t\tthis._changed();\n\t\t}\n\t\treturn this;\n\t},\n\n\tprepend: function(mx, _dontNotify) {\n\t\tif (mx) {\n\t\t\tvar a1 = this._a,\n\t\t\t\tb1 = this._b,\n\t\t\t\tc1 = this._c,\n\t\t\t\td1 = this._d,\n\t\t\t\ttx1 = this._tx,\n\t\t\t\tty1 = this._ty,\n\t\t\t\ta2 = mx._a,\n\t\t\t\tb2 = mx._c,\n\t\t\t\tc2 = mx._b,\n\t\t\t\td2 = mx._d,\n\t\t\t\ttx2 = mx._tx,\n\t\t\t\tty2 = mx._ty;\n\t\t\tthis._a = a2 * a1 + b2 * b1;\n\t\t\tthis._c = a2 * c1 + b2 * d1;\n\t\t\tthis._b = c2 * a1 + d2 * b1;\n\t\t\tthis._d = c2 * c1 + d2 * d1;\n\t\t\tthis._tx = a2 * tx1 + b2 * ty1 + tx2;\n\t\t\tthis._ty = c2 * tx1 + d2 * ty1 + ty2;\n\t\t\tif (!_dontNotify)\n\t\t\t\tthis._changed();\n\t\t}\n\t\treturn this;\n\t},\n\n\tappended: function(mx) {\n\t\treturn this.clone().append(mx);\n\t},\n\n\tprepended: function(mx) {\n\t\treturn this.clone().prepend(mx);\n\t},\n\n\tinvert: function() {\n\t\tvar a = this._a,\n\t\t\tb = this._b,\n\t\t\tc = this._c,\n\t\t\td = this._d,\n\t\t\ttx = this._tx,\n\t\t\tty = this._ty,\n\t\t\tdet = a * d - b * c,\n\t\t\tres = null;\n\t\tif (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {\n\t\t\tthis._a = d / det;\n\t\t\tthis._b = -b / det;\n\t\t\tthis._c = -c / det;\n\t\t\tthis._d = a / det;\n\t\t\tthis._tx = (c * ty - d * tx) / det;\n\t\t\tthis._ty = (b * tx - a * ty) / det;\n\t\t\tres = this;\n\t\t}\n\t\treturn res;\n\t},\n\n\tinverted: function() {\n\t\treturn this.clone().invert();\n\t},\n\n\tconcatenate: '#append',\n\tpreConcatenate: '#prepend',\n\tchain: '#appended',\n\n\t_shiftless: function() {\n\t\treturn new Matrix(this._a, this._b, this._c, this._d, 0, 0);\n\t},\n\n\t_orNullIfIdentity: function() {\n\t\treturn this.isIdentity() ? null : this;\n\t},\n\n\tisIdentity: function() {\n\t\treturn this._a === 1 && this._b === 0 && this._c === 0 && this._d === 1\n\t\t\t\t&& this._tx === 0 && this._ty === 0;\n\t},\n\n\tisInvertible: function() {\n\t\tvar det = this._a * this._d - this._c * this._b;\n\t\treturn det && !isNaN(det) && isFinite(this._tx) && isFinite(this._ty);\n\t},\n\n\tisSingular: function() {\n\t\treturn !this.isInvertible();\n\t},\n\n\ttransform: function( src, dst, count) {\n\t\treturn arguments.length < 3\n\t\t\t? this._transformPoint(Point.read(arguments))\n\t\t\t: this._transformCoordinates(src, dst, count);\n\t},\n\n\t_transformPoint: function(point, dest, _dontNotify) {\n\t\tvar x = point.x,\n\t\t\ty = point.y;\n\t\tif (!dest)\n\t\t\tdest = new Point();\n\t\treturn dest._set(\n\t\t\t\tx * this._a + y * this._c + this._tx,\n\t\t\t\tx * this._b + y * this._d + this._ty,\n\t\t\t\t_dontNotify);\n\t},\n\n\t_transformCoordinates: function(src, dst, count) {\n\t\tfor (var i = 0, max = 2 * count; i < max; i += 2) {\n\t\t\tvar x = src[i],\n\t\t\t\ty = src[i + 1];\n\t\t\tdst[i] = x * this._a + y * this._c + this._tx;\n\t\t\tdst[i + 1] = x * this._b + y * this._d + this._ty;\n\t\t}\n\t\treturn dst;\n\t},\n\n\t_transformCorners: function(rect) {\n\t\tvar x1 = rect.x,\n\t\t\ty1 = rect.y,\n\t\t\tx2 = x1 + rect.width,\n\t\t\ty2 = y1 + rect.height,\n\t\t\tcoords = [ x1, y1, x2, y1, x2, y2, x1, y2 ];\n\t\treturn this._transformCoordinates(coords, coords, 4);\n\t},\n\n\t_transformBounds: function(bounds, dest, _dontNotify) {\n\t\tvar coords = this._transformCorners(bounds),\n\t\t\tmin = coords.slice(0, 2),\n\t\t\tmax = min.slice();\n\t\tfor (var i = 2; i < 8; i++) {\n\t\t\tvar val = coords[i],\n\t\t\t\tj = i & 1;\n\t\t\tif (val < min[j]) {\n\t\t\t\tmin[j] = val;\n\t\t\t} else if (val > max[j]) {\n\t\t\t\tmax[j] = val;\n\t\t\t}\n\t\t}\n\t\tif (!dest)\n\t\t\tdest = new Rectangle();\n\t\treturn dest._set(min[0], min[1], max[0] - min[0], max[1] - min[1],\n\t\t\t\t_dontNotify);\n\t},\n\n\tinverseTransform: function() {\n\t\treturn this._inverseTransform(Point.read(arguments));\n\t},\n\n\t_inverseTransform: function(point, dest, _dontNotify) {\n\t\tvar a = this._a,\n\t\t\tb = this._b,\n\t\t\tc = this._c,\n\t\t\td = this._d,\n\t\t\ttx = this._tx,\n\t\t\tty = this._ty,\n\t\t\tdet = a * d - b * c,\n\t\t\tres = null;\n\t\tif (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {\n\t\t\tvar x = point.x - this._tx,\n\t\t\t\ty = point.y - this._ty;\n\t\t\tif (!dest)\n\t\t\t\tdest = new Point();\n\t\t\tres = dest._set(\n\t\t\t\t\t(x * d - y * c) / det,\n\t\t\t\t\t(y * a - x * b) / det,\n\t\t\t\t\t_dontNotify);\n\t\t}\n\t\treturn res;\n\t},\n\n\tdecompose: function() {\n\t\tvar a = this._a,\n\t\t\tb = this._b,\n\t\t\tc = this._c,\n\t\t\td = this._d,\n\t\t\tdet = a * d - b * c,\n\t\t\tsqrt = Math.sqrt,\n\t\t\tatan2 = Math.atan2,\n\t\t\tdegrees = 180 / Math.PI,\n\t\t\trotate,\n\t\t\tscale,\n\t\t\tskew;\n\t\tif (a !== 0 || b !== 0) {\n\t\t\tvar r = sqrt(a * a + b * b);\n\t\t\trotate = Math.acos(a / r) * (b > 0 ? 1 : -1);\n\t\t\tscale = [r, det / r];\n\t\t\tskew = [atan2(a * c + b * d, r * r), 0];\n\t\t} else if (c !== 0 || d !== 0) {\n\t\t\tvar s = sqrt(c * c + d * d);\n\t\t\trotate = Math.asin(c / s)  * (d > 0 ? 1 : -1);\n\t\t\tscale = [det / s, s];\n\t\t\tskew = [0, atan2(a * c + b * d, s * s)];\n\t\t} else {\n\t\t\trotate = 0;\n\t\t\tskew = scale = [0, 0];\n\t\t}\n\t\treturn {\n\t\t\ttranslation: this.getTranslation(),\n\t\t\trotation: rotate * degrees,\n\t\t\tscaling: new Point(scale),\n\t\t\tskewing: new Point(skew[0] * degrees, skew[1] * degrees)\n\t\t};\n\t},\n\n\tgetValues: function() {\n\t\treturn [ this._a, this._b, this._c, this._d, this._tx, this._ty ];\n\t},\n\n\tgetTranslation: function() {\n\t\treturn new Point(this._tx, this._ty);\n\t},\n\n\tgetScaling: function() {\n\t\treturn (this.decompose() || {}).scaling;\n\t},\n\n\tgetRotation: function() {\n\t\treturn (this.decompose() || {}).rotation;\n\t},\n\n\tapplyToContext: function(ctx) {\n\t\tif (!this.isIdentity()) {\n\t\t\tctx.transform(this._a, this._b, this._c, this._d,\n\t\t\t\t\tthis._tx, this._ty);\n\t\t}\n\t}\n}, Base.each(['a', 'b', 'c', 'd', 'tx', 'ty'], function(key) {\n\tvar part = Base.capitalize(key),\n\t\tprop = '_' + key;\n\tthis['get' + part] = function() {\n\t\treturn this[prop];\n\t};\n\tthis['set' + part] = function(value) {\n\t\tthis[prop] = value;\n\t\tthis._changed();\n\t};\n}, {}));\n\nvar Line = Base.extend({\n\t_class: 'Line',\n\n\tinitialize: function Line(arg0, arg1, arg2, arg3, arg4) {\n\t\tvar asVector = false;\n\t\tif (arguments.length >= 4) {\n\t\t\tthis._px = arg0;\n\t\t\tthis._py = arg1;\n\t\t\tthis._vx = arg2;\n\t\t\tthis._vy = arg3;\n\t\t\tasVector = arg4;\n\t\t} else {\n\t\t\tthis._px = arg0.x;\n\t\t\tthis._py = arg0.y;\n\t\t\tthis._vx = arg1.x;\n\t\t\tthis._vy = arg1.y;\n\t\t\tasVector = arg2;\n\t\t}\n\t\tif (!asVector) {\n\t\t\tthis._vx -= this._px;\n\t\t\tthis._vy -= this._py;\n\t\t}\n\t},\n\n\tgetPoint: function() {\n\t\treturn new Point(this._px, this._py);\n\t},\n\n\tgetVector: function() {\n\t\treturn new Point(this._vx, this._vy);\n\t},\n\n\tgetLength: function() {\n\t\treturn this.getVector().getLength();\n\t},\n\n\tintersect: function(line, isInfinite) {\n\t\treturn Line.intersect(\n\t\t\t\tthis._px, this._py, this._vx, this._vy,\n\t\t\t\tline._px, line._py, line._vx, line._vy,\n\t\t\t\ttrue, isInfinite);\n\t},\n\n\tgetSide: function(point, isInfinite) {\n\t\treturn Line.getSide(\n\t\t\t\tthis._px, this._py, this._vx, this._vy,\n\t\t\t\tpoint.x, point.y, true, isInfinite);\n\t},\n\n\tgetDistance: function(point) {\n\t\treturn Math.abs(this.getSignedDistance(point));\n\t},\n\n\tgetSignedDistance: function(point) {\n\t\treturn Line.getSignedDistance(this._px, this._py, this._vx, this._vy,\n\t\t\t\tpoint.x, point.y, true);\n\t},\n\n\tisCollinear: function(line) {\n\t\treturn Point.isCollinear(this._vx, this._vy, line._vx, line._vy);\n\t},\n\n\tisOrthogonal: function(line) {\n\t\treturn Point.isOrthogonal(this._vx, this._vy, line._vx, line._vy);\n\t},\n\n\tstatics: {\n\t\tintersect: function(p1x, p1y, v1x, v1y, p2x, p2y, v2x, v2y, asVector,\n\t\t\t\tisInfinite) {\n\t\t\tif (!asVector) {\n\t\t\t\tv1x -= p1x;\n\t\t\t\tv1y -= p1y;\n\t\t\t\tv2x -= p2x;\n\t\t\t\tv2y -= p2y;\n\t\t\t}\n\t\t\tvar cross = v1x * v2y - v1y * v2x;\n\t\t\tif (!Numerical.isZero(cross)) {\n\t\t\t\tvar dx = p1x - p2x,\n\t\t\t\t\tdy = p1y - p2y,\n\t\t\t\t\tu1 = (v2x * dy - v2y * dx) / cross,\n\t\t\t\t\tu2 = (v1x * dy - v1y * dx) / cross,\n\t\t\t\t\tepsilon = 1e-12,\n\t\t\t\t\tuMin = -epsilon,\n\t\t\t\t\tuMax = 1 + epsilon;\n\t\t\t\tif (isInfinite\n\t\t\t\t\t\t|| uMin < u1 && u1 < uMax && uMin < u2 && u2 < uMax) {\n\t\t\t\t\tif (!isInfinite) {\n\t\t\t\t\t\tu1 = u1 <= 0 ? 0 : u1 >= 1 ? 1 : u1;\n\t\t\t\t\t}\n\t\t\t\t\treturn new Point(\n\t\t\t\t\t\t\tp1x + u1 * v1x,\n\t\t\t\t\t\t\tp1y + u1 * v1y);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgetSide: function(px, py, vx, vy, x, y, asVector, isInfinite) {\n\t\t\tif (!asVector) {\n\t\t\t\tvx -= px;\n\t\t\t\tvy -= py;\n\t\t\t}\n\t\t\tvar v2x = x - px,\n\t\t\t\tv2y = y - py,\n\t\t\t\tccw = v2x * vy - v2y * vx;\n\t\t\tif (!isInfinite && Numerical.isZero(ccw)) {\n\t\t\t\tccw = (v2x * vx + v2x * vx) / (vx * vx + vy * vy);\n\t\t\t\tif (ccw >= 0 && ccw <= 1)\n\t\t\t\t\tccw = 0;\n\t\t\t}\n\t\t\treturn ccw < 0 ? -1 : ccw > 0 ? 1 : 0;\n\t\t},\n\n\t\tgetSignedDistance: function(px, py, vx, vy, x, y, asVector) {\n\t\t\tif (!asVector) {\n\t\t\t\tvx -= px;\n\t\t\t\tvy -= py;\n\t\t\t}\n\t\t\treturn vx === 0 ? vy > 0 ? x - px : px - x\n\t\t\t\t : vy === 0 ? vx < 0 ? y - py : py - y\n\t\t\t\t : ((x-px) * vy - (y-py) * vx) / Math.sqrt(vx * vx + vy * vy);\n\t\t},\n\n\t\tgetDistance: function(px, py, vx, vy, x, y, asVector) {\n\t\t\treturn Math.abs(\n\t\t\t\t\tLine.getSignedDistance(px, py, vx, vy, x, y, asVector));\n\t\t}\n\t}\n});\n\nvar Project = PaperScopeItem.extend({\n\t_class: 'Project',\n\t_list: 'projects',\n\t_reference: 'project',\n\t_compactSerialize: true,\n\n\tinitialize: function Project(element) {\n\t\tPaperScopeItem.call(this, true);\n\t\tthis._children = [];\n\t\tthis._namedChildren = {};\n\t\tthis._activeLayer = null;\n\t\tthis._currentStyle = new Style(null, null, this);\n\t\tthis._view = View.create(this,\n\t\t\t\telement || CanvasProvider.getCanvas(1, 1));\n\t\tthis._selectionItems = {};\n\t\tthis._selectionCount = 0;\n\t\tthis._updateVersion = 0;\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn Base.serialize(this._children, options, true, dictionary);\n\t},\n\n\t_changed: function(flags, item) {\n\t\tif (flags & 1) {\n\t\t\tvar view = this._view;\n\t\t\tif (view) {\n\t\t\t\tview._needsUpdate = true;\n\t\t\t\tif (!view._requested && view._autoUpdate)\n\t\t\t\t\tview.requestUpdate();\n\t\t\t}\n\t\t}\n\t\tvar changes = this._changes;\n\t\tif (changes && item) {\n\t\t\tvar changesById = this._changesById,\n\t\t\t\tid = item._id,\n\t\t\t\tentry = changesById[id];\n\t\t\tif (entry) {\n\t\t\t\tentry.flags |= flags;\n\t\t\t} else {\n\t\t\t\tchanges.push(changesById[id] = { item: item, flags: flags });\n\t\t\t}\n\t\t}\n\t},\n\n\tclear: function() {\n\t\tvar children = this._children;\n\t\tfor (var i = children.length - 1; i >= 0; i--)\n\t\t\tchildren[i].remove();\n\t},\n\n\tisEmpty: function() {\n\t\treturn !this._children.length;\n\t},\n\n\tremove: function remove() {\n\t\tif (!remove.base.call(this))\n\t\t\treturn false;\n\t\tif (this._view)\n\t\t\tthis._view.remove();\n\t\treturn true;\n\t},\n\n\tgetView: function() {\n\t\treturn this._view;\n\t},\n\n\tgetCurrentStyle: function() {\n\t\treturn this._currentStyle;\n\t},\n\n\tsetCurrentStyle: function(style) {\n\t\tthis._currentStyle.set(style);\n\t},\n\n\tgetIndex: function() {\n\t\treturn this._index;\n\t},\n\n\tgetOptions: function() {\n\t\treturn this._scope.settings;\n\t},\n\n\tgetLayers: function() {\n\t\treturn this._children;\n\t},\n\n\tgetActiveLayer: function() {\n\t\treturn this._activeLayer || new Layer({ project: this, insert: true });\n\t},\n\n\tgetSymbolDefinitions: function() {\n\t\tvar definitions = [],\n\t\t\tids = {};\n\t\tthis.getItems({\n\t\t\tclass: SymbolItem,\n\t\t\tmatch: function(item) {\n\t\t\t\tvar definition = item._definition,\n\t\t\t\t\tid = definition._id;\n\t\t\t\tif (!ids[id]) {\n\t\t\t\t\tids[id] = true;\n\t\t\t\t\tdefinitions.push(definition);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t\treturn definitions;\n\t},\n\n\tgetSymbols: 'getSymbolDefinitions',\n\n\tgetSelectedItems: function() {\n\t\tvar selectionItems = this._selectionItems,\n\t\t\titems = [];\n\t\tfor (var id in selectionItems) {\n\t\t\tvar item = selectionItems[id],\n\t\t\t\tselection = item._selection;\n\t\t\tif ((selection & 1) && item.isInserted()) {\n\t\t\t\titems.push(item);\n\t\t\t} else if (!selection) {\n\t\t\t\tthis._updateSelection(item);\n\t\t\t}\n\t\t}\n\t\treturn items;\n\t},\n\n\t_updateSelection: function(item) {\n\t\tvar id = item._id,\n\t\t\tselectionItems = this._selectionItems;\n\t\tif (item._selection) {\n\t\t\tif (selectionItems[id] !== item) {\n\t\t\t\tthis._selectionCount++;\n\t\t\t\tselectionItems[id] = item;\n\t\t\t}\n\t\t} else if (selectionItems[id] === item) {\n\t\t\tthis._selectionCount--;\n\t\t\tdelete selectionItems[id];\n\t\t}\n\t},\n\n\tselectAll: function() {\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tchildren[i].setFullySelected(true);\n\t},\n\n\tdeselectAll: function() {\n\t\tvar selectionItems = this._selectionItems;\n\t\tfor (var i in selectionItems)\n\t\t\tselectionItems[i].setFullySelected(false);\n\t},\n\n\taddLayer: function(layer) {\n\t\treturn this.insertLayer(undefined, layer);\n\t},\n\n\tinsertLayer: function(index, layer) {\n\t\tif (layer instanceof Layer) {\n\t\t\tlayer._remove(false, true);\n\t\t\tBase.splice(this._children, [layer], index, 0);\n\t\t\tlayer._setProject(this, true);\n\t\t\tvar name = layer._name;\n\t\t\tif (name)\n\t\t\t\tlayer.setName(name);\n\t\t\tif (this._changes)\n\t\t\t\tlayer._changed(5);\n\t\t\tif (!this._activeLayer)\n\t\t\t\tthis._activeLayer = layer;\n\t\t} else {\n\t\t\tlayer = null;\n\t\t}\n\t\treturn layer;\n\t},\n\n\t_insertItem: function(index, item, _created) {\n\t\titem = this.insertLayer(index, item)\n\t\t\t\t|| (this._activeLayer || this._insertItem(undefined,\n\t\t\t\t\t\tnew Layer(Item.NO_INSERT), true))\n\t\t\t\t\t\t.insertChild(index, item);\n\t\tif (_created && item.activate)\n\t\t\titem.activate();\n\t\treturn item;\n\t},\n\n\tgetItems: function(options) {\n\t\treturn Item._getItems(this, options);\n\t},\n\n\tgetItem: function(options) {\n\t\treturn Item._getItems(this, options, null, null, true)[0] || null;\n\t},\n\n\timportJSON: function(json) {\n\t\tthis.activate();\n\t\tvar layer = this._activeLayer;\n\t\treturn Base.importJSON(json, layer && layer.isEmpty() && layer);\n\t},\n\n\tremoveOn: function(type) {\n\t\tvar sets = this._removeSets;\n\t\tif (sets) {\n\t\t\tif (type === 'mouseup')\n\t\t\t\tsets.mousedrag = null;\n\t\t\tvar set = sets[type];\n\t\t\tif (set) {\n\t\t\t\tfor (var id in set) {\n\t\t\t\t\tvar item = set[id];\n\t\t\t\t\tfor (var key in sets) {\n\t\t\t\t\t\tvar other = sets[key];\n\t\t\t\t\t\tif (other && other != set)\n\t\t\t\t\t\t\tdelete other[item._id];\n\t\t\t\t\t}\n\t\t\t\t\titem.remove();\n\t\t\t\t}\n\t\t\t\tsets[type] = null;\n\t\t\t}\n\t\t}\n\t},\n\n\tdraw: function(ctx, matrix, pixelRatio) {\n\t\tthis._updateVersion++;\n\t\tctx.save();\n\t\tmatrix.applyToContext(ctx);\n\t\tvar children = this._children,\n\t\t\tparam = new Base({\n\t\t\t\toffset: new Point(0, 0),\n\t\t\t\tpixelRatio: pixelRatio,\n\t\t\t\tviewMatrix: matrix.isIdentity() ? null : matrix,\n\t\t\t\tmatrices: [new Matrix()],\n\t\t\t\tupdateMatrix: true\n\t\t\t});\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tchildren[i].draw(ctx, param);\n\t\t}\n\t\tctx.restore();\n\n\t\tif (this._selectionCount > 0) {\n\t\t\tctx.save();\n\t\t\tctx.strokeWidth = 1;\n\t\t\tvar items = this._selectionItems,\n\t\t\t\tsize = this._scope.settings.handleSize,\n\t\t\t\tversion = this._updateVersion;\n\t\t\tfor (var id in items) {\n\t\t\t\titems[id]._drawSelection(ctx, matrix, size, items, version);\n\t\t\t}\n\t\t\tctx.restore();\n\t\t}\n\t}\n});\n\nvar Item = Base.extend(Emitter, {\n\tstatics: {\n\t\textend: function extend(src) {\n\t\t\tif (src._serializeFields)\n\t\t\t\tsrc._serializeFields = Base.set({},\n\t\t\t\t\tthis.prototype._serializeFields, src._serializeFields);\n\t\t\treturn extend.base.apply(this, arguments);\n\t\t},\n\n\t\tNO_INSERT: { insert: false }\n\t},\n\n\t_class: 'Item',\n\t_name: null,\n\t_applyMatrix: true,\n\t_canApplyMatrix: true,\n\t_canScaleStroke: false,\n\t_pivot: null,\n\t_visible: true,\n\t_blendMode: 'normal',\n\t_opacity: 1,\n\t_locked: false,\n\t_guide: false,\n\t_clipMask: false,\n\t_selection: 0,\n\t_selectBounds: true,\n\t_selectChildren: false,\n\t_serializeFields: {\n\t\tname: null,\n\t\tapplyMatrix: null,\n\t\tmatrix: new Matrix(),\n\t\tpivot: null,\n\t\tvisible: true,\n\t\tblendMode: 'normal',\n\t\topacity: 1,\n\t\tlocked: false,\n\t\tguide: false,\n\t\tclipMask: false,\n\t\tselected: false,\n\t\tdata: {}\n\t},\n\t_prioritize: ['applyMatrix']\n},\nnew function() {\n\tvar handlers = ['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onClick',\n\t\t\t'onDoubleClick', 'onMouseMove', 'onMouseEnter', 'onMouseLeave'];\n\treturn Base.each(handlers,\n\t\tfunction(name) {\n\t\t\tthis._events[name] = {\n\t\t\t\tinstall: function(type) {\n\t\t\t\t\tthis.getView()._countItemEvent(type, 1);\n\t\t\t\t},\n\n\t\t\t\tuninstall: function(type) {\n\t\t\t\t\tthis.getView()._countItemEvent(type, -1);\n\t\t\t\t}\n\t\t\t};\n\t\t}, {\n\t\t\t_events: {\n\t\t\t\tonFrame: {\n\t\t\t\t\tinstall: function() {\n\t\t\t\t\t\tthis.getView()._animateItem(this, true);\n\t\t\t\t\t},\n\n\t\t\t\t\tuninstall: function() {\n\t\t\t\t\t\tthis.getView()._animateItem(this, false);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tonLoad: {},\n\t\t\t\tonError: {}\n\t\t\t},\n\t\t\tstatics: {\n\t\t\t\t_itemHandlers: handlers\n\t\t\t}\n\t\t}\n\t);\n}, {\n\tinitialize: function Item() {\n\t},\n\n\t_initialize: function(props, point) {\n\t\tvar hasProps = props && Base.isPlainObject(props),\n\t\t\tinternal = hasProps && props.internal === true,\n\t\t\tmatrix = this._matrix = new Matrix(),\n\t\t\tproject = hasProps && props.project || paper.project,\n\t\t\tsettings = paper.settings;\n\t\tthis._id = internal ? null : UID.get();\n\t\tthis._parent = this._index = null;\n\t\tthis._applyMatrix = this._canApplyMatrix && settings.applyMatrix;\n\t\tif (point)\n\t\t\tmatrix.translate(point);\n\t\tmatrix._owner = this;\n\t\tthis._style = new Style(project._currentStyle, this, project);\n\t\tif (internal || hasProps && props.insert == false\n\t\t\t|| !settings.insertItems && !(hasProps && props.insert === true)) {\n\t\t\tthis._setProject(project);\n\t\t} else {\n\t\t\t(hasProps && props.parent || project)\n\t\t\t\t\t._insertItem(undefined, this, true);\n\t\t}\n\t\tif (hasProps && props !== Item.NO_INSERT) {\n\t\t\tthis.set(props, {\n\t\t\t\tinternal: true, insert: true, project: true, parent: true\n\t\t\t});\n\t\t}\n\t\treturn hasProps;\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\tvar props = {},\n\t\t\tthat = this;\n\n\t\tfunction serialize(fields) {\n\t\t\tfor (var key in fields) {\n\t\t\t\tvar value = that[key];\n\t\t\t\tif (!Base.equals(value, key === 'leading'\n\t\t\t\t\t\t? fields.fontSize * 1.2 : fields[key])) {\n\t\t\t\t\tprops[key] = Base.serialize(value, options,\n\t\t\t\t\t\t\tkey !== 'data', dictionary);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tserialize(this._serializeFields);\n\t\tif (!(this instanceof Group))\n\t\t\tserialize(this._style._defaults);\n\t\treturn [ this._class, props ];\n\t},\n\n\t_changed: function(flags) {\n\t\tvar symbol = this._symbol,\n\t\t\tcacheParent = this._parent || symbol,\n\t\t\tproject = this._project;\n\t\tif (flags & 8) {\n\t\t\tthis._bounds = this._position = this._decomposed =\n\t\t\t\t\tthis._globalMatrix = undefined;\n\t\t}\n\t\tif (cacheParent\n\t\t\t\t&& (flags & 40)) {\n\t\t\tItem._clearBoundsCache(cacheParent);\n\t\t}\n\t\tif (flags & 2) {\n\t\t\tItem._clearBoundsCache(this);\n\t\t}\n\t\tif (project)\n\t\t\tproject._changed(flags, this);\n\t\tif (symbol)\n\t\t\tsymbol._changed(flags);\n\t},\n\n\tgetId: function() {\n\t\treturn this._id;\n\t},\n\n\tgetName: function() {\n\t\treturn this._name;\n\t},\n\n\tsetName: function(name) {\n\n\t\tif (this._name)\n\t\t\tthis._removeNamed();\n\t\tif (name === (+name) + '')\n\t\t\tthrow new Error(\n\t\t\t\t\t'Names consisting only of numbers are not supported.');\n\t\tvar owner = this._getOwner();\n\t\tif (name && owner) {\n\t\t\tvar children = owner._children,\n\t\t\t\tnamedChildren = owner._namedChildren;\n\t\t\t(namedChildren[name] = namedChildren[name] || []).push(this);\n\t\t\tif (!(name in children))\n\t\t\t\tchildren[name] = this;\n\t\t}\n\t\tthis._name = name || undefined;\n\t\tthis._changed(128);\n\t},\n\n\tgetStyle: function() {\n\t\treturn this._style;\n\t},\n\n\tsetStyle: function(style) {\n\t\tthis.getStyle().set(style);\n\t}\n}, Base.each(['locked', 'visible', 'blendMode', 'opacity', 'guide'],\n\tfunction(name) {\n\t\tvar part = Base.capitalize(name),\n\t\t\tkey = '_' + name,\n\t\t\tflags = {\n\t\t\t\tlocked: 128,\n\t\t\t\tvisible: 137\n\t\t\t};\n\t\tthis['get' + part] = function() {\n\t\t\treturn this[key];\n\t\t};\n\t\tthis['set' + part] = function(value) {\n\t\t\tif (value != this[key]) {\n\t\t\t\tthis[key] = value;\n\t\t\t\tthis._changed(flags[name] || 129);\n\t\t\t}\n\t\t};\n\t},\n{}), {\n\tbeans: true,\n\n\tgetSelection: function() {\n\t\treturn this._selection;\n\t},\n\n\tsetSelection: function(selection) {\n\t\tif (selection !== this._selection) {\n\t\t\tthis._selection = selection;\n\t\t\tvar project = this._project;\n\t\t\tif (project) {\n\t\t\t\tproject._updateSelection(this);\n\t\t\t\tthis._changed(129);\n\t\t\t}\n\t\t}\n\t},\n\n\t_changeSelection: function(flag, selected) {\n\t\tvar selection = this._selection;\n\t\tthis.setSelection(selected ? selection | flag : selection & ~flag);\n\t},\n\n\tisSelected: function() {\n\t\tif (this._selectChildren) {\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tif (children[i].isSelected())\n\t\t\t\t\treturn true;\n\t\t}\n\t\treturn !!(this._selection & 1);\n\t},\n\n\tsetSelected: function(selected) {\n\t\tif (this._selectChildren) {\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tchildren[i].setSelected(selected);\n\t\t}\n\t\tthis._changeSelection(1, selected);\n\t},\n\n\tisFullySelected: function() {\n\t\tvar children = this._children,\n\t\t\tselected = !!(this._selection & 1);\n\t\tif (children && selected) {\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tif (!children[i].isFullySelected())\n\t\t\t\t\treturn false;\n\t\t\treturn true;\n\t\t}\n\t\treturn selected;\n\t},\n\n\tsetFullySelected: function(selected) {\n\t\tvar children = this._children;\n\t\tif (children) {\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tchildren[i].setFullySelected(selected);\n\t\t}\n\t\tthis._changeSelection(1, selected);\n\t},\n\n\tisClipMask: function() {\n\t\treturn this._clipMask;\n\t},\n\n\tsetClipMask: function(clipMask) {\n\t\tif (this._clipMask != (clipMask = !!clipMask)) {\n\t\t\tthis._clipMask = clipMask;\n\t\t\tif (clipMask) {\n\t\t\t\tthis.setFillColor(null);\n\t\t\t\tthis.setStrokeColor(null);\n\t\t\t}\n\t\t\tthis._changed(129);\n\t\t\tif (this._parent)\n\t\t\t\tthis._parent._changed(1024);\n\t\t}\n\t},\n\n\tgetData: function() {\n\t\tif (!this._data)\n\t\t\tthis._data = {};\n\t\treturn this._data;\n\t},\n\n\tsetData: function(data) {\n\t\tthis._data = data;\n\t},\n\n\tgetPosition: function(_dontLink) {\n\t\tvar position = this._position,\n\t\t\tctor = _dontLink ? Point : LinkedPoint;\n\t\tif (!position) {\n\t\t\tvar pivot = this._pivot;\n\t\t\tposition = this._position = pivot\n\t\t\t\t\t? this._matrix._transformPoint(pivot)\n\t\t\t\t\t: this.getBounds().getCenter(true);\n\t\t}\n\t\treturn new ctor(position.x, position.y, this, 'setPosition');\n\t},\n\n\tsetPosition: function() {\n\t\tthis.translate(Point.read(arguments).subtract(this.getPosition(true)));\n\t},\n\n\tgetPivot: function() {\n\t\tvar pivot = this._pivot;\n\t\treturn pivot\n\t\t\t\t? new LinkedPoint(pivot.x, pivot.y, this, 'setPivot')\n\t\t\t\t: null;\n\t},\n\n\tsetPivot: function() {\n\t\tthis._pivot = Point.read(arguments, 0, { clone: true, readNull: true });\n\t\tthis._position = undefined;\n\t}\n}, Base.each({\n\t\tgetStrokeBounds: { stroke: true },\n\t\tgetHandleBounds: { handle: true },\n\t\tgetInternalBounds: { internal: true }\n\t},\n\tfunction(options, key) {\n\t\tthis[key] = function(matrix) {\n\t\t\treturn this.getBounds(matrix, options);\n\t\t};\n\t},\n{\n\tbeans: true,\n\n\tgetBounds: function(matrix, options) {\n\t\tvar hasMatrix = options || matrix instanceof Matrix,\n\t\t\topts = Base.set({}, hasMatrix ? options : matrix,\n\t\t\t\t\tthis._boundsOptions);\n\t\tif (!opts.stroke || this.getStrokeScaling())\n\t\t\topts.cacheItem = this;\n\t\tvar rect = this._getCachedBounds(hasMatrix && matrix, opts).rect;\n\t\treturn !arguments.length\n\t\t\t\t? new LinkedRectangle(rect.x, rect.y, rect.width, rect.height,\n\t\t\t\t\tthis, 'setBounds')\n\t\t\t\t: rect;\n\t},\n\n\tsetBounds: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tbounds = this.getBounds(),\n\t\t\t_matrix = this._matrix,\n\t\t\tmatrix = new Matrix(),\n\t\t\tcenter = rect.getCenter();\n\t\tmatrix.translate(center);\n\t\tif (rect.width != bounds.width || rect.height != bounds.height) {\n\t\t\tif (!_matrix.isInvertible()) {\n\t\t\t\t_matrix.set(_matrix._backup\n\t\t\t\t\t\t|| new Matrix().translate(_matrix.getTranslation()));\n\t\t\t\tbounds = this.getBounds();\n\t\t\t}\n\t\t\tmatrix.scale(\n\t\t\t\t\tbounds.width !== 0 ? rect.width / bounds.width : 0,\n\t\t\t\t\tbounds.height !== 0 ? rect.height / bounds.height : 0);\n\t\t}\n\t\tcenter = bounds.getCenter();\n\t\tmatrix.translate(-center.x, -center.y);\n\t\tthis.transform(matrix);\n\t},\n\n\t_getBounds: function(matrix, options) {\n\t\tvar children = this._children;\n\t\tif (!children || !children.length)\n\t\t\treturn new Rectangle();\n\t\tItem._updateBoundsCache(this, options.cacheItem);\n\t\treturn Item._getBounds(children, matrix, options);\n\t},\n\n\t_getBoundsCacheKey: function(options, internal) {\n\t\treturn [\n\t\t\toptions.stroke ? 1 : 0,\n\t\t\toptions.handle ? 1 : 0,\n\t\t\tinternal ? 1 : 0\n\t\t].join('');\n\t},\n\n\t_getCachedBounds: function(matrix, options, noInternal) {\n\t\tmatrix = matrix && matrix._orNullIfIdentity();\n\t\tvar internal = options.internal && !noInternal,\n\t\t\tcacheItem = options.cacheItem,\n\t\t\t_matrix = internal ? null : this._matrix._orNullIfIdentity(),\n\t\t\tcacheKey = cacheItem && (!matrix || matrix.equals(_matrix))\n\t\t\t\t&& this._getBoundsCacheKey(options, internal),\n\t\t\tbounds = this._bounds;\n\t\tItem._updateBoundsCache(this._parent || this._symbol, cacheItem);\n\t\tif (cacheKey && bounds && cacheKey in bounds) {\n\t\t\tvar cached = bounds[cacheKey];\n\t\t\treturn {\n\t\t\t\trect: cached.rect.clone(),\n\t\t\t\tnonscaling: cached.nonscaling\n\t\t\t};\n\t\t}\n\t\tvar res = this._getBounds(matrix || _matrix, options),\n\t\t\trect = res.rect || res,\n\t\t\tstyle = this._style,\n\t\t\tnonscaling = res.nonscaling || style.hasStroke()\n\t\t\t\t&& !style.getStrokeScaling();\n\t\tif (cacheKey) {\n\t\t\tif (!bounds) {\n\t\t\t\tthis._bounds = bounds = {};\n\t\t\t}\n\t\t\tvar cached = bounds[cacheKey] = {\n\t\t\t\trect: rect.clone(),\n\t\t\t\tnonscaling: nonscaling,\n\t\t\t\tinternal: internal\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\trect: rect,\n\t\t\tnonscaling: nonscaling\n\t\t};\n\t},\n\n\t_getStrokeMatrix: function(matrix, options) {\n\t\tvar parent = this.getStrokeScaling() ? null\n\t\t\t\t: options && options.internal ? this\n\t\t\t\t\t: this._parent || this._symbol && this._symbol._item,\n\t\t\tmx = parent ? parent.getViewMatrix().invert() : matrix;\n\t\treturn mx && mx._shiftless();\n\t},\n\n\tstatics: {\n\t\t_updateBoundsCache: function(parent, item) {\n\t\t\tif (parent && item) {\n\t\t\t\tvar id = item._id,\n\t\t\t\t\tref = parent._boundsCache = parent._boundsCache || {\n\t\t\t\t\t\tids: {},\n\t\t\t\t\t\tlist: []\n\t\t\t\t\t};\n\t\t\t\tif (!ref.ids[id]) {\n\t\t\t\t\tref.list.push(item);\n\t\t\t\t\tref.ids[id] = item;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_clearBoundsCache: function(item) {\n\t\t\tvar cache = item._boundsCache;\n\t\t\tif (cache) {\n\t\t\t\titem._bounds = item._position = item._boundsCache = undefined;\n\t\t\t\tfor (var i = 0, list = cache.list, l = list.length; i < l; i++){\n\t\t\t\t\tvar other = list[i];\n\t\t\t\t\tif (other !== item) {\n\t\t\t\t\t\tother._bounds = other._position = undefined;\n\t\t\t\t\t\tif (other._boundsCache)\n\t\t\t\t\t\t\tItem._clearBoundsCache(other);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_getBounds: function(items, matrix, options) {\n\t\t\tvar x1 = Infinity,\n\t\t\t\tx2 = -x1,\n\t\t\t\ty1 = x1,\n\t\t\t\ty2 = x2,\n\t\t\t\tnonscaling = false;\n\t\t\toptions = options || {};\n\t\t\tfor (var i = 0, l = items.length; i < l; i++) {\n\t\t\t\tvar item = items[i];\n\t\t\t\tif (item._visible && !item.isEmpty()) {\n\t\t\t\t\tvar bounds = item._getCachedBounds(\n\t\t\t\t\t\tmatrix && matrix.appended(item._matrix), options, true),\n\t\t\t\t\t\trect = bounds.rect;\n\t\t\t\t\tx1 = Math.min(rect.x, x1);\n\t\t\t\t\ty1 = Math.min(rect.y, y1);\n\t\t\t\t\tx2 = Math.max(rect.x + rect.width, x2);\n\t\t\t\t\ty2 = Math.max(rect.y + rect.height, y2);\n\t\t\t\t\tif (bounds.nonscaling)\n\t\t\t\t\t\tnonscaling = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\trect: isFinite(x1)\n\t\t\t\t\t? new Rectangle(x1, y1, x2 - x1, y2 - y1)\n\t\t\t\t\t: new Rectangle(),\n\t\t\t\tnonscaling: nonscaling\n\t\t\t};\n\t\t}\n\t}\n\n}), {\n\tbeans: true,\n\n\t_decompose: function() {\n\t\treturn this._applyMatrix\n\t\t\t? null\n\t\t\t: this._decomposed || (this._decomposed = this._matrix.decompose());\n\t},\n\n\tgetRotation: function() {\n\t\tvar decomposed = this._decompose();\n\t\treturn decomposed ? decomposed.rotation : 0;\n\t},\n\n\tsetRotation: function(rotation) {\n\t\tvar current = this.getRotation();\n\t\tif (current != null && rotation != null) {\n\t\t\tvar decomposed = this._decomposed;\n\t\t\tthis.rotate(rotation - current);\n\t\t\tif (decomposed) {\n\t\t\t\tdecomposed.rotation = rotation;\n\t\t\t\tthis._decomposed = decomposed;\n\t\t\t}\n\t\t}\n\t},\n\n\tgetScaling: function() {\n\t\tvar decomposed = this._decompose(),\n\t\t\ts = decomposed && decomposed.scaling;\n\t\treturn new LinkedPoint(s ? s.x : 1, s ? s.y : 1, this, 'setScaling');\n\t},\n\n\tsetScaling: function() {\n\t\tvar current = this.getScaling(),\n\t\t\tscaling = Point.read(arguments, 0, { clone: true, readNull: true });\n\t\tif (current && scaling && !current.equals(scaling)) {\n\t\t\tvar rotation = this.getRotation(),\n\t\t\t\tdecomposed = this._decomposed,\n\t\t\t\tmatrix = new Matrix(),\n\t\t\t\tcenter = this.getPosition(true);\n\t\t\tmatrix.translate(center);\n\t\t\tif (rotation)\n\t\t\t\tmatrix.rotate(rotation);\n\t\t\tmatrix.scale(scaling.x / current.x, scaling.y / current.y);\n\t\t\tif (rotation)\n\t\t\t\tmatrix.rotate(-rotation);\n\t\t\tmatrix.translate(center.negate());\n\t\t\tthis.transform(matrix);\n\t\t\tif (decomposed) {\n\t\t\t\tdecomposed.scaling = scaling;\n\t\t\t\tthis._decomposed = decomposed;\n\t\t\t}\n\t\t}\n\t},\n\n\tgetMatrix: function() {\n\t\treturn this._matrix;\n\t},\n\n\tsetMatrix: function() {\n\t\tvar matrix = this._matrix;\n\t\tmatrix.initialize.apply(matrix, arguments);\n\t},\n\n\tgetGlobalMatrix: function(_dontClone) {\n\t\tvar matrix = this._globalMatrix,\n\t\t\tupdateVersion = this._project._updateVersion;\n\t\tif (matrix && matrix._updateVersion !== updateVersion)\n\t\t\tmatrix = null;\n\t\tif (!matrix) {\n\t\t\tmatrix = this._globalMatrix = this._matrix.clone();\n\t\t\tvar parent = this._parent;\n\t\t\tif (parent)\n\t\t\t\tmatrix.prepend(parent.getGlobalMatrix(true));\n\t\t\tmatrix._updateVersion = updateVersion;\n\t\t}\n\t\treturn _dontClone ? matrix : matrix.clone();\n\t},\n\n\tgetViewMatrix: function() {\n\t\treturn this.getGlobalMatrix().prepend(this.getView()._matrix);\n\t},\n\n\tgetApplyMatrix: function() {\n\t\treturn this._applyMatrix;\n\t},\n\n\tsetApplyMatrix: function(apply) {\n\t\tif (this._applyMatrix = this._canApplyMatrix && !!apply)\n\t\t\tthis.transform(null, true);\n\t},\n\n\tgetTransformContent: '#getApplyMatrix',\n\tsetTransformContent: '#setApplyMatrix',\n}, {\n\tgetProject: function() {\n\t\treturn this._project;\n\t},\n\n\t_setProject: function(project, installEvents) {\n\t\tif (this._project !== project) {\n\t\t\tif (this._project)\n\t\t\t\tthis._installEvents(false);\n\t\t\tthis._project = project;\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children && children.length; i < l; i++)\n\t\t\t\tchildren[i]._setProject(project);\n\t\t\tinstallEvents = true;\n\t\t}\n\t\tif (installEvents)\n\t\t\tthis._installEvents(true);\n\t},\n\n\tgetView: function() {\n\t\treturn this._project._view;\n\t},\n\n\t_installEvents: function _installEvents(install) {\n\t\t_installEvents.base.call(this, install);\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children && children.length; i < l; i++)\n\t\t\tchildren[i]._installEvents(install);\n\t},\n\n\tgetLayer: function() {\n\t\tvar parent = this;\n\t\twhile (parent = parent._parent) {\n\t\t\tif (parent instanceof Layer)\n\t\t\t\treturn parent;\n\t\t}\n\t\treturn null;\n\t},\n\n\tgetParent: function() {\n\t\treturn this._parent;\n\t},\n\n\tsetParent: function(item) {\n\t\treturn item.addChild(this);\n\t},\n\n\t_getOwner: '#getParent',\n\n\tgetChildren: function() {\n\t\treturn this._children;\n\t},\n\n\tsetChildren: function(items) {\n\t\tthis.removeChildren();\n\t\tthis.addChildren(items);\n\t},\n\n\tgetFirstChild: function() {\n\t\treturn this._children && this._children[0] || null;\n\t},\n\n\tgetLastChild: function() {\n\t\treturn this._children && this._children[this._children.length - 1]\n\t\t\t\t|| null;\n\t},\n\n\tgetNextSibling: function() {\n\t\tvar owner = this._getOwner();\n\t\treturn owner && owner._children[this._index + 1] || null;\n\t},\n\n\tgetPreviousSibling: function() {\n\t\tvar owner = this._getOwner();\n\t\treturn owner && owner._children[this._index - 1] || null;\n\t},\n\n\tgetIndex: function() {\n\t\treturn this._index;\n\t},\n\n\tequals: function(item) {\n\t\treturn item === this || item && this._class === item._class\n\t\t\t\t&& this._style.equals(item._style)\n\t\t\t\t&& this._matrix.equals(item._matrix)\n\t\t\t\t&& this._locked === item._locked\n\t\t\t\t&& this._visible === item._visible\n\t\t\t\t&& this._blendMode === item._blendMode\n\t\t\t\t&& this._opacity === item._opacity\n\t\t\t\t&& this._clipMask === item._clipMask\n\t\t\t\t&& this._guide === item._guide\n\t\t\t\t&& this._equals(item)\n\t\t\t\t|| false;\n\t},\n\n\t_equals: function(item) {\n\t\treturn Base.equals(this._children, item._children);\n\t},\n\n\tclone: function(options) {\n\t\tvar copy = new this.constructor(Item.NO_INSERT),\n\t\t\tchildren = this._children,\n\t\t\tinsert = Base.pick(options ? options.insert : undefined,\n\t\t\t\t\toptions === undefined || options === true),\n\t\t\tdeep = Base.pick(options ? options.deep : undefined, true);\n\t\tif (children)\n\t\t\tcopy.copyAttributes(this);\n\t\tif (!children || deep)\n\t\t\tcopy.copyContent(this);\n\t\tif (!children)\n\t\t\tcopy.copyAttributes(this);\n\t\tif (insert)\n\t\t\tcopy.insertAbove(this);\n\t\tvar name = this._name,\n\t\t\tparent = this._parent;\n\t\tif (name && parent) {\n\t\t\tvar children = parent._children,\n\t\t\t\torig = name,\n\t\t\t\ti = 1;\n\t\t\twhile (children[name])\n\t\t\t\tname = orig + ' ' + (i++);\n\t\t\tif (name !== orig)\n\t\t\t\tcopy.setName(name);\n\t\t}\n\t\treturn copy;\n\t},\n\n\tcopyContent: function(source) {\n\t\tvar children = source._children;\n\t\tfor (var i = 0, l = children && children.length; i < l; i++) {\n\t\t\tthis.addChild(children[i].clone(false), true);\n\t\t}\n\t},\n\n\tcopyAttributes: function(source, excludeMatrix) {\n\t\tthis.setStyle(source._style);\n\t\tvar keys = ['_locked', '_visible', '_blendMode', '_opacity',\n\t\t\t\t'_clipMask', '_guide'];\n\t\tfor (var i = 0, l = keys.length; i < l; i++) {\n\t\t\tvar key = keys[i];\n\t\t\tif (source.hasOwnProperty(key))\n\t\t\t\tthis[key] = source[key];\n\t\t}\n\t\tif (!excludeMatrix)\n\t\t\tthis._matrix.set(source._matrix, true);\n\t\tthis.setApplyMatrix(source._applyMatrix);\n\t\tthis.setPivot(source._pivot);\n\t\tthis.setSelection(source._selection);\n\t\tvar data = source._data,\n\t\t\tname = source._name;\n\t\tthis._data = data ? Base.clone(data) : null;\n\t\tif (name)\n\t\t\tthis.setName(name);\n\t},\n\n\trasterize: function(resolution, insert) {\n\t\tvar bounds = this.getStrokeBounds(),\n\t\t\tscale = (resolution || this.getView().getResolution()) / 72,\n\t\t\ttopLeft = bounds.getTopLeft().floor(),\n\t\t\tbottomRight = bounds.getBottomRight().ceil(),\n\t\t\tsize = new Size(bottomRight.subtract(topLeft)),\n\t\t\traster = new Raster(Item.NO_INSERT);\n\t\tif (!size.isZero()) {\n\t\t\tvar canvas = CanvasProvider.getCanvas(size.multiply(scale)),\n\t\t\t\tctx = canvas.getContext('2d'),\n\t\t\t\tmatrix = new Matrix().scale(scale).translate(topLeft.negate());\n\t\t\tctx.save();\n\t\t\tmatrix.applyToContext(ctx);\n\t\t\tthis.draw(ctx, new Base({ matrices: [matrix] }));\n\t\t\tctx.restore();\n\t\t\traster.setCanvas(canvas);\n\t\t}\n\t\traster.transform(new Matrix().translate(topLeft.add(size.divide(2)))\n\t\t\t\t.scale(1 / scale));\n\t\tif (insert === undefined || insert)\n\t\t\traster.insertAbove(this);\n\t\treturn raster;\n\t},\n\n\tcontains: function() {\n\t\treturn !!this._contains(\n\t\t\t\tthis._matrix._inverseTransform(Point.read(arguments)));\n\t},\n\n\t_contains: function(point) {\n\t\tvar children = this._children;\n\t\tif (children) {\n\t\t\tfor (var i = children.length - 1; i >= 0; i--) {\n\t\t\t\tif (children[i].contains(point))\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn point.isInside(this.getInternalBounds());\n\t},\n\n\tisInside: function() {\n\t\treturn Rectangle.read(arguments).contains(this.getBounds());\n\t},\n\n\t_asPathItem: function() {\n\t\treturn new Path.Rectangle({\n\t\t\trectangle: this.getInternalBounds(),\n\t\t\tmatrix: this._matrix,\n\t\t\tinsert: false,\n\t\t});\n\t},\n\n\tintersects: function(item, _matrix) {\n\t\tif (!(item instanceof Item))\n\t\t\treturn false;\n\t\treturn this._asPathItem().getIntersections(item._asPathItem(), null,\n\t\t\t\t_matrix, true).length > 0;\n\t}\n},\nnew function() {\n\tfunction hitTest() {\n\t\treturn this._hitTest(\n\t\t\t\tPoint.read(arguments),\n\t\t\t\tHitResult.getOptions(arguments));\n\t}\n\n\tfunction hitTestAll() {\n\t\tvar point = Point.read(arguments),\n\t\t\toptions = HitResult.getOptions(arguments),\n\t\t\tall = [];\n\t\tthis._hitTest(point, Base.set({ all: all }, options));\n\t\treturn all;\n\t}\n\n\tfunction hitTestChildren(point, options, viewMatrix, _exclude) {\n\t\tvar children = this._children;\n\t\tif (children) {\n\t\t\tfor (var i = children.length - 1; i >= 0; i--) {\n\t\t\t\tvar child = children[i];\n\t\t\t\tvar res = child !== _exclude && child._hitTest(point, options,\n\t\t\t\t\t\tviewMatrix);\n\t\t\t\tif (res && !options.all)\n\t\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tProject.inject({\n\t\thitTest: hitTest,\n\t\thitTestAll: hitTestAll,\n\t\t_hitTest: hitTestChildren\n\t});\n\n\treturn {\n\t\thitTest: hitTest,\n\t\thitTestAll: hitTestAll,\n\t\t_hitTestChildren: hitTestChildren,\n\t};\n}, {\n\n\t_hitTest: function(point, options, parentViewMatrix) {\n\t\tif (this._locked || !this._visible || this._guide && !options.guides\n\t\t\t\t|| this.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar matrix = this._matrix,\n\t\t\tviewMatrix = parentViewMatrix\n\t\t\t\t\t? parentViewMatrix.appended(matrix)\n\t\t\t\t\t: this.getGlobalMatrix().prepend(this.getView()._matrix),\n\t\t\ttolerance = Math.max(options.tolerance, 1e-12),\n\t\t\ttolerancePadding = options._tolerancePadding = new Size(\n\t\t\t\t\tPath._getStrokePadding(tolerance,\n\t\t\t\t\t\tmatrix._shiftless().invert()));\n\t\tpoint = matrix._inverseTransform(point);\n\t\tif (!point || !this._children &&\n\t\t\t!this.getBounds({ internal: true, stroke: true, handle: true })\n\t\t\t\t.expand(tolerancePadding.multiply(2))._containsPoint(point)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar checkSelf = !(options.guides && !this._guide\n\t\t\t\t|| options.selected && !this.isSelected()\n\t\t\t\t|| options.type && options.type !== Base.hyphenate(this._class)\n\t\t\t\t|| options.class && !(this instanceof options.class)),\n\t\t\tmatch = options.match,\n\t\t\tthat = this,\n\t\t\tbounds,\n\t\t\tres;\n\n\t\tfunction filter(hit) {\n\t\t\tif (hit && match && !match(hit))\n\t\t\t\thit = null;\n\t\t\tif (hit && options.all)\n\t\t\t\toptions.all.push(hit);\n\t\t\treturn hit;\n\t\t}\n\n\t\tfunction checkPoint(type, part) {\n\t\t\tvar pt = part ? bounds['get' + part]() : that.getPosition();\n\t\t\tif (point.subtract(pt).divide(tolerancePadding).length <= 1) {\n\t\t\t\treturn new HitResult(type, that, {\n\t\t\t\t\tname: part ? Base.hyphenate(part) : type,\n\t\t\t\t\tpoint: pt\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tvar checkPosition = options.position,\n\t\t\tcheckCenter = options.center,\n\t\t\tcheckBounds = options.bounds;\n\t\tif (checkSelf && this._parent\n\t\t\t\t&& (checkPosition || checkCenter || checkBounds)) {\n\t\t\tif (checkCenter || checkBounds) {\n\t\t\t\tbounds = this.getInternalBounds();\n\t\t\t}\n\t\t\tres = checkPosition && checkPoint('position') ||\n\t\t\t\t\tcheckCenter && checkPoint('center', 'Center');\n\t\t\tif (!res && checkBounds) {\n\t\t\t\tvar points = [\n\t\t\t\t\t'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',\n\t\t\t\t\t'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'\n\t\t\t\t];\n\t\t\t\tfor (var i = 0; i < 8 && !res; i++) {\n\t\t\t\t\tres = checkPoint('bounds', points[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tres = filter(res);\n\t\t}\n\n\t\tif (!res) {\n\t\t\tres = this._hitTestChildren(point, options, viewMatrix)\n\t\t\t\t|| checkSelf\n\t\t\t\t\t&& filter(this._hitTestSelf(point, options, viewMatrix,\n\t\t\t\t\t\tthis.getStrokeScaling() ? null\n\t\t\t\t\t\t\t: viewMatrix._shiftless().invert()))\n\t\t\t\t|| null;\n\t\t}\n\t\tif (res && res.point) {\n\t\t\tres.point = matrix.transform(res.point);\n\t\t}\n\t\treturn res;\n\t},\n\n\t_hitTestSelf: function(point, options) {\n\t\tif (options.fill && this.hasFill() && this._contains(point))\n\t\t\treturn new HitResult('fill', this);\n\t},\n\n\tmatches: function(name, compare) {\n\t\tfunction matchObject(obj1, obj2) {\n\t\t\tfor (var i in obj1) {\n\t\t\t\tif (obj1.hasOwnProperty(i)) {\n\t\t\t\t\tvar val1 = obj1[i],\n\t\t\t\t\t\tval2 = obj2[i];\n\t\t\t\t\tif (Base.isPlainObject(val1) && Base.isPlainObject(val2)) {\n\t\t\t\t\t\tif (!matchObject(val1, val2))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if (!Base.equals(val1, val2)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tvar type = typeof name;\n\t\tif (type === 'object') {\n\t\t\tfor (var key in name) {\n\t\t\t\tif (name.hasOwnProperty(key) && !this.matches(key, name[key]))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t} else if (type === 'function') {\n\t\t\treturn name(this);\n\t\t} else if (name === 'match') {\n\t\t\treturn compare(this);\n\t\t} else {\n\t\t\tvar value = /^(empty|editable)$/.test(name)\n\t\t\t\t\t? this['is' + Base.capitalize(name)]()\n\t\t\t\t\t: name === 'type'\n\t\t\t\t\t\t? Base.hyphenate(this._class)\n\t\t\t\t\t\t: this[name];\n\t\t\tif (name === 'class') {\n\t\t\t\tif (typeof compare === 'function')\n\t\t\t\t\treturn this instanceof compare;\n\t\t\t\tvalue = this._class;\n\t\t\t}\n\t\t\tif (typeof compare === 'function') {\n\t\t\t\treturn !!compare(value);\n\t\t\t} else if (compare) {\n\t\t\t\tif (compare.test) {\n\t\t\t\t\treturn compare.test(value);\n\t\t\t\t} else if (Base.isPlainObject(compare)) {\n\t\t\t\t\treturn matchObject(compare, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Base.equals(value, compare);\n\t\t}\n\t},\n\n\tgetItems: function(options) {\n\t\treturn Item._getItems(this, options, this._matrix);\n\t},\n\n\tgetItem: function(options) {\n\t\treturn Item._getItems(this, options, this._matrix, null, true)[0]\n\t\t\t\t|| null;\n\t},\n\n\tstatics: {\n\t\t_getItems: function _getItems(item, options, matrix, param, firstOnly) {\n\t\t\tif (!param) {\n\t\t\t\tvar obj = typeof options === 'object' && options,\n\t\t\t\t\toverlapping = obj && obj.overlapping,\n\t\t\t\t\tinside = obj && obj.inside,\n\t\t\t\t\tbounds = overlapping || inside,\n\t\t\t\t\trect = bounds && Rectangle.read([bounds]);\n\t\t\t\tparam = {\n\t\t\t\t\titems: [],\n\t\t\t\t\trecursive: obj && obj.recursive !== false,\n\t\t\t\t\tinside: !!inside,\n\t\t\t\t\toverlapping: !!overlapping,\n\t\t\t\t\trect: rect,\n\t\t\t\t\tpath: overlapping && new Path.Rectangle({\n\t\t\t\t\t\trectangle: rect,\n\t\t\t\t\t\tinsert: false\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t\tif (obj) {\n\t\t\t\t\toptions = Base.filter({}, options, {\n\t\t\t\t\t\trecursive: true, inside: true, overlapping: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar children = item._children,\n\t\t\t\titems = param.items,\n\t\t\t\trect = param.rect;\n\t\t\tmatrix = rect && (matrix || new Matrix());\n\t\t\tfor (var i = 0, l = children && children.length; i < l; i++) {\n\t\t\t\tvar child = children[i],\n\t\t\t\t\tchildMatrix = matrix && matrix.appended(child._matrix),\n\t\t\t\t\tadd = true;\n\t\t\t\tif (rect) {\n\t\t\t\t\tvar bounds = child.getBounds(childMatrix);\n\t\t\t\t\tif (!rect.intersects(bounds))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (!(rect.contains(bounds)\n\t\t\t\t\t\t\t|| param.overlapping && (bounds.contains(rect)\n\t\t\t\t\t\t\t\t|| param.path.intersects(child, childMatrix))))\n\t\t\t\t\t\tadd = false;\n\t\t\t\t}\n\t\t\t\tif (add && child.matches(options)) {\n\t\t\t\t\titems.push(child);\n\t\t\t\t\tif (firstOnly)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (param.recursive !== false) {\n\t\t\t\t\t_getItems(child, options, childMatrix, param, firstOnly);\n\t\t\t\t}\n\t\t\t\tif (firstOnly && items.length > 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn items;\n\t\t}\n\t}\n}, {\n\n\timportJSON: function(json) {\n\t\tvar res = Base.importJSON(json, this);\n\t\treturn res !== this ? this.addChild(res) : res;\n\t},\n\n\taddChild: function(item) {\n\t\treturn this.insertChild(undefined, item);\n\t},\n\n\tinsertChild: function(index, item) {\n\t\tvar res = item ? this.insertChildren(index, [item]) : null;\n\t\treturn res && res[0];\n\t},\n\n\taddChildren: function(items) {\n\t\treturn this.insertChildren(this._children.length, items);\n\t},\n\n\tinsertChildren: function(index, items) {\n\t\tvar children = this._children;\n\t\tif (children && items && items.length > 0) {\n\t\t\titems = Base.slice(items);\n\t\t\tvar inserted = {};\n\t\t\tfor (var i = items.length - 1; i >= 0; i--) {\n\t\t\t\tvar item = items[i],\n\t\t\t\t\tid = item && item._id;\n\t\t\t\tif (!item || inserted[id]) {\n\t\t\t\t\titems.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\titem._remove(false, true);\n\t\t\t\t\tinserted[id] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tBase.splice(children, items, index, 0);\n\t\t\tvar project = this._project,\n\t\t\t\tnotifySelf = project._changes;\n\t\t\tfor (var i = 0, l = items.length; i < l; i++) {\n\t\t\t\tvar item = items[i],\n\t\t\t\t\tname = item._name;\n\t\t\t\titem._parent = this;\n\t\t\t\titem._setProject(project, true);\n\t\t\t\tif (name)\n\t\t\t\t\titem.setName(name);\n\t\t\t\tif (notifySelf)\n\t\t\t\t\titem._changed(5);\n\t\t\t}\n\t\t\tthis._changed(11);\n\t\t} else {\n\t\t\titems = null;\n\t\t}\n\t\treturn items;\n\t},\n\n\t_insertItem: '#insertChild',\n\n\t_insertAt: function(item, offset) {\n\t\tvar owner = item && item._getOwner(),\n\t\t\tres = item !== this && owner ? this : null;\n\t\tif (res) {\n\t\t\tres._remove(false, true);\n\t\t\towner._insertItem(item._index + offset, res);\n\t\t}\n\t\treturn res;\n\t},\n\n\tinsertAbove: function(item) {\n\t\treturn this._insertAt(item, 1);\n\t},\n\n\tinsertBelow: function(item) {\n\t\treturn this._insertAt(item, 0);\n\t},\n\n\tsendToBack: function() {\n\t\tvar owner = this._getOwner();\n\t\treturn owner ? owner._insertItem(0, this) : null;\n\t},\n\n\tbringToFront: function() {\n\t\tvar owner = this._getOwner();\n\t\treturn owner ? owner._insertItem(undefined, this) : null;\n\t},\n\n\tappendTop: '#addChild',\n\n\tappendBottom: function(item) {\n\t\treturn this.insertChild(0, item);\n\t},\n\n\tmoveAbove: '#insertAbove',\n\n\tmoveBelow: '#insertBelow',\n\n\taddTo: function(owner) {\n\t\treturn owner._insertItem(undefined, this);\n\t},\n\n\tcopyTo: function(owner) {\n\t\treturn this.clone(false).addTo(owner);\n\t},\n\n\treduce: function(options) {\n\t\tvar children = this._children;\n\t\tif (children && children.length === 1) {\n\t\t\tvar child = children[0].reduce(options);\n\t\t\tif (this._parent) {\n\t\t\t\tchild.insertAbove(this);\n\t\t\t\tthis.remove();\n\t\t\t} else {\n\t\t\t\tchild.remove();\n\t\t\t}\n\t\t\treturn child;\n\t\t}\n\t\treturn this;\n\t},\n\n\t_removeNamed: function() {\n\t\tvar owner = this._getOwner();\n\t\tif (owner) {\n\t\t\tvar children = owner._children,\n\t\t\t\tnamedChildren = owner._namedChildren,\n\t\t\t\tname = this._name,\n\t\t\t\tnamedArray = namedChildren[name],\n\t\t\t\tindex = namedArray ? namedArray.indexOf(this) : -1;\n\t\t\tif (index !== -1) {\n\t\t\t\tif (children[name] == this)\n\t\t\t\t\tdelete children[name];\n\t\t\t\tnamedArray.splice(index, 1);\n\t\t\t\tif (namedArray.length) {\n\t\t\t\t\tchildren[name] = namedArray[0];\n\t\t\t\t} else {\n\t\t\t\t\tdelete namedChildren[name];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_remove: function(notifySelf, notifyParent) {\n\t\tvar owner = this._getOwner(),\n\t\t\tproject = this._project,\n\t\t\tindex = this._index;\n\t\tif (owner) {\n\t\t\tif (this._name)\n\t\t\t\tthis._removeNamed();\n\t\t\tif (index != null) {\n\t\t\t\tif (project._activeLayer === this)\n\t\t\t\t\tproject._activeLayer = this.getNextSibling()\n\t\t\t\t\t\t\t|| this.getPreviousSibling();\n\t\t\t\tBase.splice(owner._children, null, index, 1);\n\t\t\t}\n\t\t\tthis._installEvents(false);\n\t\t\tif (notifySelf && project._changes)\n\t\t\t\tthis._changed(5);\n\t\t\tif (notifyParent)\n\t\t\t\towner._changed(11, this);\n\t\t\tthis._parent = null;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tremove: function() {\n\t\treturn this._remove(true, true);\n\t},\n\n\treplaceWith: function(item) {\n\t\tvar ok = item && item.insertBelow(this);\n\t\tif (ok)\n\t\t\tthis.remove();\n\t\treturn ok;\n\t},\n\n\tremoveChildren: function(start, end) {\n\t\tif (!this._children)\n\t\t\treturn null;\n\t\tstart = start || 0;\n\t\tend = Base.pick(end, this._children.length);\n\t\tvar removed = Base.splice(this._children, null, start, end - start);\n\t\tfor (var i = removed.length - 1; i >= 0; i--) {\n\t\t\tremoved[i]._remove(true, false);\n\t\t}\n\t\tif (removed.length > 0)\n\t\t\tthis._changed(11);\n\t\treturn removed;\n\t},\n\n\tclear: '#removeChildren',\n\n\treverseChildren: function() {\n\t\tif (this._children) {\n\t\t\tthis._children.reverse();\n\t\t\tfor (var i = 0, l = this._children.length; i < l; i++)\n\t\t\t\tthis._children[i]._index = i;\n\t\t\tthis._changed(11);\n\t\t}\n\t},\n\n\tisEmpty: function() {\n\t\tvar children = this._children;\n\t\treturn !children || !children.length;\n\t},\n\n\tisEditable: function() {\n\t\tvar item = this;\n\t\twhile (item) {\n\t\t\tif (!item._visible || item._locked)\n\t\t\t\treturn false;\n\t\t\titem = item._parent;\n\t\t}\n\t\treturn true;\n\t},\n\n\thasFill: function() {\n\t\treturn this.getStyle().hasFill();\n\t},\n\n\thasStroke: function() {\n\t\treturn this.getStyle().hasStroke();\n\t},\n\n\thasShadow: function() {\n\t\treturn this.getStyle().hasShadow();\n\t},\n\n\t_getOrder: function(item) {\n\t\tfunction getList(item) {\n\t\t\tvar list = [];\n\t\t\tdo {\n\t\t\t\tlist.unshift(item);\n\t\t\t} while (item = item._parent);\n\t\t\treturn list;\n\t\t}\n\t\tvar list1 = getList(this),\n\t\t\tlist2 = getList(item);\n\t\tfor (var i = 0, l = Math.min(list1.length, list2.length); i < l; i++) {\n\t\t\tif (list1[i] != list2[i]) {\n\t\t\t\treturn list1[i]._index < list2[i]._index ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t},\n\n\thasChildren: function() {\n\t\treturn this._children && this._children.length > 0;\n\t},\n\n\tisInserted: function() {\n\t\treturn this._parent ? this._parent.isInserted() : false;\n\t},\n\n\tisAbove: function(item) {\n\t\treturn this._getOrder(item) === -1;\n\t},\n\n\tisBelow: function(item) {\n\t\treturn this._getOrder(item) === 1;\n\t},\n\n\tisParent: function(item) {\n\t\treturn this._parent === item;\n\t},\n\n\tisChild: function(item) {\n\t\treturn item && item._parent === this;\n\t},\n\n\tisDescendant: function(item) {\n\t\tvar parent = this;\n\t\twhile (parent = parent._parent) {\n\t\t\tif (parent === item)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tisAncestor: function(item) {\n\t\treturn item ? item.isDescendant(this) : false;\n\t},\n\n\tisSibling: function(item) {\n\t\treturn this._parent === item._parent;\n\t},\n\n\tisGroupedWith: function(item) {\n\t\tvar parent = this._parent;\n\t\twhile (parent) {\n\t\t\tif (parent._parent\n\t\t\t\t&& /^(Group|Layer|CompoundPath)$/.test(parent._class)\n\t\t\t\t&& item.isDescendant(parent))\n\t\t\t\t\treturn true;\n\t\t\tparent = parent._parent;\n\t\t}\n\t\treturn false;\n\t},\n\n}, Base.each(['rotate', 'scale', 'shear', 'skew'], function(key) {\n\tvar rotate = key === 'rotate';\n\tthis[key] = function() {\n\t\tvar value = (rotate ? Base : Point).read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\treturn this.transform(new Matrix()[key](value,\n\t\t\t\tcenter || this.getPosition(true)));\n\t};\n}, {\n\ttranslate: function() {\n\t\tvar mx = new Matrix();\n\t\treturn this.transform(mx.translate.apply(mx, arguments));\n\t},\n\n\ttransform: function(matrix, _applyMatrix, _applyRecursively,\n\t\t\t_setApplyMatrix) {\n\t\tvar _matrix = this._matrix,\n\t\t\ttransform = matrix && !matrix.isIdentity(),\n\t\t\tapplyMatrix = (_applyMatrix || this._applyMatrix)\n\t\t\t\t\t&& ((!_matrix.isIdentity() || transform)\n\t\t\t\t\t\t|| _applyMatrix && _applyRecursively && this._children);\n\t\tif (!transform && !applyMatrix)\n\t\t\treturn this;\n\t\tif (transform) {\n\t\t\tif (!matrix.isInvertible() && _matrix.isInvertible())\n\t\t\t\t_matrix._backup = _matrix.getValues();\n\t\t\t_matrix.prepend(matrix, true);\n\t\t\tvar style = this._style,\n\t\t\t\tfillColor = style.getFillColor(true),\n\t\t\t\tstrokeColor = style.getStrokeColor(true);\n\t\t\tif (fillColor)\n\t\t\t\tfillColor.transform(matrix);\n\t\t\tif (strokeColor)\n\t\t\t\tstrokeColor.transform(matrix);\n\t\t}\n\t\tif (applyMatrix && (applyMatrix = this._transformContent(_matrix,\n\t\t\t\t_applyRecursively, _setApplyMatrix))) {\n\t\t\tvar pivot = this._pivot;\n\t\t\tif (pivot)\n\t\t\t\t_matrix._transformPoint(pivot, pivot, true);\n\t\t\t_matrix.reset(true);\n\t\t\tif (_setApplyMatrix && this._canApplyMatrix)\n\t\t\t\tthis._applyMatrix = true;\n\t\t}\n\t\tvar bounds = this._bounds,\n\t\t\tposition = this._position;\n\t\tif (transform || applyMatrix) {\n\t\t\tthis._changed(9);\n\t\t}\n\t\tvar decomp = transform && bounds && matrix.decompose();\n\t\tif (decomp && decomp.skewing.isZero() && decomp.rotation % 90 === 0) {\n\t\t\tfor (var key in bounds) {\n\t\t\t\tvar cache = bounds[key];\n\t\t\t\tif (cache.nonscaling) {\n\t\t\t\t\tdelete bounds[key];\n\t\t\t\t} else if (applyMatrix || !cache.internal) {\n\t\t\t\t\tvar rect = cache.rect;\n\t\t\t\t\tmatrix._transformBounds(rect, rect);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._bounds = bounds;\n\t\t\tvar cached = bounds[this._getBoundsCacheKey(\n\t\t\t\t\tthis._boundsOptions || {})];\n\t\t\tif (cached) {\n\t\t\t\tthis._position = cached.rect.getCenter(true);\n\t\t\t}\n\t\t} else if (transform && position && this._pivot) {\n\t\t\tthis._position = matrix._transformPoint(position, position);\n\t\t}\n\t\treturn this;\n\t},\n\n\t_transformContent: function(matrix, applyRecursively, setApplyMatrix) {\n\t\tvar children = this._children;\n\t\tif (children) {\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tchildren[i].transform(matrix, true, applyRecursively,\n\t\t\t\t\t\tsetApplyMatrix);\n\t\t\treturn true;\n\t\t}\n\t},\n\n\tglobalToLocal: function() {\n\t\treturn this.getGlobalMatrix(true)._inverseTransform(\n\t\t\t\tPoint.read(arguments));\n\t},\n\n\tlocalToGlobal: function() {\n\t\treturn this.getGlobalMatrix(true)._transformPoint(\n\t\t\t\tPoint.read(arguments));\n\t},\n\n\tparentToLocal: function() {\n\t\treturn this._matrix._inverseTransform(Point.read(arguments));\n\t},\n\n\tlocalToParent: function() {\n\t\treturn this._matrix._transformPoint(Point.read(arguments));\n\t},\n\n\tfitBounds: function(rectangle, fill) {\n\t\trectangle = Rectangle.read(arguments);\n\t\tvar bounds = this.getBounds(),\n\t\t\titemRatio = bounds.height / bounds.width,\n\t\t\trectRatio = rectangle.height / rectangle.width,\n\t\t\tscale = (fill ? itemRatio > rectRatio : itemRatio < rectRatio)\n\t\t\t\t\t? rectangle.width / bounds.width\n\t\t\t\t\t: rectangle.height / bounds.height,\n\t\t\tnewBounds = new Rectangle(new Point(),\n\t\t\t\t\tnew Size(bounds.width * scale, bounds.height * scale));\n\t\tnewBounds.setCenter(rectangle.getCenter());\n\t\tthis.setBounds(newBounds);\n\t}\n}), {\n\n\t_setStyles: function(ctx, param, viewMatrix) {\n\t\tvar style = this._style,\n\t\t\tmatrix = this._matrix;\n\t\tif (style.hasFill()) {\n\t\t\tctx.fillStyle = style.getFillColor().toCanvasStyle(ctx, matrix);\n\t\t}\n\t\tif (style.hasStroke()) {\n\t\t\tctx.strokeStyle = style.getStrokeColor().toCanvasStyle(ctx, matrix);\n\t\t\tctx.lineWidth = style.getStrokeWidth();\n\t\t\tvar strokeJoin = style.getStrokeJoin(),\n\t\t\t\tstrokeCap = style.getStrokeCap(),\n\t\t\t\tmiterLimit = style.getMiterLimit();\n\t\t\tif (strokeJoin)\n\t\t\t\tctx.lineJoin = strokeJoin;\n\t\t\tif (strokeCap)\n\t\t\t\tctx.lineCap = strokeCap;\n\t\t\tif (miterLimit)\n\t\t\t\tctx.miterLimit = miterLimit;\n\t\t\tif (paper.support.nativeDash) {\n\t\t\t\tvar dashArray = style.getDashArray(),\n\t\t\t\t\tdashOffset = style.getDashOffset();\n\t\t\t\tif (dashArray && dashArray.length) {\n\t\t\t\t\tif ('setLineDash' in ctx) {\n\t\t\t\t\t\tctx.setLineDash(dashArray);\n\t\t\t\t\t\tctx.lineDashOffset = dashOffset;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.mozDash = dashArray;\n\t\t\t\t\t\tctx.mozDashOffset = dashOffset;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (style.hasShadow()) {\n\t\t\tvar pixelRatio = param.pixelRatio || 1,\n\t\t\t\tmx = viewMatrix._shiftless().prepend(\n\t\t\t\t\tnew Matrix().scale(pixelRatio, pixelRatio)),\n\t\t\t\tblur = mx.transform(new Point(style.getShadowBlur(), 0)),\n\t\t\t\toffset = mx.transform(this.getShadowOffset());\n\t\t\tctx.shadowColor = style.getShadowColor().toCanvasStyle(ctx);\n\t\t\tctx.shadowBlur = blur.getLength();\n\t\t\tctx.shadowOffsetX = offset.x;\n\t\t\tctx.shadowOffsetY = offset.y;\n\t\t}\n\t},\n\n\tdraw: function(ctx, param, parentStrokeMatrix) {\n\t\tvar updateVersion = this._updateVersion = this._project._updateVersion;\n\t\tif (!this._visible || this._opacity === 0)\n\t\t\treturn;\n\t\tvar matrices = param.matrices,\n\t\t\tviewMatrix = param.viewMatrix,\n\t\t\tmatrix = this._matrix,\n\t\t\tglobalMatrix = matrices[matrices.length - 1].appended(matrix);\n\t\tif (!globalMatrix.isInvertible())\n\t\t\treturn;\n\n\t\tviewMatrix = viewMatrix ? viewMatrix.appended(globalMatrix)\n\t\t\t\t: globalMatrix;\n\n\t\tmatrices.push(globalMatrix);\n\t\tif (param.updateMatrix) {\n\t\t\tglobalMatrix._updateVersion = updateVersion;\n\t\t\tthis._globalMatrix = globalMatrix;\n\t\t}\n\n\t\tvar blendMode = this._blendMode,\n\t\t\topacity = this._opacity,\n\t\t\tnormalBlend = blendMode === 'normal',\n\t\t\tnativeBlend = BlendMode.nativeModes[blendMode],\n\t\t\tdirect = normalBlend && opacity === 1\n\t\t\t\t\t|| param.dontStart\n\t\t\t\t\t|| param.clip\n\t\t\t\t\t|| (nativeBlend || normalBlend && opacity < 1)\n\t\t\t\t\t\t&& this._canComposite(),\n\t\t\tpixelRatio = param.pixelRatio || 1,\n\t\t\tmainCtx, itemOffset, prevOffset;\n\t\tif (!direct) {\n\t\t\tvar bounds = this.getStrokeBounds(viewMatrix);\n\t\t\tif (!bounds.width || !bounds.height)\n\t\t\t\treturn;\n\t\t\tprevOffset = param.offset;\n\t\t\titemOffset = param.offset = bounds.getTopLeft().floor();\n\t\t\tmainCtx = ctx;\n\t\t\tctx = CanvasProvider.getContext(bounds.getSize().ceil().add(1)\n\t\t\t\t\t.multiply(pixelRatio));\n\t\t\tif (pixelRatio !== 1)\n\t\t\t\tctx.scale(pixelRatio, pixelRatio);\n\t\t}\n\t\tctx.save();\n\t\tvar strokeMatrix = parentStrokeMatrix\n\t\t\t\t? parentStrokeMatrix.appended(matrix)\n\t\t\t\t: this._canScaleStroke && !this.getStrokeScaling(true)\n\t\t\t\t\t&& viewMatrix,\n\t\t\tclip = !direct && param.clipItem,\n\t\t\ttransform = !strokeMatrix || clip;\n\t\tif (direct) {\n\t\t\tctx.globalAlpha = opacity;\n\t\t\tif (nativeBlend)\n\t\t\t\tctx.globalCompositeOperation = blendMode;\n\t\t} else if (transform) {\n\t\t\tctx.translate(-itemOffset.x, -itemOffset.y);\n\t\t}\n\t\tif (transform) {\n\t\t\t(direct ? matrix : viewMatrix).applyToContext(ctx);\n\t\t}\n\t\tif (clip) {\n\t\t\tparam.clipItem.draw(ctx, param.extend({ clip: true }));\n\t\t}\n\t\tif (strokeMatrix) {\n\t\t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\t\t\tvar offset = param.offset;\n\t\t\tif (offset)\n\t\t\t\tctx.translate(-offset.x, -offset.y);\n\t\t}\n\t\tthis._draw(ctx, param, viewMatrix, strokeMatrix);\n\t\tctx.restore();\n\t\tmatrices.pop();\n\t\tif (param.clip && !param.dontFinish)\n\t\t\tctx.clip();\n\t\tif (!direct) {\n\t\t\tBlendMode.process(blendMode, ctx, mainCtx, opacity,\n\t\t\t\t\titemOffset.subtract(prevOffset).multiply(pixelRatio));\n\t\t\tCanvasProvider.release(ctx);\n\t\t\tparam.offset = prevOffset;\n\t\t}\n\t},\n\n\t_isUpdated: function(updateVersion) {\n\t\tvar parent = this._parent;\n\t\tif (parent instanceof CompoundPath)\n\t\t\treturn parent._isUpdated(updateVersion);\n\t\tvar updated = this._updateVersion === updateVersion;\n\t\tif (!updated && parent && parent._visible\n\t\t\t\t&& parent._isUpdated(updateVersion)) {\n\t\t\tthis._updateVersion = updateVersion;\n\t\t\tupdated = true;\n\t\t}\n\t\treturn updated;\n\t},\n\n\t_drawSelection: function(ctx, matrix, size, selectionItems, updateVersion) {\n\t\tvar selection = this._selection,\n\t\t\titemSelected = selection & 1,\n\t\t\tboundsSelected = selection & 2\n\t\t\t\t\t|| itemSelected && this._selectBounds,\n\t\t\tpositionSelected = selection & 4;\n\t\tif (!this._drawSelected)\n\t\t\titemSelected = false;\n\t\tif ((itemSelected || boundsSelected || positionSelected)\n\t\t\t\t&& this._isUpdated(updateVersion)) {\n\t\t\tvar layer,\n\t\t\t\tcolor = this.getSelectedColor(true) || (layer = this.getLayer())\n\t\t\t\t\t&& layer.getSelectedColor(true),\n\t\t\t\tmx = matrix.appended(this.getGlobalMatrix(true)),\n\t\t\t\thalf = size / 2;\n\t\t\tctx.strokeStyle = ctx.fillStyle = color\n\t\t\t\t\t? color.toCanvasStyle(ctx) : '#009dec';\n\t\t\tif (itemSelected)\n\t\t\t\tthis._drawSelected(ctx, mx, selectionItems);\n\t\t\tif (positionSelected) {\n\t\t\t\tvar point = this.getPosition(true),\n\t\t\t\t\tx = point.x,\n\t\t\t\t\ty = point.y;\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(x, y, half, 0, Math.PI * 2, true);\n\t\t\t\tctx.stroke();\n\t\t\t\tvar deltas = [[0, -1], [1, 0], [0, 1], [-1, 0]],\n\t\t\t\t\tstart = half,\n\t\t\t\t\tend = size + 1;\n\t\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\t\tvar delta = deltas[i],\n\t\t\t\t\t\tdx = delta[0],\n\t\t\t\t\t\tdy = delta[1];\n\t\t\t\t\tctx.moveTo(x + dx * start, y + dy * start);\n\t\t\t\t\tctx.lineTo(x + dx * end, y + dy * end);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (boundsSelected) {\n\t\t\t\tvar coords = mx._transformCorners(this.getInternalBounds());\n\t\t\t\tctx.beginPath();\n\t\t\t\tfor (var i = 0; i < 8; i++) {\n\t\t\t\t\tctx[!i ? 'moveTo' : 'lineTo'](coords[i], coords[++i]);\n\t\t\t\t}\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.stroke();\n\t\t\t\tfor (var i = 0; i < 8; i++) {\n\t\t\t\t\tctx.fillRect(coords[i] - half, coords[++i] - half,\n\t\t\t\t\t\t\tsize, size);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_canComposite: function() {\n\t\treturn false;\n\t}\n}, Base.each(['down', 'drag', 'up', 'move'], function(key) {\n\tthis['removeOn' + Base.capitalize(key)] = function() {\n\t\tvar hash = {};\n\t\thash[key] = true;\n\t\treturn this.removeOn(hash);\n\t};\n}, {\n\n\tremoveOn: function(obj) {\n\t\tfor (var name in obj) {\n\t\t\tif (obj[name]) {\n\t\t\t\tvar key = 'mouse' + name,\n\t\t\t\t\tproject = this._project,\n\t\t\t\t\tsets = project._removeSets = project._removeSets || {};\n\t\t\t\tsets[key] = sets[key] || {};\n\t\t\t\tsets[key][this._id] = this;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n}));\n\nvar Group = Item.extend({\n\t_class: 'Group',\n\t_selectBounds: false,\n\t_selectChildren: true,\n\t_serializeFields: {\n\t\tchildren: []\n\t},\n\n\tinitialize: function Group(arg) {\n\t\tthis._children = [];\n\t\tthis._namedChildren = {};\n\t\tif (!this._initialize(arg))\n\t\t\tthis.addChildren(Array.isArray(arg) ? arg : arguments);\n\t},\n\n\t_changed: function _changed(flags) {\n\t\t_changed.base.call(this, flags);\n\t\tif (flags & 1026) {\n\t\t\tthis._clipItem = undefined;\n\t\t}\n\t},\n\n\t_getClipItem: function() {\n\t\tvar clipItem = this._clipItem;\n\t\tif (clipItem === undefined) {\n\t\t\tclipItem = null;\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tif (children[i]._clipMask) {\n\t\t\t\t\tclipItem = children[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._clipItem = clipItem;\n\t\t}\n\t\treturn clipItem;\n\t},\n\n\tisClipped: function() {\n\t\treturn !!this._getClipItem();\n\t},\n\n\tsetClipped: function(clipped) {\n\t\tvar child = this.getFirstChild();\n\t\tif (child)\n\t\t\tchild.setClipMask(clipped);\n\t},\n\n\t_getBounds: function _getBounds(matrix, options) {\n\t\tvar clipItem = this._getClipItem();\n\t\treturn clipItem\n\t\t\t? clipItem._getCachedBounds(\n\t\t\t\tmatrix && matrix.appended(clipItem._matrix),\n\t\t\t\tBase.set({}, options, { stroke: false }))\n\t\t\t: _getBounds.base.call(this, matrix, options);\n\t},\n\n\t_hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {\n\t\tvar clipItem = this._getClipItem();\n\t\treturn (!clipItem || clipItem.contains(point))\n\t\t\t\t&& _hitTestChildren.base.call(this, point, options, viewMatrix,\n\t\t\t\t\tclipItem);\n\t},\n\n\t_draw: function(ctx, param) {\n\t\tvar clip = param.clip,\n\t\t\tclipItem = !clip && this._getClipItem();\n\t\tparam = param.extend({ clipItem: clipItem, clip: false });\n\t\tif (clip) {\n\t\t\tctx.beginPath();\n\t\t\tparam.dontStart = param.dontFinish = true;\n\t\t} else if (clipItem) {\n\t\t\tclipItem.draw(ctx, param.extend({ clip: true }));\n\t\t}\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tvar item = children[i];\n\t\t\tif (item !== clipItem)\n\t\t\t\titem.draw(ctx, param);\n\t\t}\n\t}\n});\n\nvar Layer = Group.extend({\n\t_class: 'Layer',\n\n\tinitialize: function Layer() {\n\t\tGroup.apply(this, arguments);\n\t},\n\n\t_getOwner: function() {\n\t\treturn this._parent || this._index != null && this._project;\n\t},\n\n\tisInserted: function isInserted() {\n\t\treturn this._parent ? isInserted.base.call(this) : this._index != null;\n\t},\n\n\tactivate: function() {\n\t\tthis._project._activeLayer = this;\n\t},\n\n\t_hitTestSelf: function() {\n\t}\n});\n\nvar Shape = Item.extend({\n\t_class: 'Shape',\n\t_applyMatrix: false,\n\t_canApplyMatrix: false,\n\t_canScaleStroke: true,\n\t_serializeFields: {\n\t\ttype: null,\n\t\tsize: null,\n\t\tradius: null\n\t},\n\n\tinitialize: function Shape(props, point) {\n\t\tthis._initialize(props, point);\n\t},\n\n\t_equals: function(item) {\n\t\treturn this._type === item._type\n\t\t\t&& this._size.equals(item._size)\n\t\t\t&& Base.equals(this._radius, item._radius);\n\t},\n\n\tcopyContent: function(source) {\n\t\tthis.setType(source._type);\n\t\tthis.setSize(source._size);\n\t\tthis.setRadius(source._radius);\n\t},\n\n\tgetType: function() {\n\t\treturn this._type;\n\t},\n\n\tsetType: function(type) {\n\t\tthis._type = type;\n\t},\n\n\tgetShape: '#getType',\n\tsetShape: '#setType',\n\n\tgetSize: function() {\n\t\tvar size = this._size;\n\t\treturn new LinkedSize(size.width, size.height, this, 'setSize');\n\t},\n\n\tsetSize: function() {\n\t\tvar size = Size.read(arguments);\n\t\tif (!this._size) {\n\t\t\tthis._size = size.clone();\n\t\t} else if (!this._size.equals(size)) {\n\t\t\tvar type = this._type,\n\t\t\t\twidth = size.width,\n\t\t\t\theight = size.height;\n\t\t\tif (type === 'rectangle') {\n\t\t\t\tthis._radius.set(Size.min(this._radius, size.divide(2)));\n\t\t\t} else if (type === 'circle') {\n\t\t\t\twidth = height = (width + height) / 2;\n\t\t\t\tthis._radius = width / 2;\n\t\t\t} else if (type === 'ellipse') {\n\t\t\t\tthis._radius._set(width / 2, height / 2);\n\t\t\t}\n\t\t\tthis._size._set(width, height);\n\t\t\tthis._changed(9);\n\t\t}\n\t},\n\n\tgetRadius: function() {\n\t\tvar rad = this._radius;\n\t\treturn this._type === 'circle'\n\t\t\t\t? rad\n\t\t\t\t: new LinkedSize(rad.width, rad.height, this, 'setRadius');\n\t},\n\n\tsetRadius: function(radius) {\n\t\tvar type = this._type;\n\t\tif (type === 'circle') {\n\t\t\tif (radius === this._radius)\n\t\t\t\treturn;\n\t\t\tvar size = radius * 2;\n\t\t\tthis._radius = radius;\n\t\t\tthis._size._set(size, size);\n\t\t} else {\n\t\t\tradius = Size.read(arguments);\n\t\t\tif (!this._radius) {\n\t\t\t\tthis._radius = radius.clone();\n\t\t\t} else {\n\t\t\t\tif (this._radius.equals(radius))\n\t\t\t\t\treturn;\n\t\t\t\tthis._radius.set(radius);\n\t\t\t\tif (type === 'rectangle') {\n\t\t\t\t\tvar size = Size.max(this._size, radius.multiply(2));\n\t\t\t\t\tthis._size.set(size);\n\t\t\t\t} else if (type === 'ellipse') {\n\t\t\t\t\tthis._size._set(radius.width * 2, radius.height * 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._changed(9);\n\t},\n\n\tisEmpty: function() {\n\t\treturn false;\n\t},\n\n\ttoPath: function(insert) {\n\t\tvar path = new Path[Base.capitalize(this._type)]({\n\t\t\tcenter: new Point(),\n\t\t\tsize: this._size,\n\t\t\tradius: this._radius,\n\t\t\tinsert: false\n\t\t});\n\t\tpath.copyAttributes(this);\n\t\tif (paper.settings.applyMatrix)\n\t\t\tpath.setApplyMatrix(true);\n\t\tif (insert === undefined || insert)\n\t\t\tpath.insertAbove(this);\n\t\treturn path;\n\t},\n\n\ttoShape: '#clone',\n\n\t_asPathItem: function() {\n\t\treturn this.toPath(false);\n\t},\n\n\t_draw: function(ctx, param, viewMatrix, strokeMatrix) {\n\t\tvar style = this._style,\n\t\t\thasFill = style.hasFill(),\n\t\t\thasStroke = style.hasStroke(),\n\t\t\tdontPaint = param.dontFinish || param.clip,\n\t\t\tuntransformed = !strokeMatrix;\n\t\tif (hasFill || hasStroke || dontPaint) {\n\t\t\tvar type = this._type,\n\t\t\t\tradius = this._radius,\n\t\t\t\tisCircle = type === 'circle';\n\t\t\tif (!param.dontStart)\n\t\t\t\tctx.beginPath();\n\t\t\tif (untransformed && isCircle) {\n\t\t\t\tctx.arc(0, 0, radius, 0, Math.PI * 2, true);\n\t\t\t} else {\n\t\t\t\tvar rx = isCircle ? radius : radius.width,\n\t\t\t\t\try = isCircle ? radius : radius.height,\n\t\t\t\t\tsize = this._size,\n\t\t\t\t\twidth = size.width,\n\t\t\t\t\theight = size.height;\n\t\t\t\tif (untransformed && type === 'rectangle' && rx === 0 && ry === 0) {\n\t\t\t\t\tctx.rect(-width / 2, -height / 2, width, height);\n\t\t\t\t} else {\n\t\t\t\t\tvar x = width / 2,\n\t\t\t\t\t\ty = height / 2,\n\t\t\t\t\t\tkappa = 1 - 0.5522847498307936,\n\t\t\t\t\t\tcx = rx * kappa,\n\t\t\t\t\t\tcy = ry * kappa,\n\t\t\t\t\t\tc = [\n\t\t\t\t\t\t\t-x, -y + ry,\n\t\t\t\t\t\t\t-x, -y + cy,\n\t\t\t\t\t\t\t-x + cx, -y,\n\t\t\t\t\t\t\t-x + rx, -y,\n\t\t\t\t\t\t\tx - rx, -y,\n\t\t\t\t\t\t\tx - cx, -y,\n\t\t\t\t\t\t\tx, -y + cy,\n\t\t\t\t\t\t\tx, -y + ry,\n\t\t\t\t\t\t\tx, y - ry,\n\t\t\t\t\t\t\tx, y - cy,\n\t\t\t\t\t\t\tx - cx, y,\n\t\t\t\t\t\t\tx - rx, y,\n\t\t\t\t\t\t\t-x + rx, y,\n\t\t\t\t\t\t\t-x + cx, y,\n\t\t\t\t\t\t\t-x, y - cy,\n\t\t\t\t\t\t\t-x, y - ry\n\t\t\t\t\t\t];\n\t\t\t\t\tif (strokeMatrix)\n\t\t\t\t\t\tstrokeMatrix.transform(c, c, 32);\n\t\t\t\t\tctx.moveTo(c[0], c[1]);\n\t\t\t\t\tctx.bezierCurveTo(c[2], c[3], c[4], c[5], c[6], c[7]);\n\t\t\t\t\tif (x !== rx)\n\t\t\t\t\t\tctx.lineTo(c[8], c[9]);\n\t\t\t\t\tctx.bezierCurveTo(c[10], c[11], c[12], c[13], c[14], c[15]);\n\t\t\t\t\tif (y !== ry)\n\t\t\t\t\t\tctx.lineTo(c[16], c[17]);\n\t\t\t\t\tctx.bezierCurveTo(c[18], c[19], c[20], c[21], c[22], c[23]);\n\t\t\t\t\tif (x !== rx)\n\t\t\t\t\t\tctx.lineTo(c[24], c[25]);\n\t\t\t\t\tctx.bezierCurveTo(c[26], c[27], c[28], c[29], c[30], c[31]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tctx.closePath();\n\t\t}\n\t\tif (!dontPaint && (hasFill || hasStroke)) {\n\t\t\tthis._setStyles(ctx, param, viewMatrix);\n\t\t\tif (hasFill) {\n\t\t\t\tctx.fill(style.getFillRule());\n\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t}\n\t\t\tif (hasStroke)\n\t\t\t\tctx.stroke();\n\t\t}\n\t},\n\n\t_canComposite: function() {\n\t\treturn !(this.hasFill() && this.hasStroke());\n\t},\n\n\t_getBounds: function(matrix, options) {\n\t\tvar rect = new Rectangle(this._size).setCenter(0, 0),\n\t\t\tstyle = this._style,\n\t\t\tstrokeWidth = options.stroke && style.hasStroke()\n\t\t\t\t\t&& style.getStrokeWidth();\n\t\tif (matrix)\n\t\t\trect = matrix._transformBounds(rect);\n\t\treturn strokeWidth\n\t\t\t\t? rect.expand(Path._getStrokePadding(strokeWidth,\n\t\t\t\t\tthis._getStrokeMatrix(matrix, options)))\n\t\t\t\t: rect;\n\t}\n},\nnew function() {\n\tfunction getCornerCenter(that, point, expand) {\n\t\tvar radius = that._radius;\n\t\tif (!radius.isZero()) {\n\t\t\tvar halfSize = that._size.divide(2);\n\t\t\tfor (var q = 1; q <= 4; q++) {\n\t\t\t\tvar dir = new Point(q > 1 && q < 4 ? -1 : 1, q > 2 ? -1 : 1),\n\t\t\t\t\tcorner = dir.multiply(halfSize),\n\t\t\t\t\tcenter = corner.subtract(dir.multiply(radius)),\n\t\t\t\t\trect = new Rectangle(\n\t\t\t\t\t\t\texpand ? corner.add(dir.multiply(expand)) : corner,\n\t\t\t\t\t\t\tcenter);\n\t\t\t\tif (rect.contains(point))\n\t\t\t\t\treturn { point: center, quadrant: q };\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction isOnEllipseStroke(point, radius, padding, quadrant) {\n\t\tvar vector = point.divide(radius);\n\t\treturn (!quadrant || vector.isInQuadrant(quadrant)) &&\n\t\t\t\tvector.subtract(vector.normalize()).multiply(radius)\n\t\t\t\t\t.divide(padding).length <= 1;\n\t}\n\n\treturn {\n\t\t_contains: function _contains(point) {\n\t\t\tif (this._type === 'rectangle') {\n\t\t\t\tvar center = getCornerCenter(this, point);\n\t\t\t\treturn center\n\t\t\t\t\t\t? point.subtract(center.point).divide(this._radius)\n\t\t\t\t\t\t\t.getLength() <= 1\n\t\t\t\t\t\t: _contains.base.call(this, point);\n\t\t\t} else {\n\t\t\t\treturn point.divide(this.size).getLength() <= 0.5;\n\t\t\t}\n\t\t},\n\n\t\t_hitTestSelf: function _hitTestSelf(point, options, viewMatrix,\n\t\t\t\tstrokeMatrix) {\n\t\t\tvar hit = false,\n\t\t\t\tstyle = this._style,\n\t\t\t\thitStroke = options.stroke && style.hasStroke(),\n\t\t\t\thitFill = options.fill && style.hasFill();\n\t\t\tif (hitStroke || hitFill) {\n\t\t\t\tvar type = this._type,\n\t\t\t\t\tradius = this._radius,\n\t\t\t\t\tstrokeRadius = hitStroke ? style.getStrokeWidth() / 2 : 0,\n\t\t\t\t\tstrokePadding = options._tolerancePadding.add(\n\t\t\t\t\t\tPath._getStrokePadding(strokeRadius,\n\t\t\t\t\t\t\t!style.getStrokeScaling() && strokeMatrix));\n\t\t\t\tif (type === 'rectangle') {\n\t\t\t\t\tvar padding = strokePadding.multiply(2),\n\t\t\t\t\t\tcenter = getCornerCenter(this, point, padding);\n\t\t\t\t\tif (center) {\n\t\t\t\t\t\thit = isOnEllipseStroke(point.subtract(center.point),\n\t\t\t\t\t\t\t\tradius, strokePadding, center.quadrant);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar rect = new Rectangle(this._size).setCenter(0, 0),\n\t\t\t\t\t\t\touter = rect.expand(padding),\n\t\t\t\t\t\t\tinner = rect.expand(padding.negate());\n\t\t\t\t\t\thit = outer._containsPoint(point)\n\t\t\t\t\t\t\t\t&& !inner._containsPoint(point);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thit = isOnEllipseStroke(point, radius, strokePadding);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn hit ? new HitResult(hitStroke ? 'stroke' : 'fill', this)\n\t\t\t\t\t: _hitTestSelf.base.apply(this, arguments);\n\t\t}\n\t};\n}, {\n\nstatics: new function() {\n\tfunction createShape(type, point, size, radius, args) {\n\t\tvar item = new Shape(Base.getNamed(args), point);\n\t\titem._type = type;\n\t\titem._size = size;\n\t\titem._radius = radius;\n\t\treturn item;\n\t}\n\n\treturn {\n\t\tCircle: function() {\n\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\tradius = Base.readNamed(arguments, 'radius');\n\t\t\treturn createShape('circle', center, new Size(radius * 2), radius,\n\t\t\t\t\targuments);\n\t\t},\n\n\t\tRectangle: function() {\n\t\t\tvar rect = Rectangle.readNamed(arguments, 'rectangle'),\n\t\t\t\tradius = Size.min(Size.readNamed(arguments, 'radius'),\n\t\t\t\t\t\trect.getSize(true).divide(2));\n\t\t\treturn createShape('rectangle', rect.getCenter(true),\n\t\t\t\t\trect.getSize(true), radius, arguments);\n\t\t},\n\n\t\tEllipse: function() {\n\t\t\tvar ellipse = Shape._readEllipse(arguments),\n\t\t\t\tradius = ellipse.radius;\n\t\t\treturn createShape('ellipse', ellipse.center, radius.multiply(2),\n\t\t\t\t\tradius, arguments);\n\t\t},\n\n\t\t_readEllipse: function(args) {\n\t\t\tvar center,\n\t\t\t\tradius;\n\t\t\tif (Base.hasNamed(args, 'radius')) {\n\t\t\t\tcenter = Point.readNamed(args, 'center');\n\t\t\t\tradius = Size.readNamed(args, 'radius');\n\t\t\t} else {\n\t\t\t\tvar rect = Rectangle.readNamed(args, 'rectangle');\n\t\t\t\tcenter = rect.getCenter(true);\n\t\t\t\tradius = rect.getSize(true).divide(2);\n\t\t\t}\n\t\t\treturn { center: center, radius: radius };\n\t\t}\n\t};\n}});\n\nvar Raster = Item.extend({\n\t_class: 'Raster',\n\t_applyMatrix: false,\n\t_canApplyMatrix: false,\n\t_boundsOptions: { stroke: false, handle: false },\n\t_serializeFields: {\n\t\tcrossOrigin: null,\n\t\tsource: null\n\t},\n\t_prioritize: ['crossOrigin'],\n\n\tinitialize: function Raster(object, position) {\n\t\tif (!this._initialize(object,\n\t\t\t\tposition !== undefined && Point.read(arguments, 1))) {\n\t\t\tvar image = typeof object === 'string'\n\t\t\t\t\t? document.getElementById(object) : object;\n\t\t\tif (image) {\n\t\t\t\tthis.setImage(image);\n\t\t\t} else {\n\t\t\t\tthis.setSource(object);\n\t\t\t}\n\t\t}\n\t\tif (!this._size) {\n\t\t\tthis._size = new Size();\n\t\t\tthis._loaded = false;\n\t\t}\n\t},\n\n\t_equals: function(item) {\n\t\treturn this.getSource() === item.getSource();\n\t},\n\n\tcopyContent: function(source) {\n\t\tvar image = source._image,\n\t\t\tcanvas = source._canvas;\n\t\tif (image) {\n\t\t\tthis._setImage(image);\n\t\t} else if (canvas) {\n\t\t\tvar copyCanvas = CanvasProvider.getCanvas(source._size);\n\t\t\tcopyCanvas.getContext('2d').drawImage(canvas, 0, 0);\n\t\t\tthis._setImage(copyCanvas);\n\t\t}\n\t\tthis._crossOrigin = source._crossOrigin;\n\t},\n\n\tgetSize: function() {\n\t\tvar size = this._size;\n\t\treturn new LinkedSize(size ? size.width : 0, size ? size.height : 0,\n\t\t\t\tthis, 'setSize');\n\t},\n\n\tsetSize: function() {\n\t\tvar size = Size.read(arguments);\n\t\tif (!size.equals(this._size)) {\n\t\t\tif (size.width > 0 && size.height > 0) {\n\t\t\t\tvar element = this.getElement();\n\t\t\t\tthis._setImage(CanvasProvider.getCanvas(size));\n\t\t\t\tif (element)\n\t\t\t\t\tthis.getContext(true).drawImage(element, 0, 0,\n\t\t\t\t\t\t\tsize.width, size.height);\n\t\t\t} else {\n\t\t\t\tif (this._canvas)\n\t\t\t\t\tCanvasProvider.release(this._canvas);\n\t\t\t\tthis._size = size.clone();\n\t\t\t}\n\t\t}\n\t},\n\n\tgetWidth: function() {\n\t\treturn this._size ? this._size.width : 0;\n\t},\n\n\tsetWidth: function(width) {\n\t\tthis.setSize(width, this.getHeight());\n\t},\n\n\tgetHeight: function() {\n\t\treturn this._size ? this._size.height : 0;\n\t},\n\n\tsetHeight: function(height) {\n\t\tthis.setSize(this.getWidth(), height);\n\t},\n\n\tgetLoaded: function() {\n\t\treturn this._loaded;\n\t},\n\n\tisEmpty: function() {\n\t\tvar size = this._size;\n\t\treturn !size || size.width === 0 && size.height === 0;\n\t},\n\n\tgetResolution: function() {\n\t\tvar matrix = this._matrix,\n\t\t\torig = new Point(0, 0).transform(matrix),\n\t\t\tu = new Point(1, 0).transform(matrix).subtract(orig),\n\t\t\tv = new Point(0, 1).transform(matrix).subtract(orig);\n\t\treturn new Size(\n\t\t\t72 / u.getLength(),\n\t\t\t72 / v.getLength()\n\t\t);\n\t},\n\n\tgetPpi: '#getResolution',\n\n\tgetImage: function() {\n\t\treturn this._image;\n\t},\n\n\tsetImage: function(image) {\n\t\tvar that = this;\n\n\t\tfunction emit(event) {\n\t\t\tvar view = that.getView(),\n\t\t\t\ttype = event && event.type || 'load';\n\t\t\tif (view && that.responds(type)) {\n\t\t\t\tpaper = view._scope;\n\t\t\t\tthat.emit(type, new Event(event));\n\t\t\t}\n\t\t}\n\n\t\tthis._setImage(image);\n\t\tif (this._loaded) {\n\t\t\tsetTimeout(emit, 0);\n\t\t} else if (image) {\n\t\t\tDomEvent.add(image, {\n\t\t\t\tload: function(event) {\n\t\t\t\t\tthat._setImage(image);\n\t\t\t\t\temit(event);\n\t\t\t\t},\n\t\t\t\terror: emit\n\t\t\t});\n\t\t}\n\t},\n\n\t_setImage: function(image) {\n\t\tif (this._canvas)\n\t\t\tCanvasProvider.release(this._canvas);\n\t\tif (image && image.getContext) {\n\t\t\tthis._image = null;\n\t\t\tthis._canvas = image;\n\t\t\tthis._loaded = true;\n\t\t} else {\n\t\t\tthis._image = image;\n\t\t\tthis._canvas = null;\n\t\t\tthis._loaded = !!(image && image.src && image.complete);\n\t\t}\n\t\tthis._size = new Size(\n\t\t\t\timage ? image.naturalWidth || image.width : 0,\n\t\t\t\timage ? image.naturalHeight || image.height : 0);\n\t\tthis._context = null;\n\t\tthis._changed(521);\n\t},\n\n\tgetCanvas: function() {\n\t\tif (!this._canvas) {\n\t\t\tvar ctx = CanvasProvider.getContext(this._size);\n\t\t\ttry {\n\t\t\t\tif (this._image)\n\t\t\t\t\tctx.drawImage(this._image, 0, 0);\n\t\t\t\tthis._canvas = ctx.canvas;\n\t\t\t} catch (e) {\n\t\t\t\tCanvasProvider.release(ctx);\n\t\t\t}\n\t\t}\n\t\treturn this._canvas;\n\t},\n\n\tsetCanvas: '#setImage',\n\n\tgetContext: function(modify) {\n\t\tif (!this._context)\n\t\t\tthis._context = this.getCanvas().getContext('2d');\n\t\tif (modify) {\n\t\t\tthis._image = null;\n\t\t\tthis._changed(513);\n\t\t}\n\t\treturn this._context;\n\t},\n\n\tsetContext: function(context) {\n\t\tthis._context = context;\n\t},\n\n\tgetSource: function() {\n\t\tvar image = this._image;\n\t\treturn image && image.src || this.toDataURL();\n\t},\n\n\tsetSource: function(src) {\n\t\tvar image = new self.Image(),\n\t\t\tcrossOrigin = this._crossOrigin;\n\t\tif (crossOrigin)\n\t\t\timage.crossOrigin = crossOrigin;\n\t\timage.src = src;\n\t\tthis.setImage(image);\n\t},\n\n\tgetCrossOrigin: function() {\n\t\tvar image = this._image;\n\t\treturn image && image.crossOrigin || this._crossOrigin || '';\n\t},\n\n\tsetCrossOrigin: function(crossOrigin) {\n\t\tthis._crossOrigin = crossOrigin;\n\t\tvar image = this._image;\n\t\tif (image)\n\t\t\timage.crossOrigin = crossOrigin;\n\t},\n\n\tgetElement: function() {\n\t\treturn this._canvas || this._loaded && this._image;\n\t}\n}, {\n\tbeans: false,\n\n\tgetSubCanvas: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tctx = CanvasProvider.getContext(rect.getSize());\n\t\tctx.drawImage(this.getCanvas(), rect.x, rect.y,\n\t\t\t\trect.width, rect.height, 0, 0, rect.width, rect.height);\n\t\treturn ctx.canvas;\n\t},\n\n\tgetSubRaster: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\traster = new Raster(Item.NO_INSERT);\n\t\traster._setImage(this.getSubCanvas(rect));\n\t\traster.translate(rect.getCenter().subtract(this.getSize().divide(2)));\n\t\traster._matrix.prepend(this._matrix);\n\t\traster.insertAbove(this);\n\t\treturn raster;\n\t},\n\n\ttoDataURL: function() {\n\t\tvar image = this._image,\n\t\t\tsrc = image && image.src;\n\t\tif (/^data:/.test(src))\n\t\t\treturn src;\n\t\tvar canvas = this.getCanvas();\n\t\treturn canvas ? canvas.toDataURL.apply(canvas, arguments) : null;\n\t},\n\n\tdrawImage: function(image ) {\n\t\tvar point = Point.read(arguments, 1);\n\t\tthis.getContext(true).drawImage(image, point.x, point.y);\n\t},\n\n\tgetAverageColor: function(object) {\n\t\tvar bounds, path;\n\t\tif (!object) {\n\t\t\tbounds = this.getBounds();\n\t\t} else if (object instanceof PathItem) {\n\t\t\tpath = object;\n\t\t\tbounds = object.getBounds();\n\t\t} else if (typeof object === 'object') {\n\t\t\tif ('width' in object) {\n\t\t\t\tbounds = new Rectangle(object);\n\t\t\t} else if ('x' in object) {\n\t\t\t\tbounds = new Rectangle(object.x - 0.5, object.y - 0.5, 1, 1);\n\t\t\t}\n\t\t}\n\t\tif (!bounds)\n\t\t\treturn null;\n\t\tvar sampleSize = 32,\n\t\t\twidth = Math.min(bounds.width, sampleSize),\n\t\t\theight = Math.min(bounds.height, sampleSize);\n\t\tvar ctx = Raster._sampleContext;\n\t\tif (!ctx) {\n\t\t\tctx = Raster._sampleContext = CanvasProvider.getContext(\n\t\t\t\t\tnew Size(sampleSize));\n\t\t} else {\n\t\t\tctx.clearRect(0, 0, sampleSize + 1, sampleSize + 1);\n\t\t}\n\t\tctx.save();\n\t\tvar matrix = new Matrix()\n\t\t\t\t.scale(width / bounds.width, height / bounds.height)\n\t\t\t\t.translate(-bounds.x, -bounds.y);\n\t\tmatrix.applyToContext(ctx);\n\t\tif (path)\n\t\t\tpath.draw(ctx, new Base({ clip: true, matrices: [matrix] }));\n\t\tthis._matrix.applyToContext(ctx);\n\t\tvar element = this.getElement(),\n\t\t\tsize = this._size;\n\t\tif (element)\n\t\t\tctx.drawImage(element, -size.width / 2, -size.height / 2);\n\t\tctx.restore();\n\t\tvar pixels = ctx.getImageData(0.5, 0.5, Math.ceil(width),\n\t\t\t\tMath.ceil(height)).data,\n\t\t\tchannels = [0, 0, 0],\n\t\t\ttotal = 0;\n\t\tfor (var i = 0, l = pixels.length; i < l; i += 4) {\n\t\t\tvar alpha = pixels[i + 3];\n\t\t\ttotal += alpha;\n\t\t\talpha /= 255;\n\t\t\tchannels[0] += pixels[i] * alpha;\n\t\t\tchannels[1] += pixels[i + 1] * alpha;\n\t\t\tchannels[2] += pixels[i + 2] * alpha;\n\t\t}\n\t\tfor (var i = 0; i < 3; i++)\n\t\t\tchannels[i] /= total;\n\t\treturn total ? Color.read(channels) : null;\n\t},\n\n\tgetPixel: function() {\n\t\tvar point = Point.read(arguments);\n\t\tvar data = this.getContext().getImageData(point.x, point.y, 1, 1).data;\n\t\treturn new Color('rgb', [data[0] / 255, data[1] / 255, data[2] / 255],\n\t\t\t\tdata[3] / 255);\n\t},\n\n\tsetPixel: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tcolor = Color.read(arguments),\n\t\t\tcomponents = color._convert('rgb'),\n\t\t\talpha = color._alpha,\n\t\t\tctx = this.getContext(true),\n\t\t\timageData = ctx.createImageData(1, 1),\n\t\t\tdata = imageData.data;\n\t\tdata[0] = components[0] * 255;\n\t\tdata[1] = components[1] * 255;\n\t\tdata[2] = components[2] * 255;\n\t\tdata[3] = alpha != null ? alpha * 255 : 255;\n\t\tctx.putImageData(imageData, point.x, point.y);\n\t},\n\n\tcreateImageData: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn this.getContext().createImageData(size.width, size.height);\n\t},\n\n\tgetImageData: function() {\n\t\tvar rect = Rectangle.read(arguments);\n\t\tif (rect.isEmpty())\n\t\t\trect = new Rectangle(this._size);\n\t\treturn this.getContext().getImageData(rect.x, rect.y,\n\t\t\t\trect.width, rect.height);\n\t},\n\n\tsetImageData: function(data ) {\n\t\tvar point = Point.read(arguments, 1);\n\t\tthis.getContext(true).putImageData(data, point.x, point.y);\n\t},\n\n\t_getBounds: function(matrix, options) {\n\t\tvar rect = new Rectangle(this._size).setCenter(0, 0);\n\t\treturn matrix ? matrix._transformBounds(rect) : rect;\n\t},\n\n\t_hitTestSelf: function(point) {\n\t\tif (this._contains(point)) {\n\t\t\tvar that = this;\n\t\t\treturn new HitResult('pixel', that, {\n\t\t\t\toffset: point.add(that._size.divide(2)).round(),\n\t\t\t\tcolor: {\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\treturn that.getPixel(this.offset);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t_draw: function(ctx) {\n\t\tvar element = this.getElement();\n\t\tif (element) {\n\t\t\tctx.globalAlpha = this._opacity;\n\t\t\tctx.drawImage(element,\n\t\t\t\t\t-this._size.width / 2, -this._size.height / 2);\n\t\t}\n\t},\n\n\t_canComposite: function() {\n\t\treturn true;\n\t}\n});\n\nvar SymbolItem = Item.extend({\n\t_class: 'SymbolItem',\n\t_applyMatrix: false,\n\t_canApplyMatrix: false,\n\t_boundsOptions: { stroke: true },\n\t_serializeFields: {\n\t\tsymbol: null\n\t},\n\n\tinitialize: function SymbolItem(arg0, arg1) {\n\t\tif (!this._initialize(arg0,\n\t\t\t\targ1 !== undefined && Point.read(arguments, 1)))\n\t\t\tthis.setDefinition(arg0 instanceof SymbolDefinition ?\n\t\t\t\t\targ0 : new SymbolDefinition(arg0));\n\t},\n\n\t_equals: function(item) {\n\t\treturn this._definition === item._definition;\n\t},\n\n\tcopyContent: function(source) {\n\t\tthis.setDefinition(source._definition);\n\t},\n\n\tgetDefinition: function() {\n\t\treturn this._definition;\n\t},\n\n\tsetDefinition: function(definition) {\n\t\tthis._definition = definition;\n\t\tthis._changed(9);\n\t},\n\n\tgetSymbol: '#getDefinition',\n\tsetSymbol: '#setDefinition',\n\n\tisEmpty: function() {\n\t\treturn this._definition._item.isEmpty();\n\t},\n\n\t_getBounds: function(matrix, options) {\n\t\tvar item = this._definition._item;\n\t\treturn item._getCachedBounds(item._matrix.prepended(matrix), options);\n\t},\n\n\t_hitTestSelf: function(point, options, viewMatrix) {\n\t\tvar res = this._definition._item._hitTest(point, options, viewMatrix);\n\t\tif (res)\n\t\t\tres.item = this;\n\t\treturn res;\n\t},\n\n\t_draw: function(ctx, param) {\n\t\tthis._definition._item.draw(ctx, param);\n\t}\n\n});\n\nvar SymbolDefinition = Base.extend({\n\t_class: 'SymbolDefinition',\n\n\tinitialize: function SymbolDefinition(item, dontCenter) {\n\t\tthis._id = UID.get();\n\t\tthis.project = paper.project;\n\t\tif (item)\n\t\t\tthis.setItem(item, dontCenter);\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn dictionary.add(this, function() {\n\t\t\treturn Base.serialize([this._class, this._item],\n\t\t\t\t\toptions, false, dictionary);\n\t\t});\n\t},\n\n\t_changed: function(flags) {\n\t\tif (flags & 8)\n\t\t\tItem._clearBoundsCache(this);\n\t\tif (flags & 1)\n\t\t\tthis.project._changed(flags);\n\t},\n\n\tgetItem: function() {\n\t\treturn this._item;\n\t},\n\n\tsetItem: function(item, _dontCenter) {\n\t\tif (item._symbol)\n\t\t\titem = item.clone();\n\t\tif (this._item)\n\t\t\tthis._item._symbol = null;\n\t\tthis._item = item;\n\t\titem.remove();\n\t\titem.setSelected(false);\n\t\tif (!_dontCenter)\n\t\t\titem.setPosition(new Point());\n\t\titem._symbol = this;\n\t\tthis._changed(9);\n\t},\n\n\tgetDefinition: '#getItem',\n\tsetDefinition: '#setItem',\n\n\tplace: function(position) {\n\t\treturn new SymbolItem(this, position);\n\t},\n\n\tclone: function() {\n\t\treturn new SymbolDefinition(this._item.clone(false));\n\t},\n\n\tequals: function(symbol) {\n\t\treturn symbol === this\n\t\t\t\t|| symbol && this._item.equals(symbol._item)\n\t\t\t\t|| false;\n\t}\n});\n\nvar HitResult = Base.extend({\n\t_class: 'HitResult',\n\n\tinitialize: function HitResult(type, item, values) {\n\t\tthis.type = type;\n\t\tthis.item = item;\n\t\tif (values)\n\t\t\tthis.inject(values);\n\t},\n\n\tstatics: {\n\t\tgetOptions: function(args) {\n\t\t\tvar options = args && Base.read(args);\n\t\t\treturn Base.set({\n\t\t\t\ttype: null,\n\t\t\t\ttolerance: paper.settings.hitTolerance,\n\t\t\t\tfill: !options,\n\t\t\t\tstroke: !options,\n\t\t\t\tsegments: !options,\n\t\t\t\thandles: false,\n\t\t\t\tends: false,\n\t\t\t\tposition: false,\n\t\t\t\tcenter: false,\n\t\t\t\tbounds: false,\n\t\t\t\tguides: false,\n\t\t\t\tselected: false\n\t\t\t}, options);\n\t\t}\n\t}\n});\n\nvar Segment = Base.extend({\n\t_class: 'Segment',\n\tbeans: true,\n\t_selection: 0,\n\n\tinitialize: function Segment(arg0, arg1, arg2, arg3, arg4, arg5) {\n\t\tvar count = arguments.length,\n\t\t\tpoint, handleIn, handleOut, selection;\n\t\tif (count > 0) {\n\t\t\tif (arg0 == null || typeof arg0 === 'object') {\n\t\t\t\tif (count === 1 && arg0 && 'point' in arg0) {\n\t\t\t\t\tpoint = arg0.point;\n\t\t\t\t\thandleIn = arg0.handleIn;\n\t\t\t\t\thandleOut = arg0.handleOut;\n\t\t\t\t\tselection = arg0.selection;\n\t\t\t\t} else {\n\t\t\t\t\tpoint = arg0;\n\t\t\t\t\thandleIn = arg1;\n\t\t\t\t\thandleOut = arg2;\n\t\t\t\t\tselection = arg3;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpoint = [ arg0, arg1 ];\n\t\t\t\thandleIn = arg2 !== undefined ? [ arg2, arg3 ] : null;\n\t\t\t\thandleOut = arg4 !== undefined ? [ arg4, arg5 ] : null;\n\t\t\t}\n\t\t}\n\t\tnew SegmentPoint(point, this, '_point');\n\t\tnew SegmentPoint(handleIn, this, '_handleIn');\n\t\tnew SegmentPoint(handleOut, this, '_handleOut');\n\t\tif (selection)\n\t\t\tthis.setSelection(selection);\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\tvar point = this._point,\n\t\t\tselection = this._selection,\n\t\t\tobj = selection || this.hasHandles()\n\t\t\t\t\t? [point, this._handleIn, this._handleOut]\n\t\t\t\t\t: point;\n\t\tif (selection)\n\t\t\tobj.push(selection);\n\t\treturn Base.serialize(obj, options, true, dictionary);\n\t},\n\n\t_changed: function(point) {\n\t\tvar path = this._path;\n\t\tif (!path)\n\t\t\treturn;\n\t\tvar curves = path._curves,\n\t\t\tindex = this._index,\n\t\t\tcurve;\n\t\tif (curves) {\n\t\t\tif ((!point || point === this._point || point === this._handleIn)\n\t\t\t\t\t&& (curve = index > 0 ? curves[index - 1] : path._closed\n\t\t\t\t\t\t? curves[curves.length - 1] : null))\n\t\t\t\tcurve._changed();\n\t\t\tif ((!point || point === this._point || point === this._handleOut)\n\t\t\t\t\t&& (curve = curves[index]))\n\t\t\t\tcurve._changed();\n\t\t}\n\t\tpath._changed(25);\n\t},\n\n\tgetPoint: function() {\n\t\treturn this._point;\n\t},\n\n\tsetPoint: function() {\n\t\tthis._point.set(Point.read(arguments));\n\t},\n\n\tgetHandleIn: function() {\n\t\treturn this._handleIn;\n\t},\n\n\tsetHandleIn: function() {\n\t\tthis._handleIn.set(Point.read(arguments));\n\t},\n\n\tgetHandleOut: function() {\n\t\treturn this._handleOut;\n\t},\n\n\tsetHandleOut: function() {\n\t\tthis._handleOut.set(Point.read(arguments));\n\t},\n\n\thasHandles: function() {\n\t\treturn !this._handleIn.isZero() || !this._handleOut.isZero();\n\t},\n\n\tisSmooth: function() {\n\t\tvar handleIn = this._handleIn,\n\t\t\thandleOut = this._handleOut;\n\t\treturn !handleIn.isZero() && !handleOut.isZero()\n\t\t\t\t&& handleIn.isCollinear(handleOut);\n\t},\n\n\tclearHandles: function() {\n\t\tthis._handleIn._set(0, 0);\n\t\tthis._handleOut._set(0, 0);\n\t},\n\n\tgetSelection: function() {\n\t\treturn this._selection;\n\t},\n\n\tsetSelection: function(selection) {\n\t\tvar oldSelection = this._selection,\n\t\t\tpath = this._path;\n\t\tthis._selection = selection = selection || 0;\n\t\tif (path && selection !== oldSelection) {\n\t\t\tpath._updateSelection(this, oldSelection, selection);\n\t\t\tpath._changed(129);\n\t\t}\n\t},\n\n\t_changeSelection: function(flag, selected) {\n\t\tvar selection = this._selection;\n\t\tthis.setSelection(selected ? selection | flag : selection & ~flag);\n\t},\n\n\tisSelected: function() {\n\t\treturn !!(this._selection & 7);\n\t},\n\n\tsetSelected: function(selected) {\n\t\tthis._changeSelection(7, selected);\n\t},\n\n\tgetIndex: function() {\n\t\treturn this._index !== undefined ? this._index : null;\n\t},\n\n\tgetPath: function() {\n\t\treturn this._path || null;\n\t},\n\n\tgetCurve: function() {\n\t\tvar path = this._path,\n\t\t\tindex = this._index;\n\t\tif (path) {\n\t\t\tif (index > 0 && !path._closed\n\t\t\t\t\t&& index === path._segments.length - 1)\n\t\t\t\tindex--;\n\t\t\treturn path.getCurves()[index] || null;\n\t\t}\n\t\treturn null;\n\t},\n\n\tgetLocation: function() {\n\t\tvar curve = this.getCurve();\n\t\treturn curve\n\t\t\t\t? new CurveLocation(curve, this === curve._segment1 ? 0 : 1)\n\t\t\t\t: null;\n\t},\n\n\tgetNext: function() {\n\t\tvar segments = this._path && this._path._segments;\n\t\treturn segments && (segments[this._index + 1]\n\t\t\t\t|| this._path._closed && segments[0]) || null;\n\t},\n\n\tsmooth: function(options, _first, _last) {\n\t\tvar opts = options || {},\n\t\t\ttype = opts.type,\n\t\t\tfactor = opts.factor,\n\t\t\tprev = this.getPrevious(),\n\t\t\tnext = this.getNext(),\n\t\t\tp0 = (prev || this)._point,\n\t\t\tp1 = this._point,\n\t\t\tp2 = (next || this)._point,\n\t\t\td1 = p0.getDistance(p1),\n\t\t\td2 = p1.getDistance(p2);\n\t\tif (!type || type === 'catmull-rom') {\n\t\t\tvar a = factor === undefined ? 0.5 : factor,\n\t\t\t\td1_a = Math.pow(d1, a),\n\t\t\t\td1_2a = d1_a * d1_a,\n\t\t\t\td2_a = Math.pow(d2, a),\n\t\t\t\td2_2a = d2_a * d2_a;\n\t\t\tif (!_first && prev) {\n\t\t\t\tvar A = 2 * d2_2a + 3 * d2_a * d1_a + d1_2a,\n\t\t\t\t\tN = 3 * d2_a * (d2_a + d1_a);\n\t\t\t\tthis.setHandleIn(N !== 0\n\t\t\t\t\t? new Point(\n\t\t\t\t\t\t(d2_2a * p0._x + A * p1._x - d1_2a * p2._x) / N - p1._x,\n\t\t\t\t\t\t(d2_2a * p0._y + A * p1._y - d1_2a * p2._y) / N - p1._y)\n\t\t\t\t\t: new Point());\n\t\t\t}\n\t\t\tif (!_last && next) {\n\t\t\t\tvar A = 2 * d1_2a + 3 * d1_a * d2_a + d2_2a,\n\t\t\t\t\tN = 3 * d1_a * (d1_a + d2_a);\n\t\t\t\tthis.setHandleOut(N !== 0\n\t\t\t\t\t? new Point(\n\t\t\t\t\t\t(d1_2a * p2._x + A * p1._x - d2_2a * p0._x) / N - p1._x,\n\t\t\t\t\t\t(d1_2a * p2._y + A * p1._y - d2_2a * p0._y) / N - p1._y)\n\t\t\t\t\t: new Point());\n\t\t\t}\n\t\t} else if (type === 'geometric') {\n\t\t\tif (prev && next) {\n\t\t\t\tvar vector = p0.subtract(p2),\n\t\t\t\t\tt = factor === undefined ? 0.4 : factor,\n\t\t\t\t\tk = t * d1 / (d1 + d2);\n\t\t\t\tif (!_first)\n\t\t\t\t\tthis.setHandleIn(vector.multiply(k));\n\t\t\t\tif (!_last)\n\t\t\t\t\tthis.setHandleOut(vector.multiply(k - t));\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('Smoothing method \\'' + type + '\\' not supported.');\n\t\t}\n\t},\n\n\tgetPrevious: function() {\n\t\tvar segments = this._path && this._path._segments;\n\t\treturn segments && (segments[this._index - 1]\n\t\t\t\t|| this._path._closed && segments[segments.length - 1]) || null;\n\t},\n\n\tisFirst: function() {\n\t\treturn !this._index;\n\t},\n\n\tisLast: function() {\n\t\tvar path = this._path;\n\t\treturn path && this._index === path._segments.length - 1 || false;\n\t},\n\n\treverse: function() {\n\t\tvar handleIn = this._handleIn,\n\t\t\thandleOut = this._handleOut,\n\t\t\ttmp = handleIn.clone();\n\t\thandleIn.set(handleOut);\n\t\thandleOut.set(tmp);\n\t},\n\n\treversed: function() {\n\t\treturn new Segment(this._point, this._handleOut, this._handleIn);\n\t},\n\n\tremove: function() {\n\t\treturn this._path ? !!this._path.removeSegment(this._index) : false;\n\t},\n\n\tclone: function() {\n\t\treturn new Segment(this._point, this._handleIn, this._handleOut);\n\t},\n\n\tequals: function(segment) {\n\t\treturn segment === this || segment && this._class === segment._class\n\t\t\t\t&& this._point.equals(segment._point)\n\t\t\t\t&& this._handleIn.equals(segment._handleIn)\n\t\t\t\t&& this._handleOut.equals(segment._handleOut)\n\t\t\t\t|| false;\n\t},\n\n\ttoString: function() {\n\t\tvar parts = [ 'point: ' + this._point ];\n\t\tif (!this._handleIn.isZero())\n\t\t\tparts.push('handleIn: ' + this._handleIn);\n\t\tif (!this._handleOut.isZero())\n\t\t\tparts.push('handleOut: ' + this._handleOut);\n\t\treturn '{ ' + parts.join(', ') + ' }';\n\t},\n\n\ttransform: function(matrix) {\n\t\tthis._transformCoordinates(matrix, new Array(6), true);\n\t\tthis._changed();\n\t},\n\n\tinterpolate: function(from, to, factor) {\n\t\tvar u = 1 - factor,\n\t\t\tv = factor,\n\t\t\tpoint1 = from._point,\n\t\t\tpoint2 = to._point,\n\t\t\thandleIn1 = from._handleIn,\n\t\t\thandleIn2 = to._handleIn,\n\t\t\thandleOut2 = to._handleOut,\n\t\t\thandleOut1 = from._handleOut;\n\t\tthis._point._set(\n\t\t\t\tu * point1._x + v * point2._x,\n\t\t\t\tu * point1._y + v * point2._y, true);\n\t\tthis._handleIn._set(\n\t\t\t\tu * handleIn1._x + v * handleIn2._x,\n\t\t\t\tu * handleIn1._y + v * handleIn2._y, true);\n\t\tthis._handleOut._set(\n\t\t\t\tu * handleOut1._x + v * handleOut2._x,\n\t\t\t\tu * handleOut1._y + v * handleOut2._y, true);\n\t\tthis._changed();\n\t},\n\n\t_transformCoordinates: function(matrix, coords, change) {\n\t\tvar point = this._point,\n\t\t\thandleIn = !change || !this._handleIn.isZero()\n\t\t\t\t\t? this._handleIn : null,\n\t\t\thandleOut = !change || !this._handleOut.isZero()\n\t\t\t\t\t? this._handleOut : null,\n\t\t\tx = point._x,\n\t\t\ty = point._y,\n\t\t\ti = 2;\n\t\tcoords[0] = x;\n\t\tcoords[1] = y;\n\t\tif (handleIn) {\n\t\t\tcoords[i++] = handleIn._x + x;\n\t\t\tcoords[i++] = handleIn._y + y;\n\t\t}\n\t\tif (handleOut) {\n\t\t\tcoords[i++] = handleOut._x + x;\n\t\t\tcoords[i++] = handleOut._y + y;\n\t\t}\n\t\tif (matrix) {\n\t\t\tmatrix._transformCoordinates(coords, coords, i / 2);\n\t\t\tx = coords[0];\n\t\t\ty = coords[1];\n\t\t\tif (change) {\n\t\t\t\tpoint._x = x;\n\t\t\t\tpoint._y = y;\n\t\t\t\ti = 2;\n\t\t\t\tif (handleIn) {\n\t\t\t\t\thandleIn._x = coords[i++] - x;\n\t\t\t\t\thandleIn._y = coords[i++] - y;\n\t\t\t\t}\n\t\t\t\tif (handleOut) {\n\t\t\t\t\thandleOut._x = coords[i++] - x;\n\t\t\t\t\thandleOut._y = coords[i++] - y;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!handleIn) {\n\t\t\t\t\tcoords[i++] = x;\n\t\t\t\t\tcoords[i++] = y;\n\t\t\t\t}\n\t\t\t\tif (!handleOut) {\n\t\t\t\t\tcoords[i++] = x;\n\t\t\t\t\tcoords[i++] = y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn coords;\n\t}\n});\n\nvar SegmentPoint = Point.extend({\n\tinitialize: function SegmentPoint(point, owner, key) {\n\t\tvar x, y,\n\t\t\tselected;\n\t\tif (!point) {\n\t\t\tx = y = 0;\n\t\t} else if ((x = point[0]) !== undefined) {\n\t\t\ty = point[1];\n\t\t} else {\n\t\t\tvar pt = point;\n\t\t\tif ((x = pt.x) === undefined) {\n\t\t\t\tpt = Point.read(arguments);\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\ty = pt.y;\n\t\t\tselected = pt.selected;\n\t\t}\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._owner = owner;\n\t\towner[key] = this;\n\t\tif (selected)\n\t\t\tthis.setSelected(true);\n\t},\n\n\t_set: function(x, y) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._owner._changed(this);\n\t\treturn this;\n\t},\n\n\tgetX: function() {\n\t\treturn this._x;\n\t},\n\n\tsetX: function(x) {\n\t\tthis._x = x;\n\t\tthis._owner._changed(this);\n\t},\n\n\tgetY: function() {\n\t\treturn this._y;\n\t},\n\n\tsetY: function(y) {\n\t\tthis._y = y;\n\t\tthis._owner._changed(this);\n\t},\n\n\tisZero: function() {\n\t\tvar isZero = Numerical.isZero;\n\t\treturn isZero(this._x) && isZero(this._y);\n\t},\n\n\tisSelected: function() {\n\t\treturn !!(this._owner._selection & this._getSelection());\n\t},\n\n\tsetSelected: function(selected) {\n\t\tthis._owner._changeSelection(this._getSelection(), selected);\n\t},\n\n\t_getSelection: function() {\n\t\tvar owner = this._owner;\n\t\treturn this === owner._point ? 1\n\t\t\t: this === owner._handleIn ? 2\n\t\t\t: this === owner._handleOut ? 4\n\t\t\t: 0;\n\t}\n});\n\nvar Curve = Base.extend({\n\t_class: 'Curve',\n\tbeans: true,\n\n\tinitialize: function Curve(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n\t\tvar count = arguments.length,\n\t\t\tseg1, seg2,\n\t\t\tpoint1, point2,\n\t\t\thandle1, handle2;\n\t\tif (count === 3) {\n\t\t\tthis._path = arg0;\n\t\t\tseg1 = arg1;\n\t\t\tseg2 = arg2;\n\t\t} else if (!count) {\n\t\t\tseg1 = new Segment();\n\t\t\tseg2 = new Segment();\n\t\t} else if (count === 1) {\n\t\t\tif ('segment1' in arg0) {\n\t\t\t\tseg1 = new Segment(arg0.segment1);\n\t\t\t\tseg2 = new Segment(arg0.segment2);\n\t\t\t} else if ('point1' in arg0) {\n\t\t\t\tpoint1 = arg0.point1;\n\t\t\t\thandle1 = arg0.handle1;\n\t\t\t\thandle2 = arg0.handle2;\n\t\t\t\tpoint2 = arg0.point2;\n\t\t\t} else if (Array.isArray(arg0)) {\n\t\t\t\tpoint1 = [arg0[0], arg0[1]];\n\t\t\t\tpoint2 = [arg0[6], arg0[7]];\n\t\t\t\thandle1 = [arg0[2] - arg0[0], arg0[3] - arg0[1]];\n\t\t\t\thandle2 = [arg0[4] - arg0[6], arg0[5] - arg0[7]];\n\t\t\t}\n\t\t} else if (count === 2) {\n\t\t\tseg1 = new Segment(arg0);\n\t\t\tseg2 = new Segment(arg1);\n\t\t} else if (count === 4) {\n\t\t\tpoint1 = arg0;\n\t\t\thandle1 = arg1;\n\t\t\thandle2 = arg2;\n\t\t\tpoint2 = arg3;\n\t\t} else if (count === 8) {\n\t\t\tpoint1 = [arg0, arg1];\n\t\t\tpoint2 = [arg6, arg7];\n\t\t\thandle1 = [arg2 - arg0, arg3 - arg1];\n\t\t\thandle2 = [arg4 - arg6, arg5 - arg7];\n\t\t}\n\t\tthis._segment1 = seg1 || new Segment(point1, null, handle1);\n\t\tthis._segment2 = seg2 || new Segment(point2, handle2, null);\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn Base.serialize(this.hasHandles()\n\t\t\t\t? [this.getPoint1(), this.getHandle1(), this.getHandle2(),\n\t\t\t\t\tthis.getPoint2()]\n\t\t\t\t: [this.getPoint1(), this.getPoint2()],\n\t\t\t\toptions, true, dictionary);\n\t},\n\n\t_changed: function() {\n\t\tthis._length = this._bounds = undefined;\n\t},\n\n\tclone: function() {\n\t\treturn new Curve(this._segment1, this._segment2);\n\t},\n\n\ttoString: function() {\n\t\tvar parts = [ 'point1: ' + this._segment1._point ];\n\t\tif (!this._segment1._handleOut.isZero())\n\t\t\tparts.push('handle1: ' + this._segment1._handleOut);\n\t\tif (!this._segment2._handleIn.isZero())\n\t\t\tparts.push('handle2: ' + this._segment2._handleIn);\n\t\tparts.push('point2: ' + this._segment2._point);\n\t\treturn '{ ' + parts.join(', ') + ' }';\n\t},\n\n\tclassify: function() {\n\t\treturn Curve.classify(this.getValues());\n\t},\n\n\tremove: function() {\n\t\tvar removed = false;\n\t\tif (this._path) {\n\t\t\tvar segment2 = this._segment2,\n\t\t\t\thandleOut = segment2._handleOut;\n\t\t\tremoved = segment2.remove();\n\t\t\tif (removed)\n\t\t\t\tthis._segment1._handleOut.set(handleOut);\n\t\t}\n\t\treturn removed;\n\t},\n\n\tgetPoint1: function() {\n\t\treturn this._segment1._point;\n\t},\n\n\tsetPoint1: function() {\n\t\tthis._segment1._point.set(Point.read(arguments));\n\t},\n\n\tgetPoint2: function() {\n\t\treturn this._segment2._point;\n\t},\n\n\tsetPoint2: function() {\n\t\tthis._segment2._point.set(Point.read(arguments));\n\t},\n\n\tgetHandle1: function() {\n\t\treturn this._segment1._handleOut;\n\t},\n\n\tsetHandle1: function() {\n\t\tthis._segment1._handleOut.set(Point.read(arguments));\n\t},\n\n\tgetHandle2: function() {\n\t\treturn this._segment2._handleIn;\n\t},\n\n\tsetHandle2: function() {\n\t\tthis._segment2._handleIn.set(Point.read(arguments));\n\t},\n\n\tgetSegment1: function() {\n\t\treturn this._segment1;\n\t},\n\n\tgetSegment2: function() {\n\t\treturn this._segment2;\n\t},\n\n\tgetPath: function() {\n\t\treturn this._path;\n\t},\n\n\tgetIndex: function() {\n\t\treturn this._segment1._index;\n\t},\n\n\tgetNext: function() {\n\t\tvar curves = this._path && this._path._curves;\n\t\treturn curves && (curves[this._segment1._index + 1]\n\t\t\t\t|| this._path._closed && curves[0]) || null;\n\t},\n\n\tgetPrevious: function() {\n\t\tvar curves = this._path && this._path._curves;\n\t\treturn curves && (curves[this._segment1._index - 1]\n\t\t\t\t|| this._path._closed && curves[curves.length - 1]) || null;\n\t},\n\n\tisFirst: function() {\n\t\treturn !this._segment1._index;\n\t},\n\n\tisLast: function() {\n\t\tvar path = this._path;\n\t\treturn path && this._segment1._index === path._curves.length - 1\n\t\t\t\t|| false;\n\t},\n\n\tisSelected: function() {\n\t\treturn this.getPoint1().isSelected()\n\t\t\t\t&& this.getHandle1().isSelected()\n\t\t\t\t&& this.getHandle2().isSelected()\n\t\t\t\t&& this.getPoint2().isSelected();\n\t},\n\n\tsetSelected: function(selected) {\n\t\tthis.getPoint1().setSelected(selected);\n\t\tthis.getHandle1().setSelected(selected);\n\t\tthis.getHandle2().setSelected(selected);\n\t\tthis.getPoint2().setSelected(selected);\n\t},\n\n\tgetValues: function(matrix) {\n\t\treturn Curve.getValues(this._segment1, this._segment2, matrix);\n\t},\n\n\tgetPoints: function() {\n\t\tvar coords = this.getValues(),\n\t\t\tpoints = [];\n\t\tfor (var i = 0; i < 8; i += 2)\n\t\t\tpoints.push(new Point(coords[i], coords[i + 1]));\n\t\treturn points;\n\t}\n}, {\n\tgetLength: function() {\n\t\tif (this._length == null)\n\t\t\tthis._length = Curve.getLength(this.getValues(), 0, 1);\n\t\treturn this._length;\n\t},\n\n\tgetArea: function() {\n\t\treturn Curve.getArea(this.getValues());\n\t},\n\n\tgetLine: function() {\n\t\treturn new Line(this._segment1._point, this._segment2._point);\n\t},\n\n\tgetPart: function(from, to) {\n\t\treturn new Curve(Curve.getPart(this.getValues(), from, to));\n\t},\n\n\tgetPartLength: function(from, to) {\n\t\treturn Curve.getLength(this.getValues(), from, to);\n\t},\n\n\tdivideAt: function(location) {\n\t\treturn this.divideAtTime(location && location.curve === this\n\t\t\t\t? location.time : this.getTimeAt(location));\n\t},\n\n\tdivideAtTime: function(time, _setHandles) {\n\t\tvar tMin = 1e-8,\n\t\t\ttMax = 1 - tMin,\n\t\t\tres = null;\n\t\tif (time >= tMin && time <= tMax) {\n\t\t\tvar parts = Curve.subdivide(this.getValues(), time),\n\t\t\t\tleft = parts[0],\n\t\t\t\tright = parts[1],\n\t\t\t\tsetHandles = _setHandles || this.hasHandles(),\n\t\t\t\tseg1 = this._segment1,\n\t\t\t\tseg2 = this._segment2,\n\t\t\t\tpath = this._path;\n\t\t\tif (setHandles) {\n\t\t\t\tseg1._handleOut._set(left[2] - left[0], left[3] - left[1]);\n\t\t\t\tseg2._handleIn._set(right[4] - right[6],right[5] - right[7]);\n\t\t\t}\n\t\t\tvar x = left[6], y = left[7],\n\t\t\t\tsegment = new Segment(new Point(x, y),\n\t\t\t\t\t\tsetHandles && new Point(left[4] - x, left[5] - y),\n\t\t\t\t\t\tsetHandles && new Point(right[2] - x, right[3] - y));\n\t\t\tif (path) {\n\t\t\t\tpath.insert(seg1._index + 1, segment);\n\t\t\t\tres = this.getNext();\n\t\t\t} else {\n\t\t\t\tthis._segment2 = segment;\n\t\t\t\tthis._changed();\n\t\t\t\tres = new Curve(segment, seg2);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t},\n\n\tsplitAt: function(location) {\n\t\tvar path = this._path;\n\t\treturn path ? path.splitAt(location) : null;\n\t},\n\n\tsplitAtTime: function(time) {\n\t\treturn this.splitAt(this.getLocationAtTime(time));\n\t},\n\n\tdivide: function(offset, isTime) {\n\t\treturn this.divideAtTime(offset === undefined ? 0.5 : isTime ? offset\n\t\t\t\t: this.getTimeAt(offset));\n\t},\n\n\tsplit: function(offset, isTime) {\n\t\treturn this.splitAtTime(offset === undefined ? 0.5 : isTime ? offset\n\t\t\t\t: this.getTimeAt(offset));\n\t},\n\n\treversed: function() {\n\t\treturn new Curve(this._segment2.reversed(), this._segment1.reversed());\n\t},\n\n\tclearHandles: function() {\n\t\tthis._segment1._handleOut._set(0, 0);\n\t\tthis._segment2._handleIn._set(0, 0);\n\t},\n\nstatics: {\n\tgetValues: function(segment1, segment2, matrix, straight) {\n\t\tvar p1 = segment1._point,\n\t\t\th1 = segment1._handleOut,\n\t\t\th2 = segment2._handleIn,\n\t\t\tp2 = segment2._point,\n\t\t\tx1 = p1.x, y1 = p1.y,\n\t\t\tx2 = p2.x, y2 = p2.y,\n\t\t\tvalues = straight\n\t\t\t\t? [ x1, y1, x1, y1, x2, y2, x2, y2 ]\n\t\t\t\t: [\n\t\t\t\t\tx1, y1,\n\t\t\t\t\tx1 + h1._x, y1 + h1._y,\n\t\t\t\t\tx2 + h2._x, y2 + h2._y,\n\t\t\t\t\tx2, y2\n\t\t\t\t];\n\t\tif (matrix)\n\t\t\tmatrix._transformCoordinates(values, values, 4);\n\t\treturn values;\n\t},\n\n\tsubdivide: function(v, t) {\n\t\tvar x0 = v[0], y0 = v[1],\n\t\t\tx1 = v[2], y1 = v[3],\n\t\t\tx2 = v[4], y2 = v[5],\n\t\t\tx3 = v[6], y3 = v[7];\n\t\tif (t === undefined)\n\t\t\tt = 0.5;\n\t\tvar u = 1 - t,\n\t\t\tx4 = u * x0 + t * x1, y4 = u * y0 + t * y1,\n\t\t\tx5 = u * x1 + t * x2, y5 = u * y1 + t * y2,\n\t\t\tx6 = u * x2 + t * x3, y6 = u * y2 + t * y3,\n\t\t\tx7 = u * x4 + t * x5, y7 = u * y4 + t * y5,\n\t\t\tx8 = u * x5 + t * x6, y8 = u * y5 + t * y6,\n\t\t\tx9 = u * x7 + t * x8, y9 = u * y7 + t * y8;\n\t\treturn [\n\t\t\t[x0, y0, x4, y4, x7, y7, x9, y9],\n\t\t\t[x9, y9, x8, y8, x6, y6, x3, y3]\n\t\t];\n\t},\n\n\tgetMonoCurves: function(v, dir) {\n\t\tvar curves = [],\n\t\t\tio = dir ? 0 : 1,\n\t\t\to0 = v[io + 0],\n\t\t\to1 = v[io + 2],\n\t\t\to2 = v[io + 4],\n\t\t\to3 = v[io + 6];\n\t\tif ((o0 >= o1) === (o1 >= o2) && (o1 >= o2) === (o2 >= o3)\n\t\t\t\t|| Curve.isStraight(v)) {\n\t\t\tcurves.push(v);\n\t\t} else {\n\t\t\tvar a = 3 * (o1 - o2) - o0 + o3,\n\t\t\t\tb = 2 * (o0 + o2) - 4 * o1,\n\t\t\t\tc = o1 - o0,\n\t\t\t\ttMin = 1e-8,\n\t\t\t\ttMax = 1 - tMin,\n\t\t\t\troots = [],\n\t\t\t\tn = Numerical.solveQuadratic(a, b, c, roots, tMin, tMax);\n\t\t\tif (!n) {\n\t\t\t\tcurves.push(v);\n\t\t\t} else {\n\t\t\t\troots.sort();\n\t\t\t\tvar t = roots[0],\n\t\t\t\t\tparts = Curve.subdivide(v, t);\n\t\t\t\tcurves.push(parts[0]);\n\t\t\t\tif (n > 1) {\n\t\t\t\t\tt = (roots[1] - t) / (1 - t);\n\t\t\t\t\tparts = Curve.subdivide(parts[1], t);\n\t\t\t\t\tcurves.push(parts[0]);\n\t\t\t\t}\n\t\t\t\tcurves.push(parts[1]);\n\t\t\t}\n\t\t}\n\t\treturn curves;\n\t},\n\n\tsolveCubic: function (v, coord, val, roots, min, max) {\n\t\tvar v0 = v[coord],\n\t\t\tv1 = v[coord + 2],\n\t\t\tv2 = v[coord + 4],\n\t\t\tv3 = v[coord + 6],\n\t\t\tres = 0;\n\t\tif (  !(v0 < val && v3 < val && v1 < val && v2 < val ||\n\t\t\t\tv0 > val && v3 > val && v1 > val && v2 > val)) {\n\t\t\tvar c = 3 * (v1 - v0),\n\t\t\t\tb = 3 * (v2 - v1) - c,\n\t\t\t\ta = v3 - v0 - c - b;\n\t\t\tres = Numerical.solveCubic(a, b, c, v0 - val, roots, min, max);\n\t\t}\n\t\treturn res;\n\t},\n\n\tgetTimeOf: function(v, point) {\n\t\tvar p0 = new Point(v[0], v[1]),\n\t\t\tp3 = new Point(v[6], v[7]),\n\t\t\tepsilon = 1e-12,\n\t\t\tgeomEpsilon = 1e-7,\n\t\t\tt = point.isClose(p0, epsilon) ? 0\n\t\t\t  : point.isClose(p3, epsilon) ? 1\n\t\t\t  : null;\n\t\tif (t === null) {\n\t\t\tvar coords = [point.x, point.y],\n\t\t\t\troots = [];\n\t\t\tfor (var c = 0; c < 2; c++) {\n\t\t\t\tvar count = Curve.solveCubic(v, c, coords[c], roots, 0, 1);\n\t\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\t\tvar u = roots[i];\n\t\t\t\t\tif (point.isClose(Curve.getPoint(v, u), geomEpsilon))\n\t\t\t\t\t\treturn u;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn point.isClose(p0, geomEpsilon) ? 0\n\t\t\t : point.isClose(p3, geomEpsilon) ? 1\n\t\t\t : null;\n\t},\n\n\tgetNearestTime: function(v, point) {\n\t\tif (Curve.isStraight(v)) {\n\t\t\tvar x0 = v[0], y0 = v[1],\n\t\t\t\tx3 = v[6], y3 = v[7],\n\t\t\t\tvx = x3 - x0, vy = y3 - y0,\n\t\t\t\tdet = vx * vx + vy * vy;\n\t\t\tif (det === 0)\n\t\t\t\treturn 0;\n\t\t\tvar u = ((point.x - x0) * vx + (point.y - y0) * vy) / det;\n\t\t\treturn u < 1e-12 ? 0\n\t\t\t\t : u > 0.999999999999 ? 1\n\t\t\t\t : Curve.getTimeOf(v,\n\t\t\t\t\tnew Point(x0 + u * vx, y0 + u * vy));\n\t\t}\n\n\t\tvar count = 100,\n\t\t\tminDist = Infinity,\n\t\t\tminT = 0;\n\n\t\tfunction refine(t) {\n\t\t\tif (t >= 0 && t <= 1) {\n\t\t\t\tvar dist = point.getDistance(Curve.getPoint(v, t), true);\n\t\t\t\tif (dist < minDist) {\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tminT = t;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= count; i++)\n\t\t\trefine(i / count);\n\n\t\tvar step = 1 / (count * 2);\n\t\twhile (step > 1e-8) {\n\t\t\tif (!refine(minT - step) && !refine(minT + step))\n\t\t\t\tstep /= 2;\n\t\t}\n\t\treturn minT;\n\t},\n\n\tgetPart: function(v, from, to) {\n\t\tvar flip = from > to;\n\t\tif (flip) {\n\t\t\tvar tmp = from;\n\t\t\tfrom = to;\n\t\t\tto = tmp;\n\t\t}\n\t\tif (from > 0)\n\t\t\tv = Curve.subdivide(v, from)[1];\n\t\tif (to < 1)\n\t\t\tv = Curve.subdivide(v, (to - from) / (1 - from))[0];\n\t\treturn flip\n\t\t\t\t? [v[6], v[7], v[4], v[5], v[2], v[3], v[0], v[1]]\n\t\t\t\t: v;\n\t},\n\n\tisFlatEnough: function(v, flatness) {\n\t\tvar x0 = v[0], y0 = v[1],\n\t\t\tx1 = v[2], y1 = v[3],\n\t\t\tx2 = v[4], y2 = v[5],\n\t\t\tx3 = v[6], y3 = v[7],\n\t\t\tux = 3 * x1 - 2 * x0 - x3,\n\t\t\tuy = 3 * y1 - 2 * y0 - y3,\n\t\t\tvx = 3 * x2 - 2 * x3 - x0,\n\t\t\tvy = 3 * y2 - 2 * y3 - y0;\n\t\treturn Math.max(ux * ux, vx * vx) + Math.max(uy * uy, vy * vy)\n\t\t\t\t<= 16 * flatness * flatness;\n\t},\n\n\tgetArea: function(v) {\n\t\tvar x0 = v[0], y0 = v[1],\n\t\t\tx1 = v[2], y1 = v[3],\n\t\t\tx2 = v[4], y2 = v[5],\n\t\t\tx3 = v[6], y3 = v[7];\n\t\treturn 3 * ((y3 - y0) * (x1 + x2) - (x3 - x0) * (y1 + y2)\n\t\t\t\t+ y1 * (x0 - x2) - x1 * (y0 - y2)\n\t\t\t\t+ y3 * (x2 + x0 / 3) - x3 * (y2 + y0 / 3)) / 20;\n\t},\n\n\tgetBounds: function(v) {\n\t\tvar min = v.slice(0, 2),\n\t\t\tmax = min.slice(),\n\t\t\troots = [0, 0];\n\t\tfor (var i = 0; i < 2; i++)\n\t\t\tCurve._addBounds(v[i], v[i + 2], v[i + 4], v[i + 6],\n\t\t\t\t\ti, 0, min, max, roots);\n\t\treturn new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\t},\n\n\t_addBounds: function(v0, v1, v2, v3, coord, padding, min, max, roots) {\n\t\tfunction add(value, padding) {\n\t\t\tvar left = value - padding,\n\t\t\t\tright = value + padding;\n\t\t\tif (left < min[coord])\n\t\t\t\tmin[coord] = left;\n\t\t\tif (right > max[coord])\n\t\t\t\tmax[coord] = right;\n\t\t}\n\n\t\tpadding /= 2;\n\t\tvar minPad = min[coord] - padding,\n\t\t\tmaxPad = max[coord] + padding;\n\t\tif (    v0 < minPad || v1 < minPad || v2 < minPad || v3 < minPad ||\n\t\t\t\tv0 > maxPad || v1 > maxPad || v2 > maxPad || v3 > maxPad) {\n\t\t\tif (v1 < v0 != v1 < v3 && v2 < v0 != v2 < v3) {\n\t\t\t\tadd(v0, padding);\n\t\t\t\tadd(v3, padding);\n\t\t\t} else {\n\t\t\t\tvar a = 3 * (v1 - v2) - v0 + v3,\n\t\t\t\t\tb = 2 * (v0 + v2) - 4 * v1,\n\t\t\t\t\tc = v1 - v0,\n\t\t\t\t\tcount = Numerical.solveQuadratic(a, b, c, roots),\n\t\t\t\t\ttMin = 1e-8,\n\t\t\t\t\ttMax = 1 - tMin;\n\t\t\t\tadd(v3, 0);\n\t\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\t\tvar t = roots[i],\n\t\t\t\t\t\tu = 1 - t;\n\t\t\t\t\tif (tMin <= t && t <= tMax)\n\t\t\t\t\t\tadd(u * u * u * v0\n\t\t\t\t\t\t\t+ 3 * u * u * t * v1\n\t\t\t\t\t\t\t+ 3 * u * t * t * v2\n\t\t\t\t\t\t\t+ t * t * t * v3,\n\t\t\t\t\t\t\tpadding);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}}, Base.each(\n\t['getBounds', 'getStrokeBounds', 'getHandleBounds'],\n\tfunction(name) {\n\t\tthis[name] = function() {\n\t\t\tif (!this._bounds)\n\t\t\t\tthis._bounds = {};\n\t\t\tvar bounds = this._bounds[name];\n\t\t\tif (!bounds) {\n\t\t\t\tbounds = this._bounds[name] = Path[name](\n\t\t\t\t\t\t[this._segment1, this._segment2], false, this._path);\n\t\t\t}\n\t\t\treturn bounds.clone();\n\t\t};\n\t},\n{\n\n}), Base.each({\n\tisStraight: function(p1, h1, h2, p2) {\n\t\tif (h1.isZero() && h2.isZero()) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tvar v = p2.subtract(p1);\n\t\t\tif (v.isZero()) {\n\t\t\t\treturn false;\n\t\t\t} else if (v.isCollinear(h1) && v.isCollinear(h2)) {\n\t\t\t\tvar l = new Line(p1, p2),\n\t\t\t\t\tepsilon = 1e-7;\n\t\t\t\tif (l.getDistance(p1.add(h1)) < epsilon &&\n\t\t\t\t\tl.getDistance(p2.add(h2)) < epsilon) {\n\t\t\t\t\tvar div = v.dot(v),\n\t\t\t\t\t\ts1 = v.dot(h1) / div,\n\t\t\t\t\t\ts2 = v.dot(h2) / div;\n\t\t\t\t\treturn s1 >= 0 && s1 <= 1 && s2 <= 0 && s2 >= -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\tisLinear: function(p1, h1, h2, p2) {\n\t\tvar third = p2.subtract(p1).divide(3);\n\t\treturn h1.equals(third) && h2.negate().equals(third);\n\t}\n}, function(test, name) {\n\tthis[name] = function(epsilon) {\n\t\tvar seg1 = this._segment1,\n\t\t\tseg2 = this._segment2;\n\t\treturn test(seg1._point, seg1._handleOut, seg2._handleIn, seg2._point,\n\t\t\t\tepsilon);\n\t};\n\n\tthis.statics[name] = function(v, epsilon) {\n\t\tvar x0 = v[0], y0 = v[1],\n\t\t\tx3 = v[6], y3 = v[7];\n\t\treturn test(\n\t\t\t\tnew Point(x0, y0),\n\t\t\t\tnew Point(v[2] - x0, v[3] - y0),\n\t\t\t\tnew Point(v[4] - x3, v[5] - y3),\n\t\t\t\tnew Point(x3, y3), epsilon);\n\t};\n}, {\n\tstatics: {},\n\n\thasHandles: function() {\n\t\treturn !this._segment1._handleOut.isZero()\n\t\t\t\t|| !this._segment2._handleIn.isZero();\n\t},\n\n\thasLength: function(epsilon) {\n\t\treturn (!this.getPoint1().equals(this.getPoint2()) || this.hasHandles())\n\t\t\t\t&& this.getLength() > (epsilon || 0);\n\t},\n\n\tisCollinear: function(curve) {\n\t\treturn curve && this.isStraight() && curve.isStraight()\n\t\t\t\t&& this.getLine().isCollinear(curve.getLine());\n\t},\n\n\tisHorizontal: function() {\n\t\treturn this.isStraight() && Math.abs(this.getTangentAtTime(0.5).y)\n\t\t\t\t< 1e-8;\n\t},\n\n\tisVertical: function() {\n\t\treturn this.isStraight() && Math.abs(this.getTangentAtTime(0.5).x)\n\t\t\t\t< 1e-8;\n\t}\n}), {\n\tbeans: false,\n\n\tgetLocationAt: function(offset, _isTime) {\n\t\treturn this.getLocationAtTime(\n\t\t\t\t_isTime ? offset : this.getTimeAt(offset));\n\t},\n\n\tgetLocationAtTime: function(t) {\n\t\treturn t != null && t >= 0 && t <= 1\n\t\t\t\t? new CurveLocation(this, t)\n\t\t\t\t: null;\n\t},\n\n\tgetTimeAt: function(offset, start) {\n\t\treturn Curve.getTimeAt(this.getValues(), offset, start);\n\t},\n\n\tgetParameterAt: '#getTimeAt',\n\n\tgetOffsetAtTime: function(t) {\n\t\treturn this.getPartLength(0, t);\n\t},\n\n\tgetLocationOf: function() {\n\t\treturn this.getLocationAtTime(this.getTimeOf(Point.read(arguments)));\n\t},\n\n\tgetOffsetOf: function() {\n\t\tvar loc = this.getLocationOf.apply(this, arguments);\n\t\treturn loc ? loc.getOffset() : null;\n\t},\n\n\tgetTimeOf: function() {\n\t\treturn Curve.getTimeOf(this.getValues(), Point.read(arguments));\n\t},\n\n\tgetParameterOf: '#getTimeOf',\n\n\tgetNearestLocation: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tvalues = this.getValues(),\n\t\t\tt = Curve.getNearestTime(values, point),\n\t\t\tpt = Curve.getPoint(values, t);\n\t\treturn new CurveLocation(this, t, pt, null, point.getDistance(pt));\n\t},\n\n\tgetNearestPoint: function() {\n\t\tvar loc = this.getNearestLocation.apply(this, arguments);\n\t\treturn loc ? loc.getPoint() : loc;\n\t}\n\n},\nnew function() {\n\tvar methods = ['getPoint', 'getTangent', 'getNormal', 'getWeightedTangent',\n\t\t'getWeightedNormal', 'getCurvature'];\n\treturn Base.each(methods,\n\t\tfunction(name) {\n\t\t\tthis[name + 'At'] = function(location, _isTime) {\n\t\t\t\tvar values = this.getValues();\n\t\t\t\treturn Curve[name](values, _isTime ? location\n\t\t\t\t\t\t: Curve.getTimeAt(values, location));\n\t\t\t};\n\n\t\t\tthis[name + 'AtTime'] = function(time) {\n\t\t\t\treturn Curve[name](this.getValues(), time);\n\t\t\t};\n\t\t}, {\n\t\t\tstatics: {\n\t\t\t\t_evaluateMethods: methods\n\t\t\t}\n\t\t}\n\t);\n},\nnew function() {\n\n\tfunction getLengthIntegrand(v) {\n\t\tvar x0 = v[0], y0 = v[1],\n\t\t\tx1 = v[2], y1 = v[3],\n\t\t\tx2 = v[4], y2 = v[5],\n\t\t\tx3 = v[6], y3 = v[7],\n\n\t\t\tax = 9 * (x1 - x2) + 3 * (x3 - x0),\n\t\t\tbx = 6 * (x0 + x2) - 12 * x1,\n\t\t\tcx = 3 * (x1 - x0),\n\n\t\t\tay = 9 * (y1 - y2) + 3 * (y3 - y0),\n\t\t\tby = 6 * (y0 + y2) - 12 * y1,\n\t\t\tcy = 3 * (y1 - y0);\n\n\t\treturn function(t) {\n\t\t\tvar dx = (ax * t + bx) * t + cx,\n\t\t\t\tdy = (ay * t + by) * t + cy;\n\t\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t\t};\n\t}\n\n\tfunction getIterations(a, b) {\n\t\treturn Math.max(2, Math.min(16, Math.ceil(Math.abs(b - a) * 32)));\n\t}\n\n\tfunction evaluate(v, t, type, normalized) {\n\t\tif (t == null || t < 0 || t > 1)\n\t\t\treturn null;\n\t\tvar x0 = v[0], y0 = v[1],\n\t\t\tx1 = v[2], y1 = v[3],\n\t\t\tx2 = v[4], y2 = v[5],\n\t\t\tx3 = v[6], y3 = v[7],\n\t\t\tisZero = Numerical.isZero;\n\t\tif (isZero(x1 - x0) && isZero(y1 - y0)) {\n\t\t\tx1 = x0;\n\t\t\ty1 = y0;\n\t\t}\n\t\tif (isZero(x2 - x3) && isZero(y2 - y3)) {\n\t\t\tx2 = x3;\n\t\t\ty2 = y3;\n\t\t}\n\t\tvar cx = 3 * (x1 - x0),\n\t\t\tbx = 3 * (x2 - x1) - cx,\n\t\t\tax = x3 - x0 - cx - bx,\n\t\t\tcy = 3 * (y1 - y0),\n\t\t\tby = 3 * (y2 - y1) - cy,\n\t\t\tay = y3 - y0 - cy - by,\n\t\t\tx, y;\n\t\tif (type === 0) {\n\t\t\tx = t === 0 ? x0 : t === 1 ? x3\n\t\t\t\t\t: ((ax * t + bx) * t + cx) * t + x0;\n\t\t\ty = t === 0 ? y0 : t === 1 ? y3\n\t\t\t\t\t: ((ay * t + by) * t + cy) * t + y0;\n\t\t} else {\n\t\t\tvar tMin = 1e-8,\n\t\t\t\ttMax = 1 - tMin;\n\t\t\tif (t < tMin) {\n\t\t\t\tx = cx;\n\t\t\t\ty = cy;\n\t\t\t} else if (t > tMax) {\n\t\t\t\tx = 3 * (x3 - x2);\n\t\t\t\ty = 3 * (y3 - y2);\n\t\t\t} else {\n\t\t\t\tx = (3 * ax * t + 2 * bx) * t + cx;\n\t\t\t\ty = (3 * ay * t + 2 * by) * t + cy;\n\t\t\t}\n\t\t\tif (normalized) {\n\t\t\t\tif (x === 0 && y === 0 && (t < tMin || t > tMax)) {\n\t\t\t\t\tx = x2 - x1;\n\t\t\t\t\ty = y2 - y1;\n\t\t\t\t}\n\t\t\t\tvar len = Math.sqrt(x * x + y * y);\n\t\t\t\tif (len) {\n\t\t\t\t\tx /= len;\n\t\t\t\t\ty /= len;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (type === 3) {\n\t\t\t\tvar x2 = 6 * ax * t + 2 * bx,\n\t\t\t\t\ty2 = 6 * ay * t + 2 * by,\n\t\t\t\t\td = Math.pow(x * x + y * y, 3 / 2);\n\t\t\t\tx = d !== 0 ? (x * y2 - y * x2) / d : 0;\n\t\t\t\ty = 0;\n\t\t\t}\n\t\t}\n\t\treturn type === 2 ? new Point(y, -x) : new Point(x, y);\n\t}\n\n\treturn { statics: {\n\n\t\tclassify: function(v) {\n\n\t\t\tvar x0 = v[0], y0 = v[1],\n\t\t\t\tx1 = v[2], y1 = v[3],\n\t\t\t\tx2 = v[4], y2 = v[5],\n\t\t\t\tx3 = v[6], y3 = v[7],\n\t\t\t\ta1 = x0 * (y3 - y2) + y0 * (x2 - x3) + x3 * y2 - y3 * x2,\n\t\t\t\ta2 = x1 * (y0 - y3) + y1 * (x3 - x0) + x0 * y3 - y0 * x3,\n\t\t\t\ta3 = x2 * (y1 - y0) + y2 * (x0 - x1) + x1 * y0 - y1 * x0,\n\t\t\t\td3 = 3 * a3,\n\t\t\t\td2 = d3 - a2,\n\t\t\t\td1 = d2 - a2 + a1,\n\t\t\t\tl = Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3),\n\t\t\t\ts = l !== 0 ? 1 / l : 0,\n\t\t\t\tisZero = Numerical.isZero,\n\t\t\t\tserpentine = 'serpentine';\n\t\t\td1 *= s;\n\t\t\td2 *= s;\n\t\t\td3 *= s;\n\n\t\t\tfunction type(type, t1, t2) {\n\t\t\t\tvar hasRoots = t1 !== undefined,\n\t\t\t\t\tt1Ok = hasRoots && t1 > 0 && t1 < 1,\n\t\t\t\t\tt2Ok = hasRoots && t2 > 0 && t2 < 1;\n\t\t\t\tif (hasRoots && (!(t1Ok || t2Ok)\n\t\t\t\t\t\t|| type === 'loop' && !(t1Ok && t2Ok))) {\n\t\t\t\t\ttype = 'arch';\n\t\t\t\t\tt1Ok = t2Ok = false;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttype: type,\n\t\t\t\t\troots: t1Ok || t2Ok\n\t\t\t\t\t\t\t? t1Ok && t2Ok\n\t\t\t\t\t\t\t\t? t1 < t2 ? [t1, t2] : [t2, t1]\n\t\t\t\t\t\t\t\t: [t1Ok ? t1 : t2]\n\t\t\t\t\t\t\t: null\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (isZero(d1)) {\n\t\t\t\treturn isZero(d2)\n\t\t\t\t\t\t? type(isZero(d3) ? 'line' : 'quadratic')\n\t\t\t\t\t\t: type(serpentine, d3 / (3 * d2));\n\t\t\t}\n\t\t\tvar d = 3 * d2 * d2 - 4 * d1 * d3;\n\t\t\tif (isZero(d)) {\n\t\t\t\treturn type('cusp', d2 / (2 * d1));\n\t\t\t}\n\t\t\tvar f1 = d > 0 ? Math.sqrt(d / 3) : Math.sqrt(-d),\n\t\t\t\tf2 = 2 * d1;\n\t\t\treturn type(d > 0 ? serpentine : 'loop',\n\t\t\t\t\t(d2 + f1) / f2,\n\t\t\t\t\t(d2 - f1) / f2);\n\t\t},\n\n\t\tgetLength: function(v, a, b, ds) {\n\t\t\tif (a === undefined)\n\t\t\t\ta = 0;\n\t\t\tif (b === undefined)\n\t\t\t\tb = 1;\n\t\t\tif (Curve.isStraight(v)) {\n\t\t\t\tvar c = v;\n\t\t\t\tif (b < 1) {\n\t\t\t\t\tc = Curve.subdivide(c, b)[0];\n\t\t\t\t\ta /= b;\n\t\t\t\t}\n\t\t\t\tif (a > 0) {\n\t\t\t\t\tc = Curve.subdivide(c, a)[1];\n\t\t\t\t}\n\t\t\t\tvar dx = c[6] - c[0],\n\t\t\t\t\tdy = c[7] - c[1];\n\t\t\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t\t\t}\n\t\t\treturn Numerical.integrate(ds || getLengthIntegrand(v), a, b,\n\t\t\t\t\tgetIterations(a, b));\n\t\t},\n\n\t\tgetTimeAt: function(v, offset, start) {\n\t\t\tif (start === undefined)\n\t\t\t\tstart = offset < 0 ? 1 : 0;\n\t\t\tif (offset === 0)\n\t\t\t\treturn start;\n\t\t\tvar abs = Math.abs,\n\t\t\t\tepsilon = 1e-12,\n\t\t\t\tforward = offset > 0,\n\t\t\t\ta = forward ? start : 0,\n\t\t\t\tb = forward ? 1 : start,\n\t\t\t\tds = getLengthIntegrand(v),\n\t\t\t\trangeLength = Curve.getLength(v, a, b, ds),\n\t\t\t\tdiff = abs(offset) - rangeLength;\n\t\t\tif (abs(diff) < epsilon) {\n\t\t\t\treturn forward ? b : a;\n\t\t\t} else if (diff > epsilon) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tvar guess = offset / rangeLength,\n\t\t\t\tlength = 0;\n\t\t\tfunction f(t) {\n\t\t\t\tlength += Numerical.integrate(ds, start, t,\n\t\t\t\t\t\tgetIterations(start, t));\n\t\t\t\tstart = t;\n\t\t\t\treturn length - offset;\n\t\t\t}\n\t\t\treturn Numerical.findRoot(f, ds, start + guess, a, b, 32,\n\t\t\t\t\t1e-12);\n\t\t},\n\n\t\tgetPoint: function(v, t) {\n\t\t\treturn evaluate(v, t, 0, false);\n\t\t},\n\n\t\tgetTangent: function(v, t) {\n\t\t\treturn evaluate(v, t, 1, true);\n\t\t},\n\n\t\tgetWeightedTangent: function(v, t) {\n\t\t\treturn evaluate(v, t, 1, false);\n\t\t},\n\n\t\tgetNormal: function(v, t) {\n\t\t\treturn evaluate(v, t, 2, true);\n\t\t},\n\n\t\tgetWeightedNormal: function(v, t) {\n\t\t\treturn evaluate(v, t, 2, false);\n\t\t},\n\n\t\tgetCurvature: function(v, t) {\n\t\t\treturn evaluate(v, t, 3, false).x;\n\t\t},\n\n\t\tgetPeaks: function(v) {\n\t\t\tvar x0 = v[0], y0 = v[1],\n\t\t\t\tx1 = v[2], y1 = v[3],\n\t\t\t\tx2 = v[4], y2 = v[5],\n\t\t\t\tx3 = v[6], y3 = v[7],\n\t\t\t\tax =     -x0 + 3 * x1 - 3 * x2 + x3,\n\t\t\t\tbx =  3 * x0 - 6 * x1 + 3 * x2,\n\t\t\t\tcx = -3 * x0 + 3 * x1,\n\t\t\t\tay =     -y0 + 3 * y1 - 3 * y2 + y3,\n\t\t\t\tby =  3 * y0 - 6 * y1 + 3 * y2,\n\t\t\t\tcy = -3 * y0 + 3 * y1,\n\t\t\t\ttMin = 1e-8,\n\t\t\t\ttMax = 1 - tMin,\n\t\t\t\troots = [];\n\t\t\tNumerical.solveCubic(\n\t\t\t\t\t9 * (ax * ax + ay * ay),\n\t\t\t\t\t9 * (ax * bx + by * ay),\n\t\t\t\t\t2 * (bx * bx + by * by) + 3 * (cx * ax + cy * ay),\n\t\t\t\t\t(cx * bx + by * cy),\n\t\t\t\t\troots, tMin, tMax);\n\t\t\treturn roots.sort();\n\t\t}\n\t}};\n},\nnew function() {\n\n\tfunction addLocation(locations, include, c1, t1, c2, t2, overlap) {\n\t\tvar excludeStart = !overlap && c1.getPrevious() === c2,\n\t\t\texcludeEnd = !overlap && c1 !== c2 && c1.getNext() === c2,\n\t\t\ttMin = 1e-8,\n\t\t\ttMax = 1 - tMin;\n\t\tif (t1 !== null && t1 >= (excludeStart ? tMin : 0) &&\n\t\t\tt1 <= (excludeEnd ? tMax : 1)) {\n\t\t\tif (t2 !== null && t2 >= (excludeEnd ? tMin : 0) &&\n\t\t\t\tt2 <= (excludeStart ? tMax : 1)) {\n\t\t\t\tvar loc1 = new CurveLocation(c1, t1, null, overlap),\n\t\t\t\t\tloc2 = new CurveLocation(c2, t2, null, overlap);\n\t\t\t\tloc1._intersection = loc2;\n\t\t\t\tloc2._intersection = loc1;\n\t\t\t\tif (!include || include(loc1)) {\n\t\t\t\t\tCurveLocation.insert(locations, loc1, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction addCurveIntersections(v1, v2, c1, c2, locations, include, flip,\n\t\t\trecursion, calls, tMin, tMax, uMin, uMax) {\n\t\tif (++calls >= 4096 || ++recursion >= 40)\n\t\t\treturn calls;\n\t\tvar fatLineEpsilon = 1e-9,\n\t\t\tq0x = v2[0], q0y = v2[1], q3x = v2[6], q3y = v2[7],\n\t\t\tgetSignedDistance = Line.getSignedDistance,\n\t\t\td1 = getSignedDistance(q0x, q0y, q3x, q3y, v2[2], v2[3]),\n\t\t\td2 = getSignedDistance(q0x, q0y, q3x, q3y, v2[4], v2[5]),\n\t\t\tfactor = d1 * d2 > 0 ? 3 / 4 : 4 / 9,\n\t\t\tdMin = factor * Math.min(0, d1, d2),\n\t\t\tdMax = factor * Math.max(0, d1, d2),\n\t\t\tdp0 = getSignedDistance(q0x, q0y, q3x, q3y, v1[0], v1[1]),\n\t\t\tdp1 = getSignedDistance(q0x, q0y, q3x, q3y, v1[2], v1[3]),\n\t\t\tdp2 = getSignedDistance(q0x, q0y, q3x, q3y, v1[4], v1[5]),\n\t\t\tdp3 = getSignedDistance(q0x, q0y, q3x, q3y, v1[6], v1[7]),\n\t\t\thull = getConvexHull(dp0, dp1, dp2, dp3),\n\t\t\ttop = hull[0],\n\t\t\tbottom = hull[1],\n\t\t\ttMinClip,\n\t\t\ttMaxClip;\n\t\tif (d1 === 0 && d2 === 0\n\t\t\t\t&& dp0 === 0 && dp1 === 0 && dp2 === 0 && dp3 === 0\n\t\t\t|| (tMinClip = clipConvexHull(top, bottom, dMin, dMax)) == null\n\t\t\t|| (tMaxClip = clipConvexHull(top.reverse(), bottom.reverse(),\n\t\t\t\tdMin, dMax)) == null)\n\t\t\treturn calls;\n\t\tvar tMinNew = tMin + (tMax - tMin) * tMinClip,\n\t\t\ttMaxNew = tMin + (tMax - tMin) * tMaxClip;\n\t\tif (Math.max(uMax - uMin, tMaxNew - tMinNew) < fatLineEpsilon) {\n\t\t\tvar t = (tMinNew + tMaxNew) / 2,\n\t\t\t\tu = (uMin + uMax) / 2;\n\t\t\taddLocation(locations, include,\n\t\t\t\t\tflip ? c2 : c1, flip ? u : t,\n\t\t\t\t\tflip ? c1 : c2, flip ? t : u);\n\t\t} else {\n\t\t\tv1 = Curve.getPart(v1, tMinClip, tMaxClip);\n\t\t\tif (tMaxClip - tMinClip > 0.8) {\n\t\t\t\tif (tMaxNew - tMinNew > uMax - uMin) {\n\t\t\t\t\tvar parts = Curve.subdivide(v1, 0.5),\n\t\t\t\t\t\tt = (tMinNew + tMaxNew) / 2;\n\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tv2, parts[0], c2, c1, locations, include, !flip,\n\t\t\t\t\t\t\trecursion, calls, uMin, uMax, tMinNew, t);\n\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tv2, parts[1], c2, c1, locations, include, !flip,\n\t\t\t\t\t\t\trecursion, calls, uMin, uMax, t, tMaxNew);\n\t\t\t\t} else {\n\t\t\t\t\tvar parts = Curve.subdivide(v2, 0.5),\n\t\t\t\t\t\tu = (uMin + uMax) / 2;\n\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tparts[0], v1, c2, c1, locations, include, !flip,\n\t\t\t\t\t\t\trecursion, calls, uMin, u, tMinNew, tMaxNew);\n\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tparts[1], v1, c2, c1, locations, include, !flip,\n\t\t\t\t\t\t\trecursion, calls, u, uMax, tMinNew, tMaxNew);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (uMax - uMin >= fatLineEpsilon) {\n\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tv2, v1, c2, c1, locations, include, !flip,\n\t\t\t\t\t\t\trecursion, calls, uMin, uMax, tMinNew, tMaxNew);\n\t\t\t\t} else {\n\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tv1, v2, c1, c2, locations, include, flip,\n\t\t\t\t\t\t\trecursion, calls, tMinNew, tMaxNew, uMin, uMax);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn calls;\n\t}\n\n\tfunction getConvexHull(dq0, dq1, dq2, dq3) {\n\t\tvar p0 = [ 0, dq0 ],\n\t\t\tp1 = [ 1 / 3, dq1 ],\n\t\t\tp2 = [ 2 / 3, dq2 ],\n\t\t\tp3 = [ 1, dq3 ],\n\t\t\tdist1 = dq1 - (2 * dq0 + dq3) / 3,\n\t\t\tdist2 = dq2 - (dq0 + 2 * dq3) / 3,\n\t\t\thull;\n\t\tif (dist1 * dist2 < 0) {\n\t\t\thull = [[p0, p1, p3], [p0, p2, p3]];\n\t\t} else {\n\t\t\tvar distRatio = dist1 / dist2;\n\t\t\thull = [\n\t\t\t\tdistRatio >= 2 ? [p0, p1, p3]\n\t\t\t\t: distRatio <= 0.5 ? [p0, p2, p3]\n\t\t\t\t: [p0, p1, p2, p3],\n\t\t\t\t[p0, p3]\n\t\t\t];\n\t\t}\n\t\treturn (dist1 || dist2) < 0 ? hull.reverse() : hull;\n\t}\n\n\tfunction clipConvexHull(hullTop, hullBottom, dMin, dMax) {\n\t\tif (hullTop[0][1] < dMin) {\n\t\t\treturn clipConvexHullPart(hullTop, true, dMin);\n\t\t} else if (hullBottom[0][1] > dMax) {\n\t\t\treturn clipConvexHullPart(hullBottom, false, dMax);\n\t\t} else {\n\t\t\treturn hullTop[0][0];\n\t\t}\n\t}\n\n\tfunction clipConvexHullPart(part, top, threshold) {\n\t\tvar px = part[0][0],\n\t\t\tpy = part[0][1];\n\t\tfor (var i = 1, l = part.length; i < l; i++) {\n\t\t\tvar qx = part[i][0],\n\t\t\t\tqy = part[i][1];\n\t\t\tif (top ? qy >= threshold : qy <= threshold) {\n\t\t\t\treturn qy === threshold ? qx\n\t\t\t\t\t\t: px + (threshold - py) * (qx - px) / (qy - py);\n\t\t\t}\n\t\t\tpx = qx;\n\t\t\tpy = qy;\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction getCurveLineIntersections(v, px, py, vx, vy) {\n\t\tvar isZero = Numerical.isZero;\n\t\tif (isZero(vx) && isZero(vy)) {\n\t\t\tvar t = Curve.getTimeOf(v, new Point(px, py));\n\t\t\treturn t === null ? [] : [t];\n\t\t}\n\t\tvar angle = Math.atan2(-vy, vx),\n\t\t\tsin = Math.sin(angle),\n\t\t\tcos = Math.cos(angle),\n\t\t\trv = [],\n\t\t\troots = [];\n\t\tfor (var i = 0; i < 8; i += 2) {\n\t\t\tvar x = v[i] - px,\n\t\t\t\ty = v[i + 1] - py;\n\t\t\trv.push(\n\t\t\t\tx * cos - y * sin,\n\t\t\t\tx * sin + y * cos);\n\t\t}\n\t\tCurve.solveCubic(rv, 1, 0, roots, 0, 1);\n\t\treturn roots;\n\t}\n\n\tfunction addCurveLineIntersections(v1, v2, c1, c2, locations, include,\n\t\t\tflip) {\n\t\tvar x1 = v2[0], y1 = v2[1],\n\t\t\tx2 = v2[6], y2 = v2[7],\n\t\t\troots = getCurveLineIntersections(v1, x1, y1, x2 - x1, y2 - y1);\n\t\tfor (var i = 0, l = roots.length; i < l; i++) {\n\t\t\tvar t1 = roots[i],\n\t\t\t\tp1 = Curve.getPoint(v1, t1),\n\t\t\t\tt2 = Curve.getTimeOf(v2, p1);\n\t\t\tif (t2 !== null) {\n\t\t\t\taddLocation(locations, include,\n\t\t\t\t\t\tflip ? c2 : c1, flip ? t2 : t1,\n\t\t\t\t\t\tflip ? c1 : c2, flip ? t1 : t2);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction addLineIntersection(v1, v2, c1, c2, locations, include) {\n\t\tvar pt = Line.intersect(\n\t\t\t\tv1[0], v1[1], v1[6], v1[7],\n\t\t\t\tv2[0], v2[1], v2[6], v2[7]);\n\t\tif (pt) {\n\t\t\taddLocation(locations, include,\n\t\t\t\t\tc1, Curve.getTimeOf(v1, pt),\n\t\t\t\t\tc2, Curve.getTimeOf(v2, pt));\n\t\t}\n\t}\n\n\tfunction getCurveIntersections(v1, v2, c1, c2, locations, include) {\n\t\tvar epsilon = 1e-12,\n\t\t\tmin = Math.min,\n\t\t\tmax = Math.max;\n\n\t\tif (max(v1[0], v1[2], v1[4], v1[6]) + epsilon >\n\t\t\tmin(v2[0], v2[2], v2[4], v2[6]) &&\n\t\t\tmin(v1[0], v1[2], v1[4], v1[6]) - epsilon <\n\t\t\tmax(v2[0], v2[2], v2[4], v2[6]) &&\n\t\t\tmax(v1[1], v1[3], v1[5], v1[7]) + epsilon >\n\t\t\tmin(v2[1], v2[3], v2[5], v2[7]) &&\n\t\t\tmin(v1[1], v1[3], v1[5], v1[7]) - epsilon <\n\t\t\tmax(v2[1], v2[3], v2[5], v2[7])) {\n\t\t\tvar overlaps = getOverlaps(v1, v2);\n\t\t\tif (overlaps) {\n\t\t\t\tfor (var i = 0; i < 2; i++) {\n\t\t\t\t\tvar overlap = overlaps[i];\n\t\t\t\t\taddLocation(locations, include,\n\t\t\t\t\t\t\tc1, overlap[0],\n\t\t\t\t\t\t\tc2, overlap[1], true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar straight1 = Curve.isStraight(v1),\n\t\t\t\t\tstraight2 = Curve.isStraight(v2),\n\t\t\t\t\tstraight = straight1 && straight2,\n\t\t\t\t\tflip = straight1 && !straight2,\n\t\t\t\t\tbefore = locations.length;\n\t\t\t\t(straight\n\t\t\t\t\t? addLineIntersection\n\t\t\t\t\t: straight1 || straight2\n\t\t\t\t\t\t? addCurveLineIntersections\n\t\t\t\t\t\t: addCurveIntersections)(\n\t\t\t\t\t\t\tflip ? v2 : v1, flip ? v1 : v2,\n\t\t\t\t\t\t\tflip ? c2 : c1, flip ? c1 : c2,\n\t\t\t\t\t\t\tlocations, include, flip,\n\t\t\t\t\t\t\t0, 0, 0, 1, 0, 1);\n\t\t\t\tif (!straight || locations.length === before) {\n\t\t\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\t\t\tvar t1 = i >> 1,\n\t\t\t\t\t\t\tt2 = i & 1,\n\t\t\t\t\t\t\ti1 = t1 * 6,\n\t\t\t\t\t\t\ti2 = t2 * 6,\n\t\t\t\t\t\t\tp1 = new Point(v1[i1], v1[i1 + 1]),\n\t\t\t\t\t\t\tp2 = new Point(v2[i2], v2[i2 + 1]);\n\t\t\t\t\t\tif (p1.isClose(p2, epsilon)) {\n\t\t\t\t\t\t\taddLocation(locations, include,\n\t\t\t\t\t\t\t\t\tc1, t1,\n\t\t\t\t\t\t\t\t\tc2, t2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn locations;\n\t}\n\n\tfunction getLoopIntersection(v1, c1, locations, include) {\n\t\tvar info = Curve.classify(v1);\n\t\tif (info.type === 'loop') {\n\t\t\tvar roots = info.roots;\n\t\t\taddLocation(locations, include,\n\t\t\t\t\tc1, roots[0],\n\t\t\t\t\tc1, roots[1]);\n\t\t}\n\t  return locations;\n\t}\n\n\tfunction getIntersections(curves1, curves2, include, matrix1, matrix2,\n\t\t\t_returnFirst) {\n\t\tvar self = !curves2;\n\t\tif (self)\n\t\t\tcurves2 = curves1;\n\t\tvar length1 = curves1.length,\n\t\t\tlength2 = curves2.length,\n\t\t\tvalues2 = [],\n\t\t\tarrays = [],\n\t\t\tlocations,\n\t\t\tcurrent;\n\t\tfor (var i = 0; i < length2; i++)\n\t\t\tvalues2[i] = curves2[i].getValues(matrix2);\n\t\tfor (var i = 0; i < length1; i++) {\n\t\t\tvar curve1 = curves1[i],\n\t\t\t\tvalues1 = self ? values2[i] : curve1.getValues(matrix1),\n\t\t\t\tpath1 = curve1.getPath();\n\t\t\tif (path1 !== current) {\n\t\t\t\tcurrent = path1;\n\t\t\t\tlocations = [];\n\t\t\t\tarrays.push(locations);\n\t\t\t}\n\t\t\tif (self) {\n\t\t\t\tgetLoopIntersection(values1, curve1, locations, include);\n\t\t\t}\n\t\t\tfor (var j = self ? i + 1 : 0; j < length2; j++) {\n\t\t\t\tif (_returnFirst && locations.length)\n\t\t\t\t\treturn locations;\n\t\t\t\tgetCurveIntersections(values1, values2[j], curve1, curves2[j],\n\t\t\t\t\t\tlocations, include);\n\t\t\t}\n\t\t}\n\t\tlocations = [];\n\t\tfor (var i = 0, l = arrays.length; i < l; i++) {\n\t\t\tlocations.push.apply(locations, arrays[i]);\n\t\t}\n\t\treturn locations;\n\t}\n\n\tfunction getOverlaps(v1, v2) {\n\n\t\tfunction getSquaredLineLength(v) {\n\t\t\tvar x = v[6] - v[0],\n\t\t\t\ty = v[7] - v[1];\n\t\t\treturn x * x + y * y;\n\t\t}\n\n\t\tvar abs = Math.abs,\n\t\t\tgetDistance = Line.getDistance,\n\t\t\ttimeEpsilon = 1e-8,\n\t\t\tgeomEpsilon = 1e-7,\n\t\t\tstraight1 = Curve.isStraight(v1),\n\t\t\tstraight2 = Curve.isStraight(v2),\n\t\t\tstraightBoth = straight1 && straight2,\n\t\t\tflip = getSquaredLineLength(v1) < getSquaredLineLength(v2),\n\t\t\tl1 = flip ? v2 : v1,\n\t\t\tl2 = flip ? v1 : v2,\n\t\t\tpx = l1[0], py = l1[1],\n\t\t\tvx = l1[6] - px, vy = l1[7] - py;\n\t\tif (getDistance(px, py, vx, vy, l2[0], l2[1], true) < geomEpsilon &&\n\t\t\tgetDistance(px, py, vx, vy, l2[6], l2[7], true) < geomEpsilon) {\n\t\t\tif (!straightBoth &&\n\t\t\t\tgetDistance(px, py, vx, vy, l1[2], l1[3], true) < geomEpsilon &&\n\t\t\t\tgetDistance(px, py, vx, vy, l1[4], l1[5], true) < geomEpsilon &&\n\t\t\t\tgetDistance(px, py, vx, vy, l2[2], l2[3], true) < geomEpsilon &&\n\t\t\t\tgetDistance(px, py, vx, vy, l2[4], l2[5], true) < geomEpsilon) {\n\t\t\t\tstraight1 = straight2 = straightBoth = true;\n\t\t\t}\n\t\t} else if (straightBoth) {\n\t\t\treturn null;\n\t\t}\n\t\tif (straight1 ^ straight2) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar v = [v1, v2],\n\t\t\tpairs = [];\n\t\tfor (var i = 0; i < 4 && pairs.length < 2; i++) {\n\t\t\tvar i1 = i & 1,\n\t\t\t\ti2 = i1 ^ 1,\n\t\t\t\tt1 = i >> 1,\n\t\t\t\tt2 = Curve.getTimeOf(v[i1], new Point(\n\t\t\t\t\tv[i2][t1 ? 6 : 0],\n\t\t\t\t\tv[i2][t1 ? 7 : 1]));\n\t\t\tif (t2 != null) {\n\t\t\t\tvar pair = i1 ? [t1, t2] : [t2, t1];\n\t\t\t\tif (!pairs.length ||\n\t\t\t\t\tabs(pair[0] - pairs[0][0]) > timeEpsilon &&\n\t\t\t\t\tabs(pair[1] - pairs[0][1]) > timeEpsilon) {\n\t\t\t\t\tpairs.push(pair);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i > 2 && !pairs.length)\n\t\t\t\tbreak;\n\t\t}\n\t\tif (pairs.length !== 2) {\n\t\t\tpairs = null;\n\t\t} else if (!straightBoth) {\n\t\t\tvar o1 = Curve.getPart(v1, pairs[0][0], pairs[1][0]),\n\t\t\t\to2 = Curve.getPart(v2, pairs[0][1], pairs[1][1]);\n\t\t\tif (abs(o2[2] - o1[2]) > geomEpsilon ||\n\t\t\t\tabs(o2[3] - o1[3]) > geomEpsilon ||\n\t\t\t\tabs(o2[4] - o1[4]) > geomEpsilon ||\n\t\t\t\tabs(o2[5] - o1[5]) > geomEpsilon)\n\t\t\t\tpairs = null;\n\t\t}\n\t\treturn pairs;\n\t}\n\n\treturn {\n\t\tgetIntersections: function(curve) {\n\t\t\tvar v1 = this.getValues(),\n\t\t\t\tv2 = curve && curve !== this && curve.getValues();\n\t\t\treturn v2 ? getCurveIntersections(v1, v2, this, curve, [])\n\t\t\t\t\t  : getLoopIntersection(v1, this, []);\n\t\t},\n\n\t\tstatics: {\n\t\t\tgetOverlaps: getOverlaps,\n\t\t\tgetIntersections: getIntersections,\n\t\t\tgetCurveLineIntersections: getCurveLineIntersections\n\t\t}\n\t};\n});\n\nvar CurveLocation = Base.extend({\n\t_class: 'CurveLocation',\n\n\tinitialize: function CurveLocation(curve, time, point, _overlap, _distance) {\n\t\tif (time >= 0.99999999) {\n\t\t\tvar next = curve.getNext();\n\t\t\tif (next) {\n\t\t\t\ttime = 0;\n\t\t\t\tcurve = next;\n\t\t\t}\n\t\t}\n\t\tthis._setCurve(curve);\n\t\tthis._time = time;\n\t\tthis._point = point || curve.getPointAtTime(time);\n\t\tthis._overlap = _overlap;\n\t\tthis._distance = _distance;\n\t\tthis._intersection = this._next = this._previous = null;\n\t},\n\n\t_setCurve: function(curve) {\n\t\tvar path = curve._path;\n\t\tthis._path = path;\n\t\tthis._version = path ? path._version : 0;\n\t\tthis._curve = curve;\n\t\tthis._segment = null;\n\t\tthis._segment1 = curve._segment1;\n\t\tthis._segment2 = curve._segment2;\n\t},\n\n\t_setSegment: function(segment) {\n\t\tthis._setCurve(segment.getCurve());\n\t\tthis._segment = segment;\n\t\tthis._time = segment === this._segment1 ? 0 : 1;\n\t\tthis._point = segment._point.clone();\n\t},\n\n\tgetSegment: function() {\n\t\tvar segment = this._segment;\n\t\tif (!segment) {\n\t\t\tvar curve = this.getCurve(),\n\t\t\t\ttime = this.getTime();\n\t\t\tif (time === 0) {\n\t\t\t\tsegment = curve._segment1;\n\t\t\t} else if (time === 1) {\n\t\t\t\tsegment = curve._segment2;\n\t\t\t} else if (time != null) {\n\t\t\t\tsegment = curve.getPartLength(0, time)\n\t\t\t\t\t< curve.getPartLength(time, 1)\n\t\t\t\t\t\t? curve._segment1\n\t\t\t\t\t\t: curve._segment2;\n\t\t\t}\n\t\t\tthis._segment = segment;\n\t\t}\n\t\treturn segment;\n\t},\n\n\tgetCurve: function() {\n\t\tvar path = this._path,\n\t\t\tthat = this;\n\t\tif (path && path._version !== this._version) {\n\t\t\tthis._time = this._offset = this._curveOffset = this._curve = null;\n\t\t}\n\n\t\tfunction trySegment(segment) {\n\t\t\tvar curve = segment && segment.getCurve();\n\t\t\tif (curve && (that._time = curve.getTimeOf(that._point)) != null) {\n\t\t\t\tthat._setCurve(curve);\n\t\t\t\treturn curve;\n\t\t\t}\n\t\t}\n\n\t\treturn this._curve\n\t\t\t|| trySegment(this._segment)\n\t\t\t|| trySegment(this._segment1)\n\t\t\t|| trySegment(this._segment2.getPrevious());\n\t},\n\n\tgetPath: function() {\n\t\tvar curve = this.getCurve();\n\t\treturn curve && curve._path;\n\t},\n\n\tgetIndex: function() {\n\t\tvar curve = this.getCurve();\n\t\treturn curve && curve.getIndex();\n\t},\n\n\tgetTime: function() {\n\t\tvar curve = this.getCurve(),\n\t\t\ttime = this._time;\n\t\treturn curve && time == null\n\t\t\t? this._time = curve.getTimeOf(this._point)\n\t\t\t: time;\n\t},\n\n\tgetParameter: '#getTime',\n\n\tgetPoint: function() {\n\t\treturn this._point;\n\t},\n\n\tgetOffset: function() {\n\t\tvar offset = this._offset;\n\t\tif (offset == null) {\n\t\t\toffset = 0;\n\t\t\tvar path = this.getPath(),\n\t\t\t\tindex = this.getIndex();\n\t\t\tif (path && index != null) {\n\t\t\t\tvar curves = path.getCurves();\n\t\t\t\tfor (var i = 0; i < index; i++)\n\t\t\t\t\toffset += curves[i].getLength();\n\t\t\t}\n\t\t\tthis._offset = offset += this.getCurveOffset();\n\t\t}\n\t\treturn offset;\n\t},\n\n\tgetCurveOffset: function() {\n\t\tvar offset = this._curveOffset;\n\t\tif (offset == null) {\n\t\t\tvar curve = this.getCurve(),\n\t\t\t\ttime = this.getTime();\n\t\t\tthis._curveOffset = offset = time != null && curve\n\t\t\t\t\t&& curve.getPartLength(0, time);\n\t\t}\n\t\treturn offset;\n\t},\n\n\tgetIntersection: function() {\n\t\treturn this._intersection;\n\t},\n\n\tgetDistance: function() {\n\t\treturn this._distance;\n\t},\n\n\tdivide: function() {\n\t\tvar curve = this.getCurve(),\n\t\t\tres = curve && curve.divideAtTime(this.getTime());\n\t\tif (res) {\n\t\t\tthis._setSegment(res._segment1);\n\t\t}\n\t\treturn res;\n\t},\n\n\tsplit: function() {\n\t\tvar curve = this.getCurve(),\n\t\t\tpath = curve._path,\n\t\t\tres = curve && curve.splitAtTime(this.getTime());\n\t\tif (res) {\n\t\t\tthis._setSegment(path.getLastSegment());\n\t\t}\n\t\treturn  res;\n\t},\n\n\tequals: function(loc, _ignoreOther) {\n\t\tvar res = this === loc;\n\t\tif (!res && loc instanceof CurveLocation) {\n\t\t\tvar c1 = this.getCurve(),\n\t\t\t\tc2 = loc.getCurve(),\n\t\t\t\tp1 = c1._path,\n\t\t\t\tp2 = c2._path;\n\t\t\tif (p1 === p2) {\n\t\t\t\tvar abs = Math.abs,\n\t\t\t\t\tepsilon = 1e-7,\n\t\t\t\t\tdiff = abs(this.getOffset() - loc.getOffset()),\n\t\t\t\t\ti1 = !_ignoreOther && this._intersection,\n\t\t\t\t\ti2 = !_ignoreOther && loc._intersection;\n\t\t\t\tres = (diff < epsilon\n\t\t\t\t\t\t|| p1 && abs(p1.getLength() - diff) < epsilon)\n\t\t\t\t\t&& (!i1 && !i2 || i1 && i2 && i1.equals(i2, true));\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t},\n\n\ttoString: function() {\n\t\tvar parts = [],\n\t\t\tpoint = this.getPoint(),\n\t\t\tf = Formatter.instance;\n\t\tif (point)\n\t\t\tparts.push('point: ' + point);\n\t\tvar index = this.getIndex();\n\t\tif (index != null)\n\t\t\tparts.push('index: ' + index);\n\t\tvar time = this.getTime();\n\t\tif (time != null)\n\t\t\tparts.push('time: ' + f.number(time));\n\t\tif (this._distance != null)\n\t\t\tparts.push('distance: ' + f.number(this._distance));\n\t\treturn '{ ' + parts.join(', ') + ' }';\n\t},\n\n\tisTouching: function() {\n\t\tvar inter = this._intersection;\n\t\tif (inter && this.getTangent().isCollinear(inter.getTangent())) {\n\t\t\tvar curve1 = this.getCurve(),\n\t\t\t\tcurve2 = inter.getCurve();\n\t\t\treturn !(curve1.isStraight() && curve2.isStraight()\n\t\t\t\t\t&& curve1.getLine().intersect(curve2.getLine()));\n\t\t}\n\t\treturn false;\n\t},\n\n\tisCrossing: function() {\n\t\tvar inter = this._intersection;\n\t\tif (!inter)\n\t\t\treturn false;\n\t\tvar t1 = this.getTime(),\n\t\t\tt2 = inter.getTime(),\n\t\t\ttMin = 1e-8,\n\t\t\ttMax = 1 - tMin,\n\t\t\tt1Inside = t1 >= tMin && t1 <= tMax,\n\t\t\tt2Inside = t2 >= tMin && t2 <= tMax;\n\t\tif (t1Inside && t2Inside)\n\t\t\treturn !this.isTouching();\n\t\tvar c2 = this.getCurve(),\n\t\t\tc1 = t1 < tMin ? c2.getPrevious() : c2,\n\t\t\tc4 = inter.getCurve(),\n\t\t\tc3 = t2 < tMin ? c4.getPrevious() : c4;\n\t\tif (t1 > tMax)\n\t\t\tc2 = c2.getNext();\n\t\tif (t2 > tMax)\n\t\t\tc4 = c4.getNext();\n\t\tif (!c1 || !c2 || !c3 || !c4)\n\t\t\treturn false;\n\n\t\tvar offsets = [];\n\n\t\tfunction addOffsets(curve, end) {\n\t\t\tvar v = curve.getValues(),\n\t\t\t\troots = Curve.classify(v).roots || Curve.getPeaks(v),\n\t\t\t\tcount = roots.length,\n\t\t\t\tt = end && count > 1 ? roots[count - 1]\n\t\t\t\t\t\t: count > 0 ? roots[0]\n\t\t\t\t\t\t: 0.5;\n\t\t\toffsets.push(Curve.getLength(v, end ? t : 0, end ? 1 : t) / 2);\n\t\t}\n\n\t\tfunction isInRange(angle, min, max) {\n\t\t\treturn min < max\n\t\t\t\t\t? angle > min && angle < max\n\t\t\t\t\t: angle > min || angle < max;\n\t\t}\n\n\t\tif (!t1Inside) {\n\t\t\taddOffsets(c1, true);\n\t\t\taddOffsets(c2, false);\n\t\t}\n\t\tif (!t2Inside) {\n\t\t\taddOffsets(c3, true);\n\t\t\taddOffsets(c4, false);\n\t\t}\n\t\tvar pt = this.getPoint(),\n\t\t\toffset = Math.min.apply(Math, offsets),\n\t\t\tv2 = t1Inside ? c2.getTangentAtTime(t1)\n\t\t\t\t\t: c2.getPointAt(offset).subtract(pt),\n\t\t\tv1 = t1Inside ? v2.negate()\n\t\t\t\t\t: c1.getPointAt(-offset).subtract(pt),\n\t\t\tv4 = t2Inside ? c4.getTangentAtTime(t2)\n\t\t\t\t\t: c4.getPointAt(offset).subtract(pt),\n\t\t\tv3 = t2Inside ? v4.negate()\n\t\t\t\t\t: c3.getPointAt(-offset).subtract(pt),\n\t\t\ta1 = v1.getAngle(),\n\t\t\ta2 = v2.getAngle(),\n\t\t\ta3 = v3.getAngle(),\n\t\t\ta4 = v4.getAngle();\n\t\treturn !!(t1Inside\n\t\t\t\t? (isInRange(a1, a3, a4) ^ isInRange(a2, a3, a4)) &&\n\t\t\t\t  (isInRange(a1, a4, a3) ^ isInRange(a2, a4, a3))\n\t\t\t\t: (isInRange(a3, a1, a2) ^ isInRange(a4, a1, a2)) &&\n\t\t\t\t  (isInRange(a3, a2, a1) ^ isInRange(a4, a2, a1)));\n\t},\n\n\thasOverlap: function() {\n\t\treturn !!this._overlap;\n\t}\n}, Base.each(Curve._evaluateMethods, function(name) {\n\tvar get = name + 'At';\n\tthis[name] = function() {\n\t\tvar curve = this.getCurve(),\n\t\t\ttime = this.getTime();\n\t\treturn time != null && curve && curve[get](time, true);\n\t};\n}, {\n\tpreserve: true\n}),\nnew function() {\n\n\tfunction insert(locations, loc, merge) {\n\t\tvar length = locations.length,\n\t\t\tl = 0,\n\t\t\tr = length - 1;\n\n\t\tfunction search(index, dir) {\n\t\t\tfor (var i = index + dir; i >= -1 && i <= length; i += dir) {\n\t\t\t\tvar loc2 = locations[((i % length) + length) % length];\n\t\t\t\tif (!loc.getPoint().isClose(loc2.getPoint(),\n\t\t\t\t\t\t1e-7))\n\t\t\t\t\tbreak;\n\t\t\t\tif (loc.equals(loc2))\n\t\t\t\t\treturn loc2;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\twhile (l <= r) {\n\t\t\tvar m = (l + r) >>> 1,\n\t\t\t\tloc2 = locations[m],\n\t\t\t\tfound;\n\t\t\tif (merge && (found = loc.equals(loc2) ? loc2\n\t\t\t\t\t: (search(m, -1) || search(m, 1)))) {\n\t\t\t\tif (loc._overlap) {\n\t\t\t\t\tfound._overlap = found._intersection._overlap = true;\n\t\t\t\t}\n\t\t\t\treturn found;\n\t\t\t}\n\t\tvar path1 = loc.getPath(),\n\t\t\tpath2 = loc2.getPath(),\n\t\t\tdiff = path1 !== path2\n\t\t\t\t? path1._id - path2._id\n\t\t\t\t: (loc.getIndex() + loc.getTime())\n\t\t\t\t- (loc2.getIndex() + loc2.getTime());\n\t\t\tif (diff < 0) {\n\t\t\t\tr = m - 1;\n\t\t\t} else {\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t}\n\t\tlocations.splice(l, 0, loc);\n\t\treturn loc;\n\t}\n\n\treturn { statics: {\n\t\tinsert: insert,\n\n\t\texpand: function(locations) {\n\t\t\tvar expanded = locations.slice();\n\t\t\tfor (var i = locations.length - 1; i >= 0; i--) {\n\t\t\t\tinsert(expanded, locations[i]._intersection, false);\n\t\t\t}\n\t\t\treturn expanded;\n\t\t}\n\t}};\n});\n\nvar PathItem = Item.extend({\n\t_class: 'PathItem',\n\t_selectBounds: false,\n\t_canScaleStroke: true,\n\tbeans: true,\n\n\tinitialize: function PathItem() {\n\t},\n\n\tstatics: {\n\t\tcreate: function(arg) {\n\t\t\tvar data,\n\t\t\t\tsegments,\n\t\t\t\tcompound;\n\t\t\tif (Base.isPlainObject(arg)) {\n\t\t\t\tsegments = arg.segments;\n\t\t\t\tdata = arg.pathData;\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tsegments = arg;\n\t\t\t} else if (typeof arg === 'string') {\n\t\t\t\tdata = arg;\n\t\t\t}\n\t\t\tif (segments) {\n\t\t\t\tvar first = segments[0];\n\t\t\t\tcompound = first && Array.isArray(first[0]);\n\t\t\t} else if (data) {\n\t\t\t\tcompound = (data.match(/m/gi) || []).length > 1\n\t\t\t\t\t\t|| /z\\s*\\S+/i.test(data);\n\t\t\t}\n\t\t\tvar ctor = compound ? CompoundPath : Path;\n\t\t\treturn new ctor(arg);\n\t\t}\n\t},\n\n\t_asPathItem: function() {\n\t\treturn this;\n\t},\n\n\tisClockwise: function() {\n\t\treturn this.getArea() >= 0;\n\t},\n\n\tsetClockwise: function(clockwise) {\n\t\tif (this.isClockwise() != (clockwise = !!clockwise))\n\t\t\tthis.reverse();\n\t},\n\n\tsetPathData: function(data) {\n\n\t\tvar parts = data && data.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/ig),\n\t\t\tcoords,\n\t\t\trelative = false,\n\t\t\tprevious,\n\t\t\tcontrol,\n\t\t\tcurrent = new Point(),\n\t\t\tstart = new Point();\n\n\t\tfunction getCoord(index, coord) {\n\t\t\tvar val = +coords[index];\n\t\t\tif (relative)\n\t\t\t\tval += current[coord];\n\t\t\treturn val;\n\t\t}\n\n\t\tfunction getPoint(index) {\n\t\t\treturn new Point(\n\t\t\t\tgetCoord(index, 'x'),\n\t\t\t\tgetCoord(index + 1, 'y')\n\t\t\t);\n\t\t}\n\n\t\tthis.clear();\n\n\t\tfor (var i = 0, l = parts && parts.length; i < l; i++) {\n\t\t\tvar part = parts[i],\n\t\t\t\tcommand = part[0],\n\t\t\t\tlower = command.toLowerCase();\n\t\t\tcoords = part.match(/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g);\n\t\t\tvar length = coords && coords.length;\n\t\t\trelative = command === lower;\n\t\t\tif (previous === 'z' && !/[mz]/.test(lower))\n\t\t\t\tthis.moveTo(current);\n\t\t\tswitch (lower) {\n\t\t\tcase 'm':\n\t\t\tcase 'l':\n\t\t\t\tvar move = lower === 'm';\n\t\t\t\tfor (var j = 0; j < length; j += 2) {\n\t\t\t\t\tthis[move ? 'moveTo' : 'lineTo'](current = getPoint(j));\n\t\t\t\t\tif (move) {\n\t\t\t\t\t\tstart = current;\n\t\t\t\t\t\tmove = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontrol = current;\n\t\t\t\tbreak;\n\t\t\tcase 'h':\n\t\t\tcase 'v':\n\t\t\t\tvar coord = lower === 'h' ? 'x' : 'y';\n\t\t\t\tcurrent = current.clone();\n\t\t\t\tfor (var j = 0; j < length; j++) {\n\t\t\t\t\tcurrent[coord] = getCoord(j, coord);\n\t\t\t\t\tthis.lineTo(current);\n\t\t\t\t}\n\t\t\t\tcontrol = current;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\tfor (var j = 0; j < length; j += 6) {\n\t\t\t\t\tthis.cubicCurveTo(\n\t\t\t\t\t\t\tgetPoint(j),\n\t\t\t\t\t\t\tcontrol = getPoint(j + 2),\n\t\t\t\t\t\t\tcurrent = getPoint(j + 4));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\tfor (var j = 0; j < length; j += 4) {\n\t\t\t\t\tthis.cubicCurveTo(\n\t\t\t\t\t\t\t/[cs]/.test(previous)\n\t\t\t\t\t\t\t\t\t? current.multiply(2).subtract(control)\n\t\t\t\t\t\t\t\t\t: current,\n\t\t\t\t\t\t\tcontrol = getPoint(j),\n\t\t\t\t\t\t\tcurrent = getPoint(j + 2));\n\t\t\t\t\tprevious = lower;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'q':\n\t\t\t\tfor (var j = 0; j < length; j += 4) {\n\t\t\t\t\tthis.quadraticCurveTo(\n\t\t\t\t\t\t\tcontrol = getPoint(j),\n\t\t\t\t\t\t\tcurrent = getPoint(j + 2));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 't':\n\t\t\t\tfor (var j = 0; j < length; j += 2) {\n\t\t\t\t\tthis.quadraticCurveTo(\n\t\t\t\t\t\t\tcontrol = (/[qt]/.test(previous)\n\t\t\t\t\t\t\t\t\t? current.multiply(2).subtract(control)\n\t\t\t\t\t\t\t\t\t: current),\n\t\t\t\t\t\t\tcurrent = getPoint(j));\n\t\t\t\t\tprevious = lower;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'a':\n\t\t\t\tfor (var j = 0; j < length; j += 7) {\n\t\t\t\t\tthis.arcTo(current = getPoint(j + 5),\n\t\t\t\t\t\t\tnew Size(+coords[j], +coords[j + 1]),\n\t\t\t\t\t\t\t+coords[j + 2], +coords[j + 4], +coords[j + 3]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'z':\n\t\t\t\tthis.closePath(1e-12);\n\t\t\t\tcurrent = start;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tprevious = lower;\n\t\t}\n\t},\n\n\t_canComposite: function() {\n\t\treturn !(this.hasFill() && this.hasStroke());\n\t},\n\n\t_contains: function(point) {\n\t\tvar winding = point.isInside(\n\t\t\t\tthis.getBounds({ internal: true, handle: true }))\n\t\t\t\t\t? this._getWinding(point)\n\t\t\t\t\t: {};\n\t\treturn winding.onPath || !!(this.getFillRule() === 'evenodd'\n\t\t\t\t? winding.windingL & 1 || winding.windingR & 1\n\t\t\t\t: winding.winding);\n\t},\n\n\tgetIntersections: function(path, include, _matrix, _returnFirst) {\n\t\tvar self = this === path || !path,\n\t\t\tmatrix1 = this._matrix._orNullIfIdentity(),\n\t\t\tmatrix2 = self ? matrix1\n\t\t\t\t: (_matrix || path._matrix)._orNullIfIdentity();\n\t\treturn self || this.getBounds(matrix1).intersects(\n\t\t\t\tpath.getBounds(matrix2), 1e-12)\n\t\t\t\t? Curve.getIntersections(\n\t\t\t\t\t\tthis.getCurves(), !self && path.getCurves(), include,\n\t\t\t\t\t\tmatrix1, matrix2, _returnFirst)\n\t\t\t\t: [];\n\t},\n\n\tgetCrossings: function(path) {\n\t\treturn this.getIntersections(path, function(inter) {\n\t\t\treturn inter.hasOverlap() || inter.isCrossing();\n\t\t});\n\t},\n\n\tgetNearestLocation: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tcurves = this.getCurves(),\n\t\t\tminDist = Infinity,\n\t\t\tminLoc = null;\n\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\tvar loc = curves[i].getNearestLocation(point);\n\t\t\tif (loc._distance < minDist) {\n\t\t\t\tminDist = loc._distance;\n\t\t\t\tminLoc = loc;\n\t\t\t}\n\t\t}\n\t\treturn minLoc;\n\t},\n\n\tgetNearestPoint: function() {\n\t\tvar loc = this.getNearestLocation.apply(this, arguments);\n\t\treturn loc ? loc.getPoint() : loc;\n\t},\n\n\tinterpolate: function(from, to, factor) {\n\t\tvar isPath = !this._children,\n\t\t\tname = isPath ? '_segments' : '_children',\n\t\t\titemsFrom = from[name],\n\t\t\titemsTo = to[name],\n\t\t\titems = this[name];\n\t\tif (!itemsFrom || !itemsTo || itemsFrom.length !== itemsTo.length) {\n\t\t\tthrow new Error('Invalid operands in interpolate() call: ' +\n\t\t\t\t\tfrom + ', ' + to);\n\t\t}\n\t\tvar current = items.length,\n\t\t\tlength = itemsTo.length;\n\t\tif (current < length) {\n\t\t\tvar ctor = isPath ? Segment : Path;\n\t\t\tfor (var i = current; i < length; i++) {\n\t\t\t\tthis.add(new ctor());\n\t\t\t}\n\t\t} else if (current > length) {\n\t\t\tthis[isPath ? 'removeSegments' : 'removeChildren'](length, current);\n\t\t}\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\titems[i].interpolate(itemsFrom[i], itemsTo[i], factor);\n\t\t}\n\t\tif (isPath) {\n\t\t\tthis.setClosed(from._closed);\n\t\t\tthis._changed(9);\n\t\t}\n\t},\n\n\tcompare: function(path) {\n\t\tvar ok = false;\n\t\tif (path) {\n\t\t\tvar paths1 = this._children || [this],\n\t\t\t\tpaths2 = path._children ? path._children.slice() : [path],\n\t\t\t\tlength1 = paths1.length,\n\t\t\t\tlength2 = paths2.length,\n\t\t\t\tmatched = [],\n\t\t\t\tcount = 0;\n\t\t\tok = true;\n\t\t\tfor (var i1 = length1 - 1; i1 >= 0 && ok; i1--) {\n\t\t\t\tvar path1 = paths1[i1];\n\t\t\t\tok = false;\n\t\t\t\tfor (var i2 = length2 - 1; i2 >= 0 && !ok; i2--) {\n\t\t\t\t\tif (path1.compare(paths2[i2])) {\n\t\t\t\t\t\tif (!matched[i2]) {\n\t\t\t\t\t\t\tmatched[i2] = true;\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tok = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tok = ok && count === length2;\n\t\t}\n\t\treturn ok;\n\t},\n\n});\n\nvar Path = PathItem.extend({\n\t_class: 'Path',\n\t_serializeFields: {\n\t\tsegments: [],\n\t\tclosed: false\n\t},\n\n\tinitialize: function Path(arg) {\n\t\tthis._closed = false;\n\t\tthis._segments = [];\n\t\tthis._version = 0;\n\t\tvar segments = Array.isArray(arg)\n\t\t\t? typeof arg[0] === 'object'\n\t\t\t\t? arg\n\t\t\t\t: arguments\n\t\t\t: arg && (arg.size === undefined && (arg.x !== undefined\n\t\t\t\t\t|| arg.point !== undefined))\n\t\t\t\t? arguments\n\t\t\t\t: null;\n\t\tif (segments && segments.length > 0) {\n\t\t\tthis.setSegments(segments);\n\t\t} else {\n\t\t\tthis._curves = undefined;\n\t\t\tthis._segmentSelection = 0;\n\t\t\tif (!segments && typeof arg === 'string') {\n\t\t\t\tthis.setPathData(arg);\n\t\t\t\targ = null;\n\t\t\t}\n\t\t}\n\t\tthis._initialize(!segments && arg);\n\t},\n\n\t_equals: function(item) {\n\t\treturn this._closed === item._closed\n\t\t\t\t&& Base.equals(this._segments, item._segments);\n\t},\n\n\tcopyContent: function(source) {\n\t\tthis.setSegments(source._segments);\n\t\tthis._closed = source._closed;\n\t},\n\n\t_changed: function _changed(flags) {\n\t\t_changed.base.call(this, flags);\n\t\tif (flags & 8) {\n\t\t\tthis._length = this._area = undefined;\n\t\t\tif (flags & 16) {\n\t\t\t\tthis._version++;\n\t\t\t} else if (this._curves) {\n\t\t\t   for (var i = 0, l = this._curves.length; i < l; i++)\n\t\t\t\t\tthis._curves[i]._changed();\n\t\t\t}\n\t\t} else if (flags & 32) {\n\t\t\tthis._bounds = undefined;\n\t\t}\n\t},\n\n\tgetStyle: function() {\n\t\tvar parent = this._parent;\n\t\treturn (parent instanceof CompoundPath ? parent : this)._style;\n\t},\n\n\tgetSegments: function() {\n\t\treturn this._segments;\n\t},\n\n\tsetSegments: function(segments) {\n\t\tvar fullySelected = this.isFullySelected(),\n\t\t\tlength = segments && segments.length;\n\t\tthis._segments.length = 0;\n\t\tthis._segmentSelection = 0;\n\t\tthis._curves = undefined;\n\t\tif (length) {\n\t\t\tvar last = segments[length - 1];\n\t\t\tif (typeof last === 'boolean') {\n\t\t\t\tthis.setClosed(last);\n\t\t\t\tlength--;\n\t\t\t}\n\t\t\tthis._add(Segment.readList(segments, 0, {}, length));\n\t\t}\n\t\tif (fullySelected)\n\t\t\tthis.setFullySelected(true);\n\t},\n\n\tgetFirstSegment: function() {\n\t\treturn this._segments[0];\n\t},\n\n\tgetLastSegment: function() {\n\t\treturn this._segments[this._segments.length - 1];\n\t},\n\n\tgetCurves: function() {\n\t\tvar curves = this._curves,\n\t\t\tsegments = this._segments;\n\t\tif (!curves) {\n\t\t\tvar length = this._countCurves();\n\t\t\tcurves = this._curves = new Array(length);\n\t\t\tfor (var i = 0; i < length; i++)\n\t\t\t\tcurves[i] = new Curve(this, segments[i],\n\t\t\t\t\tsegments[i + 1] || segments[0]);\n\t\t}\n\t\treturn curves;\n\t},\n\n\tgetFirstCurve: function() {\n\t\treturn this.getCurves()[0];\n\t},\n\n\tgetLastCurve: function() {\n\t\tvar curves = this.getCurves();\n\t\treturn curves[curves.length - 1];\n\t},\n\n\tisClosed: function() {\n\t\treturn this._closed;\n\t},\n\n\tsetClosed: function(closed) {\n\t\tif (this._closed != (closed = !!closed)) {\n\t\t\tthis._closed = closed;\n\t\t\tif (this._curves) {\n\t\t\t\tvar length = this._curves.length = this._countCurves();\n\t\t\t\tif (closed)\n\t\t\t\t\tthis._curves[length - 1] = new Curve(this,\n\t\t\t\t\t\tthis._segments[length - 1], this._segments[0]);\n\t\t\t}\n\t\t\tthis._changed(25);\n\t\t}\n\t}\n}, {\n\tbeans: true,\n\n\tgetPathData: function(_matrix, _precision) {\n\t\tvar segments = this._segments,\n\t\t\tlength = segments.length,\n\t\t\tf = new Formatter(_precision),\n\t\t\tcoords = new Array(6),\n\t\t\tfirst = true,\n\t\t\tcurX, curY,\n\t\t\tprevX, prevY,\n\t\t\tinX, inY,\n\t\t\toutX, outY,\n\t\t\tparts = [];\n\n\t\tfunction addSegment(segment, skipLine) {\n\t\t\tsegment._transformCoordinates(_matrix, coords);\n\t\t\tcurX = coords[0];\n\t\t\tcurY = coords[1];\n\t\t\tif (first) {\n\t\t\t\tparts.push('M' + f.pair(curX, curY));\n\t\t\t\tfirst = false;\n\t\t\t} else {\n\t\t\t\tinX = coords[2];\n\t\t\t\tinY = coords[3];\n\t\t\t\tif (inX === curX && inY === curY\n\t\t\t\t\t\t&& outX === prevX && outY === prevY) {\n\t\t\t\t\tif (!skipLine) {\n\t\t\t\t\t\tvar dx = curX - prevX,\n\t\t\t\t\t\t\tdy = curY - prevY;\n\t\t\t\t\t\tparts.push(\n\t\t\t\t\t\t\t  dx === 0 ? 'v' + f.number(dy)\n\t\t\t\t\t\t\t: dy === 0 ? 'h' + f.number(dx)\n\t\t\t\t\t\t\t: 'l' + f.pair(dx, dy));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tparts.push('c' + f.pair(outX - prevX, outY - prevY)\n\t\t\t\t\t\t\t + ' ' + f.pair( inX - prevX,  inY - prevY)\n\t\t\t\t\t\t\t + ' ' + f.pair(curX - prevX, curY - prevY));\n\t\t\t\t}\n\t\t\t}\n\t\t\tprevX = curX;\n\t\t\tprevY = curY;\n\t\t\toutX = coords[4];\n\t\t\toutY = coords[5];\n\t\t}\n\n\t\tif (!length)\n\t\t\treturn '';\n\n\t\tfor (var i = 0; i < length; i++)\n\t\t\taddSegment(segments[i]);\n\t\tif (this._closed && length > 0) {\n\t\t\taddSegment(segments[0], true);\n\t\t\tparts.push('z');\n\t\t}\n\t\treturn parts.join('');\n\t},\n\n\tisEmpty: function() {\n\t\treturn !this._segments.length;\n\t},\n\n\t_transformContent: function(matrix) {\n\t\tvar segments = this._segments,\n\t\t\tcoords = new Array(6);\n\t\tfor (var i = 0, l = segments.length; i < l; i++)\n\t\t\tsegments[i]._transformCoordinates(matrix, coords, true);\n\t\treturn true;\n\t},\n\n\t_add: function(segs, index) {\n\t\tvar segments = this._segments,\n\t\t\tcurves = this._curves,\n\t\t\tamount = segs.length,\n\t\t\tappend = index == null,\n\t\t\tindex = append ? segments.length : index;\n\t\tfor (var i = 0; i < amount; i++) {\n\t\t\tvar segment = segs[i];\n\t\t\tif (segment._path)\n\t\t\t\tsegment = segs[i] = segment.clone();\n\t\t\tsegment._path = this;\n\t\t\tsegment._index = index + i;\n\t\t\tif (segment._selection)\n\t\t\t\tthis._updateSelection(segment, 0, segment._selection);\n\t\t}\n\t\tif (append) {\n\t\t\tsegments.push.apply(segments, segs);\n\t\t} else {\n\t\t\tsegments.splice.apply(segments, [index, 0].concat(segs));\n\t\t\tfor (var i = index + amount, l = segments.length; i < l; i++)\n\t\t\t\tsegments[i]._index = i;\n\t\t}\n\t\tif (curves) {\n\t\t\tvar total = this._countCurves(),\n\t\t\t\tstart = index > 0 && index + amount - 1 === total ? index - 1\n\t\t\t\t\t: index,\n\t\t\t\tinsert = start,\n\t\t\t\tend = Math.min(start + amount, total);\n\t\t\tif (segs._curves) {\n\t\t\t\tcurves.splice.apply(curves, [start, 0].concat(segs._curves));\n\t\t\t\tinsert += segs._curves.length;\n\t\t\t}\n\t\t\tfor (var i = insert; i < end; i++)\n\t\t\t\tcurves.splice(i, 0, new Curve(this, null, null));\n\t\t\tthis._adjustCurves(start, end);\n\t\t}\n\t\tthis._changed(25);\n\t\treturn segs;\n\t},\n\n\t_adjustCurves: function(start, end) {\n\t\tvar segments = this._segments,\n\t\t\tcurves = this._curves,\n\t\t\tcurve;\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tcurve = curves[i];\n\t\t\tcurve._path = this;\n\t\t\tcurve._segment1 = segments[i];\n\t\t\tcurve._segment2 = segments[i + 1] || segments[0];\n\t\t\tcurve._changed();\n\t\t}\n\t\tif (curve = curves[this._closed && !start ? segments.length - 1\n\t\t\t\t: start - 1]) {\n\t\t\tcurve._segment2 = segments[start] || segments[0];\n\t\t\tcurve._changed();\n\t\t}\n\t\tif (curve = curves[end]) {\n\t\t\tcurve._segment1 = segments[end];\n\t\t\tcurve._changed();\n\t\t}\n\t},\n\n\t_countCurves: function() {\n\t\tvar length = this._segments.length;\n\t\treturn !this._closed && length > 0 ? length - 1 : length;\n\t},\n\n\tadd: function(segment1 ) {\n\t\treturn arguments.length > 1 && typeof segment1 !== 'number'\n\t\t\t? this._add(Segment.readList(arguments))\n\t\t\t: this._add([ Segment.read(arguments) ])[0];\n\t},\n\n\tinsert: function(index, segment1 ) {\n\t\treturn arguments.length > 2 && typeof segment1 !== 'number'\n\t\t\t? this._add(Segment.readList(arguments, 1), index)\n\t\t\t: this._add([ Segment.read(arguments, 1) ], index)[0];\n\t},\n\n\taddSegment: function() {\n\t\treturn this._add([ Segment.read(arguments) ])[0];\n\t},\n\n\tinsertSegment: function(index ) {\n\t\treturn this._add([ Segment.read(arguments, 1) ], index)[0];\n\t},\n\n\taddSegments: function(segments) {\n\t\treturn this._add(Segment.readList(segments));\n\t},\n\n\tinsertSegments: function(index, segments) {\n\t\treturn this._add(Segment.readList(segments), index);\n\t},\n\n\tremoveSegment: function(index) {\n\t\treturn this.removeSegments(index, index + 1)[0] || null;\n\t},\n\n\tremoveSegments: function(start, end, _includeCurves) {\n\t\tstart = start || 0;\n\t\tend = Base.pick(end, this._segments.length);\n\t\tvar segments = this._segments,\n\t\t\tcurves = this._curves,\n\t\t\tcount = segments.length,\n\t\t\tremoved = segments.splice(start, end - start),\n\t\t\tamount = removed.length;\n\t\tif (!amount)\n\t\t\treturn removed;\n\t\tfor (var i = 0; i < amount; i++) {\n\t\t\tvar segment = removed[i];\n\t\t\tif (segment._selection)\n\t\t\t\tthis._updateSelection(segment, segment._selection, 0);\n\t\t\tsegment._index = segment._path = null;\n\t\t}\n\t\tfor (var i = start, l = segments.length; i < l; i++)\n\t\t\tsegments[i]._index = i;\n\t\tif (curves) {\n\t\t\tvar index = start > 0 && end === count + (this._closed ? 1 : 0)\n\t\t\t\t\t? start - 1\n\t\t\t\t\t: start,\n\t\t\t\tcurves = curves.splice(index, amount);\n\t\t\tfor (var i = curves.length - 1; i >= 0; i--)\n\t\t\t\tcurves[i]._path = null;\n\t\t\tif (_includeCurves)\n\t\t\t\tremoved._curves = curves.slice(1);\n\t\t\tthis._adjustCurves(index, index);\n\t\t}\n\t\tthis._changed(25);\n\t\treturn removed;\n\t},\n\n\tclear: '#removeSegments',\n\n\thasHandles: function() {\n\t\tvar segments = this._segments;\n\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\tif (segments[i].hasHandles())\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tclearHandles: function() {\n\t\tvar segments = this._segments;\n\t\tfor (var i = 0, l = segments.length; i < l; i++)\n\t\t\tsegments[i].clearHandles();\n\t},\n\n\tgetLength: function() {\n\t\tif (this._length == null) {\n\t\t\tvar curves = this.getCurves(),\n\t\t\t\tlength = 0;\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++)\n\t\t\t\tlength += curves[i].getLength();\n\t\t\tthis._length = length;\n\t\t}\n\t\treturn this._length;\n\t},\n\n\tgetArea: function() {\n\t\tvar area = this._area;\n\t\tif (area == null) {\n\t\t\tvar segments = this._segments,\n\t\t\t\tclosed = this._closed;\n\t\t\tarea = 0;\n\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\tvar last = i + 1 === l;\n\t\t\t\tarea += Curve.getArea(Curve.getValues(\n\t\t\t\t\t\tsegments[i], segments[last ? 0 : i + 1],\n\t\t\t\t\t\tnull, last && !closed));\n\t\t\t}\n\t\t\tthis._area = area;\n\t\t}\n\t\treturn area;\n\t},\n\n\tisFullySelected: function() {\n\t\tvar length = this._segments.length;\n\t\treturn this.isSelected() && length > 0 && this._segmentSelection\n\t\t\t\t=== length * 7;\n\t},\n\n\tsetFullySelected: function(selected) {\n\t\tif (selected)\n\t\t\tthis._selectSegments(true);\n\t\tthis.setSelected(selected);\n\t},\n\n\tsetSelection: function setSelection(selection) {\n\t\tif (!(selection & 1))\n\t\t\tthis._selectSegments(false);\n\t\tsetSelection.base.call(this, selection);\n\t},\n\n\t_selectSegments: function(selected) {\n\t\tvar segments = this._segments,\n\t\t\tlength = segments.length,\n\t\t\tselection = selected ? 7 : 0;\n\t\tthis._segmentSelection = selection * length;\n\t\tfor (var i = 0; i < length; i++)\n\t\t\tsegments[i]._selection = selection;\n\t},\n\n\t_updateSelection: function(segment, oldSelection, newSelection) {\n\t\tsegment._selection = newSelection;\n\t\tvar selection = this._segmentSelection += newSelection - oldSelection;\n\t\tif (selection > 0)\n\t\t\tthis.setSelected(true);\n\t},\n\n\tdivideAt: function(location) {\n\t\tvar loc = this.getLocationAt(location),\n\t\t\tcurve;\n\t\treturn loc && (curve = loc.getCurve().divideAt(loc.getCurveOffset()))\n\t\t\t\t? curve._segment1\n\t\t\t\t: null;\n\t},\n\n\tsplitAt: function(location) {\n\t\tvar loc = this.getLocationAt(location),\n\t\t\tindex = loc && loc.index,\n\t\t\ttime = loc && loc.time,\n\t\t\ttMin = 1e-8,\n\t\t\ttMax = 1 - tMin;\n\t\tif (time > tMax) {\n\t\t\tindex++;\n\t\t\ttime = 0;\n\t\t}\n\t\tvar curves = this.getCurves();\n\t\tif (index >= 0 && index < curves.length) {\n\t\t\tif (time >= tMin) {\n\t\t\t\tcurves[index++].divideAtTime(time);\n\t\t\t}\n\t\t\tvar segs = this.removeSegments(index, this._segments.length, true),\n\t\t\t\tpath;\n\t\t\tif (this._closed) {\n\t\t\t\tthis.setClosed(false);\n\t\t\t\tpath = this;\n\t\t\t} else {\n\t\t\t\tpath = new Path(Item.NO_INSERT);\n\t\t\t\tpath.insertAbove(this);\n\t\t\t\tpath.copyAttributes(this);\n\t\t\t}\n\t\t\tpath._add(segs, 0);\n\t\t\tthis.addSegment(segs[0]);\n\t\t\treturn path;\n\t\t}\n\t\treturn null;\n\t},\n\n\tsplit: function(index, time) {\n\t\tvar curve,\n\t\t\tlocation = time === undefined ? index\n\t\t\t\t: (curve = this.getCurves()[index])\n\t\t\t\t\t&& curve.getLocationAtTime(time);\n\t\treturn location != null ? this.splitAt(location) : null;\n\t},\n\n\tjoin: function(path, tolerance) {\n\t\tvar epsilon = tolerance || 0;\n\t\tif (path && path !== this) {\n\t\t\tvar segments = path._segments,\n\t\t\t\tlast1 = this.getLastSegment(),\n\t\t\t\tlast2 = path.getLastSegment();\n\t\t\tif (!last2)\n\t\t\t\treturn this;\n\t\t\tif (last1 && last1._point.isClose(last2._point, epsilon))\n\t\t\t\tpath.reverse();\n\t\t\tvar first2 = path.getFirstSegment();\n\t\t\tif (last1 && last1._point.isClose(first2._point, epsilon)) {\n\t\t\t\tlast1.setHandleOut(first2._handleOut);\n\t\t\t\tthis._add(segments.slice(1));\n\t\t\t} else {\n\t\t\t\tvar first1 = this.getFirstSegment();\n\t\t\t\tif (first1 && first1._point.isClose(first2._point, epsilon))\n\t\t\t\t\tpath.reverse();\n\t\t\t\tlast2 = path.getLastSegment();\n\t\t\t\tif (first1 && first1._point.isClose(last2._point, epsilon)) {\n\t\t\t\t\tfirst1.setHandleIn(last2._handleIn);\n\t\t\t\t\tthis._add(segments.slice(0, segments.length - 1), 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis._add(segments.slice());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (path._closed)\n\t\t\t\tthis._add([segments[0]]);\n\t\t\tpath.remove();\n\t\t}\n\t\tvar first = this.getFirstSegment(),\n\t\t\tlast = this.getLastSegment();\n\t\tif (first !== last && first._point.isClose(last._point, epsilon)) {\n\t\t\tfirst.setHandleIn(last._handleIn);\n\t\t\tlast.remove();\n\t\t\tthis.setClosed(true);\n\t\t}\n\t\treturn this;\n\t},\n\n\treduce: function(options) {\n\t\tvar curves = this.getCurves(),\n\t\t\tsimplify = options && options.simplify,\n\t\t\ttolerance = simplify ? 1e-7 : 0;\n\t\tfor (var i = curves.length - 1; i >= 0; i--) {\n\t\t\tvar curve = curves[i];\n\t\t\tif (!curve.hasHandles() && (!curve.hasLength(tolerance)\n\t\t\t\t\t|| simplify && curve.isCollinear(curve.getNext())))\n\t\t\t\tcurve.remove();\n\t\t}\n\t\treturn this;\n\t},\n\n\treverse: function() {\n\t\tthis._segments.reverse();\n\t\tfor (var i = 0, l = this._segments.length; i < l; i++) {\n\t\t\tvar segment = this._segments[i];\n\t\t\tvar handleIn = segment._handleIn;\n\t\t\tsegment._handleIn = segment._handleOut;\n\t\t\tsegment._handleOut = handleIn;\n\t\t\tsegment._index = i;\n\t\t}\n\t\tthis._curves = null;\n\t\tthis._changed(9);\n\t},\n\n\tflatten: function(flatness) {\n\t\tvar flattener = new PathFlattener(this, flatness || 0.25, 256, true),\n\t\t\tparts = flattener.parts,\n\t\t\tlength = parts.length,\n\t\t\tsegments = [];\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tsegments.push(new Segment(parts[i].curve.slice(0, 2)));\n\t\t}\n\t\tif (!this._closed && length > 0) {\n\t\t\tsegments.push(new Segment(parts[length - 1].curve.slice(6)));\n\t\t}\n\t\tthis.setSegments(segments);\n\t},\n\n\tsimplify: function(tolerance) {\n\t\tvar segments = new PathFitter(this).fit(tolerance || 2.5);\n\t\tif (segments)\n\t\t\tthis.setSegments(segments);\n\t\treturn !!segments;\n\t},\n\n\tsmooth: function(options) {\n\t\tvar that = this,\n\t\t\topts = options || {},\n\t\t\ttype = opts.type || 'asymmetric',\n\t\t\tsegments = this._segments,\n\t\t\tlength = segments.length,\n\t\t\tclosed = this._closed;\n\n\t\tfunction getIndex(value, _default) {\n\t\t\tvar index = value && value.index;\n\t\t\tif (index != null) {\n\t\t\t\tvar path = value.path;\n\t\t\t\tif (path && path !== that)\n\t\t\t\t\tthrow new Error(value._class + ' ' + index + ' of ' + path\n\t\t\t\t\t\t\t+ ' is not part of ' + that);\n\t\t\t\tif (_default && value instanceof Curve)\n\t\t\t\t\tindex++;\n\t\t\t} else {\n\t\t\t\tindex = typeof value === 'number' ? value : _default;\n\t\t\t}\n\t\t\treturn Math.min(index < 0 && closed\n\t\t\t\t\t? index % length\n\t\t\t\t\t: index < 0 ? index + length : index, length - 1);\n\t\t}\n\n\t\tvar loop = closed && opts.from === undefined && opts.to === undefined,\n\t\t\tfrom = getIndex(opts.from, 0),\n\t\t\tto = getIndex(opts.to, length - 1);\n\n\t\tif (from > to) {\n\t\t\tif (closed) {\n\t\t\t\tfrom -= length;\n\t\t\t} else {\n\t\t\t\tvar tmp = from;\n\t\t\t\tfrom = to;\n\t\t\t\tto = tmp;\n\t\t\t}\n\t\t}\n\t\tif (/^(?:asymmetric|continuous)$/.test(type)) {\n\t\t\tvar asymmetric = type === 'asymmetric',\n\t\t\t\tmin = Math.min,\n\t\t\t\tamount = to - from + 1,\n\t\t\t\tn = amount - 1,\n\t\t\t\tpadding = loop ? min(amount, 4) : 1,\n\t\t\t\tpaddingLeft = padding,\n\t\t\t\tpaddingRight = padding,\n\t\t\t\tknots = [];\n\t\t\tif (!closed) {\n\t\t\t\tpaddingLeft = min(1, from);\n\t\t\t\tpaddingRight = min(1, length - to - 1);\n\t\t\t}\n\t\t\tn += paddingLeft + paddingRight;\n\t\t\tif (n <= 1)\n\t\t\t\treturn;\n\t\t\tfor (var i = 0, j = from - paddingLeft; i <= n; i++, j++) {\n\t\t\t\tknots[i] = segments[(j < 0 ? j + length : j) % length]._point;\n\t\t\t}\n\n\t\t\tvar x = knots[0]._x + 2 * knots[1]._x,\n\t\t\t\ty = knots[0]._y + 2 * knots[1]._y,\n\t\t\t\tf = 2,\n\t\t\t\tn_1 = n - 1,\n\t\t\t\trx = [x],\n\t\t\t\try = [y],\n\t\t\t\trf = [f],\n\t\t\t\tpx = [],\n\t\t\t\tpy = [];\n\t\t\tfor (var i = 1; i < n; i++) {\n\t\t\t\tvar internal = i < n_1,\n\t\t\t\t\ta = internal ? 1 : asymmetric ? 1 : 2,\n\t\t\t\t\tb = internal ? 4 : asymmetric ? 2 : 7,\n\t\t\t\t\tu = internal ? 4 : asymmetric ? 3 : 8,\n\t\t\t\t\tv = internal ? 2 : asymmetric ? 0 : 1,\n\t\t\t\t\tm = a / f;\n\t\t\t\tf = rf[i] = b - m;\n\t\t\t\tx = rx[i] = u * knots[i]._x + v * knots[i + 1]._x - m * x;\n\t\t\t\ty = ry[i] = u * knots[i]._y + v * knots[i + 1]._y - m * y;\n\t\t\t}\n\n\t\t\tpx[n_1] = rx[n_1] / rf[n_1];\n\t\t\tpy[n_1] = ry[n_1] / rf[n_1];\n\t\t\tfor (var i = n - 2; i >= 0; i--) {\n\t\t\t\tpx[i] = (rx[i] - px[i + 1]) / rf[i];\n\t\t\t\tpy[i] = (ry[i] - py[i + 1]) / rf[i];\n\t\t\t}\n\t\t\tpx[n] = (3 * knots[n]._x - px[n_1]) / 2;\n\t\t\tpy[n] = (3 * knots[n]._y - py[n_1]) / 2;\n\n\t\t\tfor (var i = paddingLeft, max = n - paddingRight, j = from;\n\t\t\t\t\ti <= max; i++, j++) {\n\t\t\t\tvar segment = segments[j < 0 ? j + length : j],\n\t\t\t\t\tpt = segment._point,\n\t\t\t\t\thx = px[i] - pt._x,\n\t\t\t\t\thy = py[i] - pt._y;\n\t\t\t\tif (loop || i < max)\n\t\t\t\t\tsegment.setHandleOut(hx, hy);\n\t\t\t\tif (loop || i > paddingLeft)\n\t\t\t\t\tsegment.setHandleIn(-hx, -hy);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var i = from; i <= to; i++) {\n\t\t\t\tsegments[i < 0 ? i + length : i].smooth(opts,\n\t\t\t\t\t\t!loop && i === from, !loop && i === to);\n\t\t\t}\n\t\t}\n\t},\n\n\ttoShape: function(insert) {\n\t\tif (!this._closed)\n\t\t\treturn null;\n\n\t\tvar segments = this._segments,\n\t\t\ttype,\n\t\t\tsize,\n\t\t\tradius,\n\t\t\ttopCenter;\n\n\t\tfunction isCollinear(i, j) {\n\t\t\tvar seg1 = segments[i],\n\t\t\t\tseg2 = seg1.getNext(),\n\t\t\t\tseg3 = segments[j],\n\t\t\t\tseg4 = seg3.getNext();\n\t\t\treturn seg1._handleOut.isZero() && seg2._handleIn.isZero()\n\t\t\t\t\t&& seg3._handleOut.isZero() && seg4._handleIn.isZero()\n\t\t\t\t\t&& seg2._point.subtract(seg1._point).isCollinear(\n\t\t\t\t\t\tseg4._point.subtract(seg3._point));\n\t\t}\n\n\t\tfunction isOrthogonal(i) {\n\t\t\tvar seg2 = segments[i],\n\t\t\t\tseg1 = seg2.getPrevious(),\n\t\t\t\tseg3 = seg2.getNext();\n\t\t\treturn seg1._handleOut.isZero() && seg2._handleIn.isZero()\n\t\t\t\t\t&& seg2._handleOut.isZero() && seg3._handleIn.isZero()\n\t\t\t\t\t&& seg2._point.subtract(seg1._point).isOrthogonal(\n\t\t\t\t\t\tseg3._point.subtract(seg2._point));\n\t\t}\n\n\t\tfunction isArc(i) {\n\t\t\tvar seg1 = segments[i],\n\t\t\t\tseg2 = seg1.getNext(),\n\t\t\t\thandle1 = seg1._handleOut,\n\t\t\t\thandle2 = seg2._handleIn,\n\t\t\t\tkappa = 0.5522847498307936;\n\t\t\tif (handle1.isOrthogonal(handle2)) {\n\t\t\t\tvar pt1 = seg1._point,\n\t\t\t\t\tpt2 = seg2._point,\n\t\t\t\t\tcorner = new Line(pt1, handle1, true).intersect(\n\t\t\t\t\t\t\tnew Line(pt2, handle2, true), true);\n\t\t\t\treturn corner && Numerical.isZero(handle1.getLength() /\n\t\t\t\t\t\tcorner.subtract(pt1).getLength() - kappa)\n\t\t\t\t\t&& Numerical.isZero(handle2.getLength() /\n\t\t\t\t\t\tcorner.subtract(pt2).getLength() - kappa);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction getDistance(i, j) {\n\t\t\treturn segments[i]._point.getDistance(segments[j]._point);\n\t\t}\n\n\t\tif (!this.hasHandles() && segments.length === 4\n\t\t\t\t&& isCollinear(0, 2) && isCollinear(1, 3) && isOrthogonal(1)) {\n\t\t\ttype = Shape.Rectangle;\n\t\t\tsize = new Size(getDistance(0, 3), getDistance(0, 1));\n\t\t\ttopCenter = segments[1]._point.add(segments[2]._point).divide(2);\n\t\t} else if (segments.length === 8 && isArc(0) && isArc(2) && isArc(4)\n\t\t\t\t&& isArc(6) && isCollinear(1, 5) && isCollinear(3, 7)) {\n\t\t\ttype = Shape.Rectangle;\n\t\t\tsize = new Size(getDistance(1, 6), getDistance(0, 3));\n\t\t\tradius = size.subtract(new Size(getDistance(0, 7),\n\t\t\t\t\tgetDistance(1, 2))).divide(2);\n\t\t\ttopCenter = segments[3]._point.add(segments[4]._point).divide(2);\n\t\t} else if (segments.length === 4\n\t\t\t\t&& isArc(0) && isArc(1) && isArc(2) && isArc(3)) {\n\t\t\tif (Numerical.isZero(getDistance(0, 2) - getDistance(1, 3))) {\n\t\t\t\ttype = Shape.Circle;\n\t\t\t\tradius = getDistance(0, 2) / 2;\n\t\t\t} else {\n\t\t\t\ttype = Shape.Ellipse;\n\t\t\t\tradius = new Size(getDistance(2, 0) / 2, getDistance(3, 1) / 2);\n\t\t\t}\n\t\t\ttopCenter = segments[1]._point;\n\t\t}\n\n\t\tif (type) {\n\t\t\tvar center = this.getPosition(true),\n\t\t\t\tshape = new type({\n\t\t\t\t\tcenter: center,\n\t\t\t\t\tsize: size,\n\t\t\t\t\tradius: radius,\n\t\t\t\t\tinsert: false\n\t\t\t\t});\n\t\t\tshape.copyAttributes(this, true);\n\t\t\tshape._matrix.prepend(this._matrix);\n\t\t\tshape.rotate(topCenter.subtract(center).getAngle() + 90);\n\t\t\tif (insert === undefined || insert)\n\t\t\t\tshape.insertAbove(this);\n\t\t\treturn shape;\n\t\t}\n\t\treturn null;\n\t},\n\n\ttoPath: '#clone',\n\n\tcompare: function compare(path) {\n\t\tif (!path || path instanceof CompoundPath)\n\t\t\treturn compare.base.call(this, path);\n\t\tvar curves1 = this.getCurves(),\n\t\t\tcurves2 = path.getCurves(),\n\t\t\tlength1 = curves1.length,\n\t\t\tlength2 = curves2.length;\n\t\tif (!length1 || !length2) {\n\t\t\treturn length1 == length2;\n\t\t}\n\t\tvar v1 = curves1[0].getValues(),\n\t\t\tvalues2 = [],\n\t\t\tpos1 = 0, pos2,\n\t\t\tend1 = 0, end2;\n\t\tfor (var i = 0; i < length2; i++) {\n\t\t\tvar v2 = curves2[i].getValues();\n\t\t\tvalues2.push(v2);\n\t\t\tvar overlaps = Curve.getOverlaps(v1, v2);\n\t\t\tif (overlaps) {\n\t\t\t\tpos2 = !i && overlaps[0][0] > 0 ? length2 - 1 : i;\n\t\t\t\tend2 = overlaps[0][1];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar abs = Math.abs,\n\t\t\tepsilon = 1e-8,\n\t\t\tv2 = values2[pos2],\n\t\t\tstart2;\n\t\twhile (v1 && v2) {\n\t\t\tvar overlaps = Curve.getOverlaps(v1, v2);\n\t\t\tif (overlaps) {\n\t\t\t\tvar t1 = overlaps[0][0];\n\t\t\t\tif (abs(t1 - end1) < epsilon) {\n\t\t\t\t\tend1 = overlaps[1][0];\n\t\t\t\t\tif (end1 === 1) {\n\t\t\t\t\t\tv1 = ++pos1 < length1 ? curves1[pos1].getValues() : null;\n\t\t\t\t\t\tend1 = 0;\n\t\t\t\t\t}\n\t\t\t\t\tvar t2 = overlaps[0][1];\n\t\t\t\t\tif (abs(t2 - end2) < epsilon) {\n\t\t\t\t\t\tif (!start2)\n\t\t\t\t\t\t\tstart2 = [pos2, t2];\n\t\t\t\t\t\tend2 = overlaps[1][1];\n\t\t\t\t\t\tif (end2 === 1) {\n\t\t\t\t\t\t\tif (++pos2 >= length2)\n\t\t\t\t\t\t\t\tpos2 = 0;\n\t\t\t\t\t\t\tv2 = values2[pos2] || curves2[pos2].getValues();\n\t\t\t\t\t\t\tend2 = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!v1) {\n\t\t\t\t\t\t\treturn start2[0] === pos2 && start2[1] === end2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t},\n\n\t_hitTestSelf: function(point, options, viewMatrix, strokeMatrix) {\n\t\tvar that = this,\n\t\t\tstyle = this.getStyle(),\n\t\t\tsegments = this._segments,\n\t\t\tnumSegments = segments.length,\n\t\t\tclosed = this._closed,\n\t\t\ttolerancePadding = options._tolerancePadding,\n\t\t\tstrokePadding = tolerancePadding,\n\t\t\tjoin, cap, miterLimit,\n\t\t\tarea, loc, res,\n\t\t\thitStroke = options.stroke && style.hasStroke(),\n\t\t\thitFill = options.fill && style.hasFill(),\n\t\t\thitCurves = options.curves,\n\t\t\tstrokeRadius = hitStroke\n\t\t\t\t\t? style.getStrokeWidth() / 2\n\t\t\t\t\t: hitFill && options.tolerance > 0 || hitCurves\n\t\t\t\t\t\t? 0 : null;\n\t\tif (strokeRadius !== null) {\n\t\t\tif (strokeRadius > 0) {\n\t\t\t\tjoin = style.getStrokeJoin();\n\t\t\t\tcap = style.getStrokeCap();\n\t\t\t\tmiterLimit = style.getMiterLimit();\n\t\t\t\tstrokePadding = strokePadding.add(\n\t\t\t\t\tPath._getStrokePadding(strokeRadius, strokeMatrix));\n\t\t\t} else {\n\t\t\t\tjoin = cap = 'round';\n\t\t\t}\n\t\t}\n\n\t\tfunction isCloseEnough(pt, padding) {\n\t\t\treturn point.subtract(pt).divide(padding).length <= 1;\n\t\t}\n\n\t\tfunction checkSegmentPoint(seg, pt, name) {\n\t\t\tif (!options.selected || pt.isSelected()) {\n\t\t\t\tvar anchor = seg._point;\n\t\t\t\tif (pt !== anchor)\n\t\t\t\t\tpt = pt.add(anchor);\n\t\t\t\tif (isCloseEnough(pt, strokePadding)) {\n\t\t\t\t\treturn new HitResult(name, that, {\n\t\t\t\t\t\tsegment: seg,\n\t\t\t\t\t\tpoint: pt\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction checkSegmentPoints(seg, ends) {\n\t\t\treturn (ends || options.segments)\n\t\t\t\t&& checkSegmentPoint(seg, seg._point, 'segment')\n\t\t\t\t|| (!ends && options.handles) && (\n\t\t\t\t\tcheckSegmentPoint(seg, seg._handleIn, 'handle-in') ||\n\t\t\t\t\tcheckSegmentPoint(seg, seg._handleOut, 'handle-out'));\n\t\t}\n\n\t\tfunction addToArea(point) {\n\t\t\tarea.add(point);\n\t\t}\n\n\t\tfunction checkSegmentStroke(segment) {\n\t\t\tvar isJoin = closed || segment._index > 0\n\t\t\t\t\t&& segment._index < numSegments - 1;\n\t\t\tif ((isJoin ? join : cap) === 'round') {\n\t\t\t\treturn isCloseEnough(segment._point, strokePadding);\n\t\t\t} else {\n\t\t\t\tarea = new Path({ internal: true, closed: true });\n\t\t\t\tif (isJoin) {\n\t\t\t\t\tif (!segment.isSmooth()) {\n\t\t\t\t\t\tPath._addBevelJoin(segment, join, strokeRadius,\n\t\t\t\t\t\t\t   miterLimit, null, strokeMatrix, addToArea, true);\n\t\t\t\t\t}\n\t\t\t\t} else if (cap === 'square') {\n\t\t\t\t\tPath._addSquareCap(segment, cap, strokeRadius, null,\n\t\t\t\t\t\t\tstrokeMatrix, addToArea, true);\n\t\t\t\t}\n\t\t\t\tif (!area.isEmpty()) {\n\t\t\t\t\tvar loc;\n\t\t\t\t\treturn area.contains(point)\n\t\t\t\t\t\t|| (loc = area.getNearestLocation(point))\n\t\t\t\t\t\t\t&& isCloseEnough(loc.getPoint(), tolerancePadding);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (options.ends && !options.segments && !closed) {\n\t\t\tif (res = checkSegmentPoints(segments[0], true)\n\t\t\t\t\t|| checkSegmentPoints(segments[numSegments - 1], true))\n\t\t\t\treturn res;\n\t\t} else if (options.segments || options.handles) {\n\t\t\tfor (var i = 0; i < numSegments; i++)\n\t\t\t\tif (res = checkSegmentPoints(segments[i]))\n\t\t\t\t\treturn res;\n\t\t}\n\t\tif (strokeRadius !== null) {\n\t\t\tloc = this.getNearestLocation(point);\n\t\t\tif (loc) {\n\t\t\t\tvar time = loc.getTime();\n\t\t\t\tif (time === 0 || time === 1 && numSegments > 1) {\n\t\t\t\t\tif (!checkSegmentStroke(loc.getSegment()))\n\t\t\t\t\t\tloc = null;\n\t\t\t\t} else if (!isCloseEnough(loc.getPoint(), strokePadding)) {\n\t\t\t\t\tloc = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!loc && join === 'miter' && numSegments > 1) {\n\t\t\t\tfor (var i = 0; i < numSegments; i++) {\n\t\t\t\t\tvar segment = segments[i];\n\t\t\t\t\tif (point.getDistance(segment._point)\n\t\t\t\t\t\t\t<= miterLimit * strokeRadius\n\t\t\t\t\t\t\t&& checkSegmentStroke(segment)) {\n\t\t\t\t\t\tloc = segment.getLocation();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn !loc && hitFill && this._contains(point)\n\t\t\t\t|| loc && !hitStroke && !hitCurves\n\t\t\t\t\t? new HitResult('fill', this)\n\t\t\t\t\t: loc\n\t\t\t\t\t\t? new HitResult(hitStroke ? 'stroke' : 'curve', this, {\n\t\t\t\t\t\t\tlocation: loc,\n\t\t\t\t\t\t\tpoint: loc.getPoint()\n\t\t\t\t\t\t})\n\t\t\t\t\t\t: null;\n\t}\n\n}, Base.each(Curve._evaluateMethods,\n\tfunction(name) {\n\t\tthis[name + 'At'] = function(offset) {\n\t\t\tvar loc = this.getLocationAt(offset);\n\t\t\treturn loc && loc[name]();\n\t\t};\n\t},\n{\n\tbeans: false,\n\n\tgetLocationOf: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tcurves = this.getCurves();\n\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\tvar loc = curves[i].getLocationOf(point);\n\t\t\tif (loc)\n\t\t\t\treturn loc;\n\t\t}\n\t\treturn null;\n\t},\n\n\tgetOffsetOf: function() {\n\t\tvar loc = this.getLocationOf.apply(this, arguments);\n\t\treturn loc ? loc.getOffset() : null;\n\t},\n\n\tgetLocationAt: function(offset) {\n\t\tif (typeof offset === 'number') {\n\t\t\tvar curves = this.getCurves(),\n\t\t\t\tlength = 0;\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\t\tvar start = length,\n\t\t\t\t\tcurve = curves[i];\n\t\t\t\tlength += curve.getLength();\n\t\t\t\tif (length > offset) {\n\t\t\t\t\treturn curve.getLocationAt(offset - start);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (curves.length > 0 && offset <= this.getLength()) {\n\t\t\t\treturn new CurveLocation(curves[curves.length - 1], 1);\n\t\t\t}\n\t\t} else if (offset && offset.getPath && offset.getPath() === this) {\n\t\t\treturn offset;\n\t\t}\n\t\treturn null;\n\t}\n\n}),\nnew function() {\n\n\tfunction drawHandles(ctx, segments, matrix, size) {\n\t\tvar half = size / 2,\n\t\t\tcoords = new Array(6),\n\t\t\tpX, pY;\n\n\t\tfunction drawHandle(index) {\n\t\t\tvar hX = coords[index],\n\t\t\t\thY = coords[index + 1];\n\t\t\tif (pX != hX || pY != hY) {\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(pX, pY);\n\t\t\t\tctx.lineTo(hX, hY);\n\t\t\t\tctx.stroke();\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(hX, hY, half, 0, Math.PI * 2, true);\n\t\t\t\tctx.fill();\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\tvar segment = segments[i],\n\t\t\t\tselection = segment._selection;\n\t\t\tsegment._transformCoordinates(matrix, coords);\n\t\t\tpX = coords[0];\n\t\t\tpY = coords[1];\n\t\t\tif (selection & 2)\n\t\t\t\tdrawHandle(2);\n\t\t\tif (selection & 4)\n\t\t\t\tdrawHandle(4);\n\t\t\tctx.fillRect(pX - half, pY - half, size, size);\n\t\t\tif (!(selection & 1)) {\n\t\t\t\tvar fillStyle = ctx.fillStyle;\n\t\t\t\tctx.fillStyle = '#ffffff';\n\t\t\t\tctx.fillRect(pX - half + 1, pY - half + 1, size - 2, size - 2);\n\t\t\t\tctx.fillStyle = fillStyle;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction drawSegments(ctx, path, matrix) {\n\t\tvar segments = path._segments,\n\t\t\tlength = segments.length,\n\t\t\tcoords = new Array(6),\n\t\t\tfirst = true,\n\t\t\tcurX, curY,\n\t\t\tprevX, prevY,\n\t\t\tinX, inY,\n\t\t\toutX, outY;\n\n\t\tfunction drawSegment(segment) {\n\t\t\tif (matrix) {\n\t\t\t\tsegment._transformCoordinates(matrix, coords);\n\t\t\t\tcurX = coords[0];\n\t\t\t\tcurY = coords[1];\n\t\t\t} else {\n\t\t\t\tvar point = segment._point;\n\t\t\t\tcurX = point._x;\n\t\t\t\tcurY = point._y;\n\t\t\t}\n\t\t\tif (first) {\n\t\t\t\tctx.moveTo(curX, curY);\n\t\t\t\tfirst = false;\n\t\t\t} else {\n\t\t\t\tif (matrix) {\n\t\t\t\t\tinX = coords[2];\n\t\t\t\t\tinY = coords[3];\n\t\t\t\t} else {\n\t\t\t\t\tvar handle = segment._handleIn;\n\t\t\t\t\tinX = curX + handle._x;\n\t\t\t\t\tinY = curY + handle._y;\n\t\t\t\t}\n\t\t\t\tif (inX === curX && inY === curY\n\t\t\t\t\t\t&& outX === prevX && outY === prevY) {\n\t\t\t\t\tctx.lineTo(curX, curY);\n\t\t\t\t} else {\n\t\t\t\t\tctx.bezierCurveTo(outX, outY, inX, inY, curX, curY);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprevX = curX;\n\t\t\tprevY = curY;\n\t\t\tif (matrix) {\n\t\t\t\toutX = coords[4];\n\t\t\t\toutY = coords[5];\n\t\t\t} else {\n\t\t\t\tvar handle = segment._handleOut;\n\t\t\t\toutX = prevX + handle._x;\n\t\t\t\toutY = prevY + handle._y;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i < length; i++)\n\t\t\tdrawSegment(segments[i]);\n\t\tif (path._closed && length > 0)\n\t\t\tdrawSegment(segments[0]);\n\t}\n\n\treturn {\n\t\t_draw: function(ctx, param, viewMatrix, strokeMatrix) {\n\t\t\tvar dontStart = param.dontStart,\n\t\t\t\tdontPaint = param.dontFinish || param.clip,\n\t\t\t\tstyle = this.getStyle(),\n\t\t\t\thasFill = style.hasFill(),\n\t\t\t\thasStroke = style.hasStroke(),\n\t\t\t\tdashArray = style.getDashArray(),\n\t\t\t\tdashLength = !paper.support.nativeDash && hasStroke\n\t\t\t\t\t\t&& dashArray && dashArray.length;\n\n\t\t\tif (!dontStart)\n\t\t\t\tctx.beginPath();\n\n\t\t\tif (hasFill || hasStroke && !dashLength || dontPaint) {\n\t\t\t\tdrawSegments(ctx, this, strokeMatrix);\n\t\t\t\tif (this._closed)\n\t\t\t\t\tctx.closePath();\n\t\t\t}\n\n\t\t\tfunction getOffset(i) {\n\t\t\t\treturn dashArray[((i % dashLength) + dashLength) % dashLength];\n\t\t\t}\n\n\t\t\tif (!dontPaint && (hasFill || hasStroke)) {\n\t\t\t\tthis._setStyles(ctx, param, viewMatrix);\n\t\t\t\tif (hasFill) {\n\t\t\t\t\tctx.fill(style.getFillRule());\n\t\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t\t}\n\t\t\t\tif (hasStroke) {\n\t\t\t\t\tif (dashLength) {\n\t\t\t\t\t\tif (!dontStart)\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tvar flattener = new PathFlattener(this, 0.25, 32, false,\n\t\t\t\t\t\t\t\tstrokeMatrix),\n\t\t\t\t\t\t\tlength = flattener.length,\n\t\t\t\t\t\t\tfrom = -style.getDashOffset(), to,\n\t\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\tfrom = from % length;\n\t\t\t\t\t\twhile (from > 0) {\n\t\t\t\t\t\t\tfrom -= getOffset(i--) + getOffset(i--);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (from < length) {\n\t\t\t\t\t\t\tto = from + getOffset(i++);\n\t\t\t\t\t\t\tif (from > 0 || to > 0)\n\t\t\t\t\t\t\t\tflattener.drawPart(ctx,\n\t\t\t\t\t\t\t\t\t\tMath.max(from, 0), Math.max(to, 0));\n\t\t\t\t\t\t\tfrom = to + getOffset(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_drawSelected: function(ctx, matrix) {\n\t\t\tctx.beginPath();\n\t\t\tdrawSegments(ctx, this, matrix);\n\t\t\tctx.stroke();\n\t\t\tdrawHandles(ctx, this._segments, matrix, paper.settings.handleSize);\n\t\t}\n\t};\n},\nnew function() {\n\tfunction getCurrentSegment(that) {\n\t\tvar segments = that._segments;\n\t\tif (!segments.length)\n\t\t\tthrow new Error('Use a moveTo() command first');\n\t\treturn segments[segments.length - 1];\n\t}\n\n\treturn {\n\t\tmoveTo: function() {\n\t\t\tvar segments = this._segments;\n\t\t\tif (segments.length === 1)\n\t\t\t\tthis.removeSegment(0);\n\t\t\tif (!segments.length)\n\t\t\t\tthis._add([ new Segment(Point.read(arguments)) ]);\n\t\t},\n\n\t\tmoveBy: function() {\n\t\t\tthrow new Error('moveBy() is unsupported on Path items.');\n\t\t},\n\n\t\tlineTo: function() {\n\t\t\tthis._add([ new Segment(Point.read(arguments)) ]);\n\t\t},\n\n\t\tcubicCurveTo: function() {\n\t\t\tvar handle1 = Point.read(arguments),\n\t\t\t\thandle2 = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this);\n\t\t\tcurrent.setHandleOut(handle1.subtract(current._point));\n\t\t\tthis._add([ new Segment(to, handle2.subtract(to)) ]);\n\t\t},\n\n\t\tquadraticCurveTo: function() {\n\t\t\tvar handle = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.cubicCurveTo(\n\t\t\t\thandle.add(current.subtract(handle).multiply(1 / 3)),\n\t\t\t\thandle.add(to.subtract(handle).multiply(1 / 3)),\n\t\t\t\tto\n\t\t\t);\n\t\t},\n\n\t\tcurveTo: function() {\n\t\t\tvar through = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tt = Base.pick(Base.read(arguments), 0.5),\n\t\t\t\tt1 = 1 - t,\n\t\t\t\tcurrent = getCurrentSegment(this)._point,\n\t\t\t\thandle = through.subtract(current.multiply(t1 * t1))\n\t\t\t\t\t.subtract(to.multiply(t * t)).divide(2 * t * t1);\n\t\t\tif (handle.isNaN())\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Cannot put a curve through points with parameter = ' + t);\n\t\t\tthis.quadraticCurveTo(handle, to);\n\t\t},\n\n\t\tarcTo: function() {\n\t\t\tvar abs = Math.abs,\n\t\t\t\tsqrt = Math.sqrt,\n\t\t\t\tcurrent = getCurrentSegment(this),\n\t\t\t\tfrom = current._point,\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tthrough,\n\t\t\t\tpeek = Base.peek(arguments),\n\t\t\t\tclockwise = Base.pick(peek, true),\n\t\t\t\tcenter, extent, vector, matrix;\n\t\t\tif (typeof clockwise === 'boolean') {\n\t\t\t\tvar middle = from.add(to).divide(2),\n\t\t\t\tthrough = middle.add(middle.subtract(from).rotate(\n\t\t\t\t\t\tclockwise ? -90 : 90));\n\t\t\t} else if (Base.remain(arguments) <= 2) {\n\t\t\t\tthrough = to;\n\t\t\t\tto = Point.read(arguments);\n\t\t\t} else {\n\t\t\t\tvar radius = Size.read(arguments),\n\t\t\t\t\tisZero = Numerical.isZero;\n\t\t\t\tif (isZero(radius.width) || isZero(radius.height))\n\t\t\t\t\treturn this.lineTo(to);\n\t\t\t\tvar rotation = Base.read(arguments),\n\t\t\t\t\tclockwise = !!Base.read(arguments),\n\t\t\t\t\tlarge = !!Base.read(arguments),\n\t\t\t\t\tmiddle = from.add(to).divide(2),\n\t\t\t\t\tpt = from.subtract(middle).rotate(-rotation),\n\t\t\t\t\tx = pt.x,\n\t\t\t\t\ty = pt.y,\n\t\t\t\t\trx = abs(radius.width),\n\t\t\t\t\try = abs(radius.height),\n\t\t\t\t\trxSq = rx * rx,\n\t\t\t\t\trySq = ry * ry,\n\t\t\t\t\txSq = x * x,\n\t\t\t\t\tySq = y * y;\n\t\t\t\tvar factor = sqrt(xSq / rxSq + ySq / rySq);\n\t\t\t\tif (factor > 1) {\n\t\t\t\t\trx *= factor;\n\t\t\t\t\try *= factor;\n\t\t\t\t\trxSq = rx * rx;\n\t\t\t\t\trySq = ry * ry;\n\t\t\t\t}\n\t\t\t\tfactor = (rxSq * rySq - rxSq * ySq - rySq * xSq) /\n\t\t\t\t\t\t(rxSq * ySq + rySq * xSq);\n\t\t\t\tif (abs(factor) < 1e-12)\n\t\t\t\t\tfactor = 0;\n\t\t\t\tif (factor < 0)\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Cannot create an arc with the given arguments');\n\t\t\t\tcenter = new Point(rx * y / ry, -ry * x / rx)\n\t\t\t\t\t\t.multiply((large === clockwise ? -1 : 1) * sqrt(factor))\n\t\t\t\t\t\t.rotate(rotation).add(middle);\n\t\t\t\tmatrix = new Matrix().translate(center).rotate(rotation)\n\t\t\t\t\t\t.scale(rx, ry);\n\t\t\t\tvector = matrix._inverseTransform(from);\n\t\t\t\textent = vector.getDirectedAngle(matrix._inverseTransform(to));\n\t\t\t\tif (!clockwise && extent > 0)\n\t\t\t\t\textent -= 360;\n\t\t\t\telse if (clockwise && extent < 0)\n\t\t\t\t\textent += 360;\n\t\t\t}\n\t\t\tif (through) {\n\t\t\t\tvar l1 = new Line(from.add(through).divide(2),\n\t\t\t\t\t\t\tthrough.subtract(from).rotate(90), true),\n\t\t\t\t\tl2 = new Line(through.add(to).divide(2),\n\t\t\t\t\t\t\tto.subtract(through).rotate(90), true),\n\t\t\t\t\tline = new Line(from, to),\n\t\t\t\t\tthroughSide = line.getSide(through);\n\t\t\t\tcenter = l1.intersect(l2, true);\n\t\t\t\tif (!center) {\n\t\t\t\t\tif (!throughSide)\n\t\t\t\t\t\treturn this.lineTo(to);\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Cannot create an arc with the given arguments');\n\t\t\t\t}\n\t\t\t\tvector = from.subtract(center);\n\t\t\t\textent = vector.getDirectedAngle(to.subtract(center));\n\t\t\t\tvar centerSide = line.getSide(center);\n\t\t\t\tif (centerSide === 0) {\n\t\t\t\t\textent = throughSide * abs(extent);\n\t\t\t\t} else if (throughSide === centerSide) {\n\t\t\t\t\textent += extent < 0 ? 360 : -360;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar epsilon = 1e-7,\n\t\t\t\text = abs(extent),\n\t\t\t\tcount = ext >= 360 ? 4 : Math.ceil((ext - epsilon) / 90),\n\t\t\t\tinc = extent / count,\n\t\t\t\thalf = inc * Math.PI / 360,\n\t\t\t\tz = 4 / 3 * Math.sin(half) / (1 + Math.cos(half)),\n\t\t\t\tsegments = [];\n\t\t\tfor (var i = 0; i <= count; i++) {\n\t\t\t\tvar pt = to,\n\t\t\t\t\tout = null;\n\t\t\t\tif (i < count) {\n\t\t\t\t\tout = vector.rotate(90).multiply(z);\n\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\tpt = matrix._transformPoint(vector);\n\t\t\t\t\t\tout = matrix._transformPoint(vector.add(out))\n\t\t\t\t\t\t\t\t.subtract(pt);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt = center.add(vector);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!i) {\n\t\t\t\t\tcurrent.setHandleOut(out);\n\t\t\t\t} else {\n\t\t\t\t\tvar _in = vector.rotate(-90).multiply(z);\n\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\t_in = matrix._transformPoint(vector.add(_in))\n\t\t\t\t\t\t\t\t.subtract(pt);\n\t\t\t\t\t}\n\t\t\t\t\tsegments.push(new Segment(pt, _in, out));\n\t\t\t\t}\n\t\t\t\tvector = vector.rotate(inc);\n\t\t\t}\n\t\t\tthis._add(segments);\n\t\t},\n\n\t\tlineBy: function() {\n\t\t\tvar to = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.lineTo(current.add(to));\n\t\t},\n\n\t\tcurveBy: function() {\n\t\t\tvar through = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tparameter = Base.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.curveTo(current.add(through), current.add(to), parameter);\n\t\t},\n\n\t\tcubicCurveBy: function() {\n\t\t\tvar handle1 = Point.read(arguments),\n\t\t\t\thandle2 = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.cubicCurveTo(current.add(handle1), current.add(handle2),\n\t\t\t\t\tcurrent.add(to));\n\t\t},\n\n\t\tquadraticCurveBy: function() {\n\t\t\tvar handle = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.quadraticCurveTo(current.add(handle), current.add(to));\n\t\t},\n\n\t\tarcBy: function() {\n\t\t\tvar current = getCurrentSegment(this)._point,\n\t\t\t\tpoint = current.add(Point.read(arguments)),\n\t\t\t\tclockwise = Base.pick(Base.peek(arguments), true);\n\t\t\tif (typeof clockwise === 'boolean') {\n\t\t\t\tthis.arcTo(point, clockwise);\n\t\t\t} else {\n\t\t\t\tthis.arcTo(point, current.add(Point.read(arguments)));\n\t\t\t}\n\t\t},\n\n\t\tclosePath: function(tolerance) {\n\t\t\tthis.setClosed(true);\n\t\t\tthis.join(this, tolerance);\n\t\t}\n\t};\n}, {\n\n\t_getBounds: function(matrix, options) {\n\t\tvar method = options.handle\n\t\t\t\t? 'getHandleBounds'\n\t\t\t\t: options.stroke\n\t\t\t\t? 'getStrokeBounds'\n\t\t\t\t: 'getBounds';\n\t\treturn Path[method](this._segments, this._closed, this, matrix, options);\n\t},\n\nstatics: {\n\tgetBounds: function(segments, closed, path, matrix, options, strokePadding) {\n\t\tvar first = segments[0];\n\t\tif (!first)\n\t\t\treturn new Rectangle();\n\t\tvar coords = new Array(6),\n\t\t\tprevCoords = first._transformCoordinates(matrix, new Array(6)),\n\t\t\tmin = prevCoords.slice(0, 2),\n\t\t\tmax = min.slice(),\n\t\t\troots = new Array(2);\n\n\t\tfunction processSegment(segment) {\n\t\t\tsegment._transformCoordinates(matrix, coords);\n\t\t\tfor (var i = 0; i < 2; i++) {\n\t\t\t\tCurve._addBounds(\n\t\t\t\t\tprevCoords[i],\n\t\t\t\t\tprevCoords[i + 4],\n\t\t\t\t\tcoords[i + 2],\n\t\t\t\t\tcoords[i],\n\t\t\t\t\ti, strokePadding ? strokePadding[i] : 0, min, max, roots);\n\t\t\t}\n\t\t\tvar tmp = prevCoords;\n\t\t\tprevCoords = coords;\n\t\t\tcoords = tmp;\n\t\t}\n\n\t\tfor (var i = 1, l = segments.length; i < l; i++)\n\t\t\tprocessSegment(segments[i]);\n\t\tif (closed)\n\t\t\tprocessSegment(first);\n\t\treturn new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\t},\n\n\tgetStrokeBounds: function(segments, closed, path, matrix, options) {\n\t\tvar style = path.getStyle(),\n\t\t\tstroke = style.hasStroke(),\n\t\t\tstrokeWidth = style.getStrokeWidth(),\n\t\t\tstrokeMatrix = stroke && path._getStrokeMatrix(matrix, options),\n\t\t\tstrokePadding = stroke && Path._getStrokePadding(strokeWidth,\n\t\t\t\tstrokeMatrix),\n\t\t\tbounds = Path.getBounds(segments, closed, path, matrix, options,\n\t\t\t\tstrokePadding);\n\t\tif (!stroke)\n\t\t\treturn bounds;\n\t\tvar strokeRadius = strokeWidth / 2,\n\t\t\tjoin = style.getStrokeJoin(),\n\t\t\tcap = style.getStrokeCap(),\n\t\t\tmiterLimit = style.getMiterLimit(),\n\t\t\tjoinBounds = new Rectangle(new Size(strokePadding));\n\n\t\tfunction addPoint(point) {\n\t\t\tbounds = bounds.include(point);\n\t\t}\n\n\t\tfunction addRound(segment) {\n\t\t\tbounds = bounds.unite(\n\t\t\t\t\tjoinBounds.setCenter(segment._point.transform(matrix)));\n\t\t}\n\n\t\tfunction addJoin(segment, join) {\n\t\t\tif (join === 'round' || segment.isSmooth()) {\n\t\t\t\taddRound(segment);\n\t\t\t} else {\n\t\t\t\tPath._addBevelJoin(segment, join, strokeRadius, miterLimit,\n\t\t\t\t\t\tmatrix, strokeMatrix, addPoint);\n\t\t\t}\n\t\t}\n\n\t\tfunction addCap(segment, cap) {\n\t\t\tif (cap === 'round') {\n\t\t\t\taddRound(segment);\n\t\t\t} else {\n\t\t\t\tPath._addSquareCap(segment, cap, strokeRadius, matrix,\n\t\t\t\t\t\tstrokeMatrix, addPoint);\n\t\t\t}\n\t\t}\n\n\t\tvar length = segments.length - (closed ? 0 : 1);\n\t\tfor (var i = 1; i < length; i++)\n\t\t\taddJoin(segments[i], join);\n\t\tif (closed) {\n\t\t\taddJoin(segments[0], join);\n\t\t} else if (length > 0) {\n\t\t\taddCap(segments[0], cap);\n\t\t\taddCap(segments[segments.length - 1], cap);\n\t\t}\n\t\treturn bounds;\n\t},\n\n\t_getStrokePadding: function(radius, matrix) {\n\t\tif (!matrix)\n\t\t\treturn [radius, radius];\n\t\tvar hor = new Point(radius, 0).transform(matrix),\n\t\t\tver = new Point(0, radius).transform(matrix),\n\t\t\tphi = hor.getAngleInRadians(),\n\t\t\ta = hor.getLength(),\n\t\t\tb = ver.getLength();\n\t\tvar sin = Math.sin(phi),\n\t\t\tcos = Math.cos(phi),\n\t\t\ttan = Math.tan(phi),\n\t\t\ttx = Math.atan2(b * tan, a),\n\t\t\tty = Math.atan2(b, tan * a);\n\t\treturn [Math.abs(a * Math.cos(tx) * cos + b * Math.sin(tx) * sin),\n\t\t\t\tMath.abs(b * Math.sin(ty) * cos + a * Math.cos(ty) * sin)];\n\t},\n\n\t_addBevelJoin: function(segment, join, radius, miterLimit, matrix,\n\t\t\tstrokeMatrix, addPoint, isArea) {\n\t\tvar curve2 = segment.getCurve(),\n\t\t\tcurve1 = curve2.getPrevious(),\n\t\t\tpoint = curve2.getPoint1().transform(matrix),\n\t\t\tnormal1 = curve1.getNormalAtTime(1).multiply(radius)\n\t\t\t\t.transform(strokeMatrix),\n\t\t\tnormal2 = curve2.getNormalAtTime(0).multiply(radius)\n\t\t\t\t.transform(strokeMatrix);\n\t\tif (normal1.getDirectedAngle(normal2) < 0) {\n\t\t\tnormal1 = normal1.negate();\n\t\t\tnormal2 = normal2.negate();\n\t\t}\n\t\tif (isArea)\n\t\t\taddPoint(point);\n\t\taddPoint(point.add(normal1));\n\t\tif (join === 'miter') {\n\t\t\tvar corner = new Line(point.add(normal1),\n\t\t\t\t\tnew Point(-normal1.y, normal1.x), true\n\t\t\t\t).intersect(new Line(point.add(normal2),\n\t\t\t\t\tnew Point(-normal2.y, normal2.x), true\n\t\t\t\t), true);\n\t\t\tif (corner && point.getDistance(corner) <= miterLimit * radius) {\n\t\t\t\taddPoint(corner);\n\t\t\t}\n\t\t}\n\t\taddPoint(point.add(normal2));\n\t},\n\n\t_addSquareCap: function(segment, cap, radius, matrix, strokeMatrix,\n\t\t\taddPoint, isArea) {\n\t\tvar point = segment._point.transform(matrix),\n\t\t\tloc = segment.getLocation(),\n\t\t\tnormal = loc.getNormal()\n\t\t\t\t\t.multiply(loc.getTime() === 0 ? radius : -radius)\n\t\t\t\t\t.transform(strokeMatrix);\n\t\tif (cap === 'square') {\n\t\t\tif (isArea) {\n\t\t\t\taddPoint(point.subtract(normal));\n\t\t\t\taddPoint(point.add(normal));\n\t\t\t}\n\t\t\tpoint = point.add(normal.rotate(-90));\n\t\t}\n\t\taddPoint(point.add(normal));\n\t\taddPoint(point.subtract(normal));\n\t},\n\n\tgetHandleBounds: function(segments, closed, path, matrix, options) {\n\t\tvar style = path.getStyle(),\n\t\t\tstroke = options.stroke && style.hasStroke(),\n\t\t\tstrokePadding,\n\t\t\tjoinPadding;\n\t\tif (stroke) {\n\t\t\tvar strokeMatrix = path._getStrokeMatrix(matrix, options),\n\t\t\t\tstrokeRadius = style.getStrokeWidth() / 2,\n\t\t\t\tjoinRadius = strokeRadius;\n\t\t\tif (style.getStrokeJoin() === 'miter')\n\t\t\t\tjoinRadius = strokeRadius * style.getMiterLimit();\n\t\t\tif (style.getStrokeCap() === 'square')\n\t\t\t\tjoinRadius = Math.max(joinRadius, strokeRadius * Math.SQRT2);\n\t\t\tstrokePadding = Path._getStrokePadding(strokeRadius, strokeMatrix);\n\t\t\tjoinPadding = Path._getStrokePadding(joinRadius, strokeMatrix);\n\t\t}\n\t\tvar coords = new Array(6),\n\t\t\tx1 = Infinity,\n\t\t\tx2 = -x1,\n\t\t\ty1 = x1,\n\t\t\ty2 = x2;\n\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\tvar segment = segments[i];\n\t\t\tsegment._transformCoordinates(matrix, coords);\n\t\t\tfor (var j = 0; j < 6; j += 2) {\n\t\t\t\tvar padding = !j ? joinPadding : strokePadding,\n\t\t\t\t\tpaddingX = padding ? padding[0] : 0,\n\t\t\t\t\tpaddingY = padding ? padding[1] : 0,\n\t\t\t\t\tx = coords[j],\n\t\t\t\t\ty = coords[j + 1],\n\t\t\t\t\txn = x - paddingX,\n\t\t\t\t\txx = x + paddingX,\n\t\t\t\t\tyn = y - paddingY,\n\t\t\t\t\tyx = y + paddingY;\n\t\t\t\tif (xn < x1) x1 = xn;\n\t\t\t\tif (xx > x2) x2 = xx;\n\t\t\t\tif (yn < y1) y1 = yn;\n\t\t\t\tif (yx > y2) y2 = yx;\n\t\t\t}\n\t\t}\n\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t}\n}});\n\nPath.inject({ statics: new function() {\n\n\tvar kappa = 0.5522847498307936,\n\t\tellipseSegments = [\n\t\t\tnew Segment([-1, 0], [0, kappa ], [0, -kappa]),\n\t\t\tnew Segment([0, -1], [-kappa, 0], [kappa, 0 ]),\n\t\t\tnew Segment([1, 0], [0, -kappa], [0, kappa ]),\n\t\t\tnew Segment([0, 1], [kappa, 0 ], [-kappa, 0])\n\t\t];\n\n\tfunction createPath(segments, closed, args) {\n\t\tvar props = Base.getNamed(args),\n\t\t\tpath = new Path(props && props.insert == false && Item.NO_INSERT);\n\t\tpath._add(segments);\n\t\tpath._closed = closed;\n\t\treturn path.set(props, { insert: true });\n\t}\n\n\tfunction createEllipse(center, radius, args) {\n\t\tvar segments = new Array(4);\n\t\tfor (var i = 0; i < 4; i++) {\n\t\t\tvar segment = ellipseSegments[i];\n\t\t\tsegments[i] = new Segment(\n\t\t\t\tsegment._point.multiply(radius).add(center),\n\t\t\t\tsegment._handleIn.multiply(radius),\n\t\t\t\tsegment._handleOut.multiply(radius)\n\t\t\t);\n\t\t}\n\t\treturn createPath(segments, true, args);\n\t}\n\n\treturn {\n\t\tLine: function() {\n\t\t\treturn createPath([\n\t\t\t\tnew Segment(Point.readNamed(arguments, 'from')),\n\t\t\t\tnew Segment(Point.readNamed(arguments, 'to'))\n\t\t\t], false, arguments);\n\t\t},\n\n\t\tCircle: function() {\n\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\tradius = Base.readNamed(arguments, 'radius');\n\t\t\treturn createEllipse(center, new Size(radius), arguments);\n\t\t},\n\n\t\tRectangle: function() {\n\t\t\tvar rect = Rectangle.readNamed(arguments, 'rectangle'),\n\t\t\t\tradius = Size.readNamed(arguments, 'radius', 0,\n\t\t\t\t\t\t{ readNull: true }),\n\t\t\t\tbl = rect.getBottomLeft(true),\n\t\t\t\ttl = rect.getTopLeft(true),\n\t\t\t\ttr = rect.getTopRight(true),\n\t\t\t\tbr = rect.getBottomRight(true),\n\t\t\t\tsegments;\n\t\t\tif (!radius || radius.isZero()) {\n\t\t\t\tsegments = [\n\t\t\t\t\tnew Segment(bl),\n\t\t\t\t\tnew Segment(tl),\n\t\t\t\t\tnew Segment(tr),\n\t\t\t\t\tnew Segment(br)\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\tradius = Size.min(radius, rect.getSize(true).divide(2));\n\t\t\t\tvar rx = radius.width,\n\t\t\t\t\try = radius.height,\n\t\t\t\t\thx = rx * kappa,\n\t\t\t\t\thy = ry * kappa;\n\t\t\t\tsegments = [\n\t\t\t\t\tnew Segment(bl.add(rx, 0), null, [-hx, 0]),\n\t\t\t\t\tnew Segment(bl.subtract(0, ry), [0, hy]),\n\t\t\t\t\tnew Segment(tl.add(0, ry), null, [0, -hy]),\n\t\t\t\t\tnew Segment(tl.add(rx, 0), [-hx, 0], null),\n\t\t\t\t\tnew Segment(tr.subtract(rx, 0), null, [hx, 0]),\n\t\t\t\t\tnew Segment(tr.add(0, ry), [0, -hy], null),\n\t\t\t\t\tnew Segment(br.subtract(0, ry), null, [0, hy]),\n\t\t\t\t\tnew Segment(br.subtract(rx, 0), [hx, 0])\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn createPath(segments, true, arguments);\n\t\t},\n\n\t\tRoundRectangle: '#Rectangle',\n\n\t\tEllipse: function() {\n\t\t\tvar ellipse = Shape._readEllipse(arguments);\n\t\t\treturn createEllipse(ellipse.center, ellipse.radius, arguments);\n\t\t},\n\n\t\tOval: '#Ellipse',\n\n\t\tArc: function() {\n\t\t\tvar from = Point.readNamed(arguments, 'from'),\n\t\t\t\tthrough = Point.readNamed(arguments, 'through'),\n\t\t\t\tto = Point.readNamed(arguments, 'to'),\n\t\t\t\tprops = Base.getNamed(arguments),\n\t\t\t\tpath = new Path(props && props.insert == false\n\t\t\t\t\t\t&& Item.NO_INSERT);\n\t\t\tpath.moveTo(from);\n\t\t\tpath.arcTo(through, to);\n\t\t\treturn path.set(props);\n\t\t},\n\n\t\tRegularPolygon: function() {\n\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\tsides = Base.readNamed(arguments, 'sides'),\n\t\t\t\tradius = Base.readNamed(arguments, 'radius'),\n\t\t\t\tstep = 360 / sides,\n\t\t\t\tthree = sides % 3 === 0,\n\t\t\t\tvector = new Point(0, three ? -radius : radius),\n\t\t\t\toffset = three ? -1 : 0.5,\n\t\t\t\tsegments = new Array(sides);\n\t\t\tfor (var i = 0; i < sides; i++)\n\t\t\t\tsegments[i] = new Segment(center.add(\n\t\t\t\t\tvector.rotate((i + offset) * step)));\n\t\t\treturn createPath(segments, true, arguments);\n\t\t},\n\n\t\tStar: function() {\n\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\tpoints = Base.readNamed(arguments, 'points') * 2,\n\t\t\t\tradius1 = Base.readNamed(arguments, 'radius1'),\n\t\t\t\tradius2 = Base.readNamed(arguments, 'radius2'),\n\t\t\t\tstep = 360 / points,\n\t\t\t\tvector = new Point(0, -1),\n\t\t\t\tsegments = new Array(points);\n\t\t\tfor (var i = 0; i < points; i++)\n\t\t\t\tsegments[i] = new Segment(center.add(vector.rotate(step * i)\n\t\t\t\t\t\t.multiply(i % 2 ? radius2 : radius1)));\n\t\t\treturn createPath(segments, true, arguments);\n\t\t}\n\t};\n}});\n\nvar CompoundPath = PathItem.extend({\n\t_class: 'CompoundPath',\n\t_serializeFields: {\n\t\tchildren: []\n\t},\n\tbeans: true,\n\n\tinitialize: function CompoundPath(arg) {\n\t\tthis._children = [];\n\t\tthis._namedChildren = {};\n\t\tif (!this._initialize(arg)) {\n\t\t\tif (typeof arg === 'string') {\n\t\t\t\tthis.setPathData(arg);\n\t\t\t} else {\n\t\t\t\tthis.addChildren(Array.isArray(arg) ? arg : arguments);\n\t\t\t}\n\t\t}\n\t},\n\n\tinsertChildren: function insertChildren(index, items) {\n\t\tvar list = items,\n\t\t\tfirst = list[0];\n\t\tif (first && typeof first[0] === 'number')\n\t\t\tlist = [list];\n\t\tfor (var i = items.length - 1; i >= 0; i--) {\n\t\t\tvar item = list[i];\n\t\t\tif (list === items && !(item instanceof Path))\n\t\t\t\tlist = Base.slice(list);\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\tlist[i] = new Path({ segments: item, insert: false });\n\t\t\t} else if (item instanceof CompoundPath) {\n\t\t\t\tlist.splice.apply(list, [i, 1].concat(item.removeChildren()));\n\t\t\t\titem.remove();\n\t\t\t}\n\t\t}\n\t\treturn insertChildren.base.call(this, index, list);\n\t},\n\n\treduce: function reduce(options) {\n\t\tvar children = this._children;\n\t\tfor (var i = children.length - 1; i >= 0; i--) {\n\t\t\tvar path = children[i].reduce(options);\n\t\t\tif (path.isEmpty())\n\t\t\t\tpath.remove();\n\t\t}\n\t\tif (!children.length) {\n\t\t\tvar path = new Path(Item.NO_INSERT);\n\t\t\tpath.copyAttributes(this);\n\t\t\tpath.insertAbove(this);\n\t\t\tthis.remove();\n\t\t\treturn path;\n\t\t}\n\t\treturn reduce.base.call(this);\n\t},\n\n\tisClosed: function() {\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tif (!children[i]._closed)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\tsetClosed: function(closed) {\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tchildren[i].setClosed(closed);\n\t\t}\n\t},\n\n\tgetFirstSegment: function() {\n\t\tvar first = this.getFirstChild();\n\t\treturn first && first.getFirstSegment();\n\t},\n\n\tgetLastSegment: function() {\n\t\tvar last = this.getLastChild();\n\t\treturn last && last.getLastSegment();\n\t},\n\n\tgetCurves: function() {\n\t\tvar children = this._children,\n\t\t\tcurves = [];\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tcurves.push.apply(curves, children[i].getCurves());\n\t\treturn curves;\n\t},\n\n\tgetFirstCurve: function() {\n\t\tvar first = this.getFirstChild();\n\t\treturn first && first.getFirstCurve();\n\t},\n\n\tgetLastCurve: function() {\n\t\tvar last = this.getLastChild();\n\t\treturn last && last.getLastCurve();\n\t},\n\n\tgetArea: function() {\n\t\tvar children = this._children,\n\t\t\tarea = 0;\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tarea += children[i].getArea();\n\t\treturn area;\n\t},\n\n\tgetLength: function() {\n\t\tvar children = this._children,\n\t\t\tlength = 0;\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tlength += children[i].getLength();\n\t\treturn length;\n\t},\n\n\tgetPathData: function(_matrix, _precision) {\n\t\tvar children = this._children,\n\t\t\tpaths = [];\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tvar child = children[i],\n\t\t\t\tmx = child._matrix;\n\t\t\tpaths.push(child.getPathData(_matrix && !mx.isIdentity()\n\t\t\t\t\t? _matrix.appended(mx) : _matrix, _precision));\n\t\t}\n\t\treturn paths.join('');\n\t},\n\n\t_hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {\n\t\treturn _hitTestChildren.base.call(this, point,\n\t\t\t\toptions.class === Path || options.type === 'path' ? options\n\t\t\t\t\t: Base.set({}, options, { fill: false }),\n\t\t\t\tviewMatrix);\n\t},\n\n\t_draw: function(ctx, param, viewMatrix, strokeMatrix) {\n\t\tvar children = this._children;\n\t\tif (!children.length)\n\t\t\treturn;\n\n\t\tparam = param.extend({ dontStart: true, dontFinish: true });\n\t\tctx.beginPath();\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tchildren[i].draw(ctx, param, strokeMatrix);\n\n\t\tif (!param.clip) {\n\t\t\tthis._setStyles(ctx, param, viewMatrix);\n\t\t\tvar style = this._style;\n\t\t\tif (style.hasFill()) {\n\t\t\t\tctx.fill(style.getFillRule());\n\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t}\n\t\t\tif (style.hasStroke())\n\t\t\t\tctx.stroke();\n\t\t}\n\t},\n\n\t_drawSelected: function(ctx, matrix, selectionItems) {\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tvar child = children[i],\n\t\t\t\tmx = child._matrix;\n\t\t\tif (!selectionItems[child._id]) {\n\t\t\t\tchild._drawSelected(ctx, mx.isIdentity() ? matrix\n\t\t\t\t\t\t: matrix.appended(mx));\n\t\t\t}\n\t\t}\n\t}\n},\nnew function() {\n\tfunction getCurrentPath(that, check) {\n\t\tvar children = that._children;\n\t\tif (check && !children.length)\n\t\t\tthrow new Error('Use a moveTo() command first');\n\t\treturn children[children.length - 1];\n\t}\n\n\treturn Base.each(['lineTo', 'cubicCurveTo', 'quadraticCurveTo', 'curveTo',\n\t\t\t'arcTo', 'lineBy', 'cubicCurveBy', 'quadraticCurveBy', 'curveBy',\n\t\t\t'arcBy'],\n\t\tfunction(key) {\n\t\t\tthis[key] = function() {\n\t\t\t\tvar path = getCurrentPath(this, true);\n\t\t\t\tpath[key].apply(path, arguments);\n\t\t\t};\n\t\t}, {\n\t\t\tmoveTo: function() {\n\t\t\t\tvar current = getCurrentPath(this),\n\t\t\t\t\tpath = current && current.isEmpty() ? current\n\t\t\t\t\t\t\t: new Path(Item.NO_INSERT);\n\t\t\t\tif (path !== current)\n\t\t\t\t\tthis.addChild(path);\n\t\t\t\tpath.moveTo.apply(path, arguments);\n\t\t\t},\n\n\t\t\tmoveBy: function() {\n\t\t\t\tvar current = getCurrentPath(this, true),\n\t\t\t\t\tlast = current && current.getLastSegment(),\n\t\t\t\t\tpoint = Point.read(arguments);\n\t\t\t\tthis.moveTo(last ? point.add(last._point) : point);\n\t\t\t},\n\n\t\t\tclosePath: function(tolerance) {\n\t\t\t\tgetCurrentPath(this, true).closePath(tolerance);\n\t\t\t}\n\t\t}\n\t);\n}, Base.each(['reverse', 'flatten', 'simplify', 'smooth'], function(key) {\n\tthis[key] = function(param) {\n\t\tvar children = this._children,\n\t\t\tres;\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tres = children[i][key](param) || res;\n\t\t}\n\t\treturn res;\n\t};\n}, {}));\n\nPathItem.inject(new function() {\n\tvar min = Math.min,\n\t\tmax = Math.max,\n\t\tabs = Math.abs,\n\t\toperators = {\n\t\t\tunite:     { '1': true, '2': true },\n\t\t\tintersect: { '2': true },\n\t\t\tsubtract:  { '1': true },\n\t\t\texclude:   { '1': true, '-1': true }\n\t\t};\n\n\tfunction preparePath(path, resolve) {\n\t\tvar res = path.clone(false).reduce({ simplify: true })\n\t\t\t\t.transform(null, true, true);\n\t\treturn resolve\n\t\t\t\t? res.resolveCrossings().reorient(\n\t\t\t\t\tres.getFillRule() === 'nonzero', true)\n\t\t\t\t: res;\n\t}\n\n\tfunction createResult(paths, simplify, path1, path2, options) {\n\t\tvar result = new CompoundPath(Item.NO_INSERT);\n\t\tresult.addChildren(paths, true);\n\t\tresult = result.reduce({ simplify: simplify });\n\t\tif (!(options && options.insert == false)) {\n\t\t\tresult.insertAbove(path2 && path1.isSibling(path2)\n\t\t\t\t\t&& path1.getIndex() < path2.getIndex() ? path2 : path1);\n\t\t}\n\t\tresult.copyAttributes(path1, true);\n\t\treturn result;\n\t}\n\n\tfunction traceBoolean(path1, path2, operation, options) {\n\t\tif (options && (options.trace == false || options.stroke) &&\n\t\t\t\t/^(subtract|intersect)$/.test(operation))\n\t\t\treturn splitBoolean(path1, path2, operation);\n\t\tvar _path1 = preparePath(path1, true),\n\t\t\t_path2 = path2 && path1 !== path2 && preparePath(path2, true),\n\t\t\toperator = operators[operation];\n\t\toperator[operation] = true;\n\t\tif (_path2 && (operator.subtract || operator.exclude)\n\t\t\t\t^ (_path2.isClockwise() ^ _path1.isClockwise()))\n\t\t\t_path2.reverse();\n\t\tvar crossings = divideLocations(\n\t\t\t\tCurveLocation.expand(_path1.getCrossings(_path2))),\n\t\t\tpaths1 = _path1._children || [_path1],\n\t\t\tpaths2 = _path2 && (_path2._children || [_path2]),\n\t\t\tsegments = [],\n\t\t\tcurves = [],\n\t\t\tpaths;\n\n\t\tfunction collect(paths) {\n\t\t\tfor (var i = 0, l = paths.length; i < l; i++) {\n\t\t\t\tvar path = paths[i];\n\t\t\t\tsegments.push.apply(segments, path._segments);\n\t\t\t\tcurves.push.apply(curves, path.getCurves());\n\t\t\t\tpath._overlapsOnly = true;\n\t\t\t}\n\t\t}\n\n\t\tif (crossings.length) {\n\t\t\tcollect(paths1);\n\t\t\tif (paths2)\n\t\t\t\tcollect(paths2);\n\t\t\tfor (var i = 0, l = crossings.length; i < l; i++) {\n\t\t\t\tpropagateWinding(crossings[i]._segment, _path1, _path2, curves,\n\t\t\t\t\t\toperator);\n\t\t\t}\n\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\tvar segment = segments[i],\n\t\t\t\t\tinter = segment._intersection;\n\t\t\t\tif (!segment._winding) {\n\t\t\t\t\tpropagateWinding(segment, _path1, _path2, curves, operator);\n\t\t\t\t}\n\t\t\t\tif (!(inter && inter._overlap))\n\t\t\t\t\tsegment._path._overlapsOnly = false;\n\t\t\t}\n\t\t\tpaths = tracePaths(segments, operator);\n\t\t} else {\n\t\t\tpaths = reorientPaths(\n\t\t\t\t\tpaths2 ? paths1.concat(paths2) : paths1.slice(),\n\t\t\t\t\tfunction(w) {\n\t\t\t\t\t\treturn !!operator[w];\n\t\t\t\t\t});\n\t\t}\n\n\t\treturn createResult(paths, true, path1, path2, options);\n\t}\n\n\tfunction splitBoolean(path1, path2, operation) {\n\t\tvar _path1 = preparePath(path1),\n\t\t\t_path2 = preparePath(path2),\n\t\t\tcrossings = _path1.getCrossings(_path2),\n\t\t\tsubtract = operation === 'subtract',\n\t\t\tdivide = operation === 'divide',\n\t\t\tadded = {},\n\t\t\tpaths = [];\n\n\t\tfunction addPath(path) {\n\t\t\tif (!added[path._id] && (divide ||\n\t\t\t\t\t_path2.contains(path.getPointAt(path.getLength() / 2))\n\t\t\t\t\t\t^ subtract)) {\n\t\t\t\tpaths.unshift(path);\n\t\t\t\treturn added[path._id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = crossings.length - 1; i >= 0; i--) {\n\t\t\tvar path = crossings[i].split();\n\t\t\tif (path) {\n\t\t\t\tif (addPath(path))\n\t\t\t\t\tpath.getFirstSegment().setHandleIn(0, 0);\n\t\t\t\t_path1.getLastSegment().setHandleOut(0, 0);\n\t\t\t}\n\t\t}\n\t\taddPath(_path1);\n\t\treturn createResult(paths, false, path1, path2);\n\t}\n\n\tfunction linkIntersections(from, to) {\n\t\tvar prev = from;\n\t\twhile (prev) {\n\t\t\tif (prev === to)\n\t\t\t\treturn;\n\t\t\tprev = prev._previous;\n\t\t}\n\t\twhile (from._next && from._next !== to)\n\t\t\tfrom = from._next;\n\t\tif (!from._next) {\n\t\t\twhile (to._previous)\n\t\t\t\tto = to._previous;\n\t\t\tfrom._next = to;\n\t\t\tto._previous = from;\n\t\t}\n\t}\n\n\tfunction clearCurveHandles(curves) {\n\t\tfor (var i = curves.length - 1; i >= 0; i--)\n\t\t\tcurves[i].clearHandles();\n\t}\n\n\tfunction reorientPaths(paths, isInside, clockwise) {\n\t\tvar length = paths && paths.length;\n\t\tif (length) {\n\t\t\tvar lookup = Base.each(paths, function (path, i) {\n\t\t\t\t\tthis[path._id] = {\n\t\t\t\t\t\tcontainer: null,\n\t\t\t\t\t\twinding: path.isClockwise() ? 1 : -1,\n\t\t\t\t\t\tindex: i\n\t\t\t\t\t};\n\t\t\t\t}, {}),\n\t\t\t\tsorted = paths.slice().sort(function (a, b) {\n\t\t\t\t\treturn abs(b.getArea()) - abs(a.getArea());\n\t\t\t\t}),\n\t\t\t\tfirst = sorted[0];\n\t\t\tif (clockwise == null)\n\t\t\t\tclockwise = first.isClockwise();\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tvar path1 = sorted[i],\n\t\t\t\t\tentry1 = lookup[path1._id],\n\t\t\t\t\tpoint = path1.getInteriorPoint(),\n\t\t\t\t\tcontainerWinding = 0;\n\t\t\t\tfor (var j = i - 1; j >= 0; j--) {\n\t\t\t\t\tvar path2 = sorted[j];\n\t\t\t\t\tif (path2.contains(point)) {\n\t\t\t\t\t\tvar entry2 = lookup[path2._id];\n\t\t\t\t\t\tcontainerWinding = entry2.winding;\n\t\t\t\t\t\tentry1.winding += containerWinding;\n\t\t\t\t\t\tentry1.container = entry2.exclude ? entry2.container\n\t\t\t\t\t\t\t\t: path2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isInside(entry1.winding) === isInside(containerWinding)) {\n\t\t\t\t\tentry1.exclude = true;\n\t\t\t\t\tpaths[entry1.index] = null;\n\t\t\t\t} else {\n\t\t\t\t\tvar container = entry1.container;\n\t\t\t\t\tpath1.setClockwise(container ? !container.isClockwise()\n\t\t\t\t\t\t\t: clockwise);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn paths;\n\t}\n\n\tfunction divideLocations(locations, include, clearLater) {\n\t\tvar results = include && [],\n\t\t\ttMin = 1e-8,\n\t\t\ttMax = 1 - tMin,\n\t\t\tclearHandles = false,\n\t\t\tclearCurves = clearLater || [],\n\t\t\tclearLookup = clearLater && {},\n\t\t\trenormalizeLocs,\n\t\t\tprevCurve,\n\t\t\tprevTime;\n\n\t\tfunction getId(curve) {\n\t\t\treturn curve._path._id + '.' + curve._segment1._index;\n\t\t}\n\n\t\tfor (var i = (clearLater && clearLater.length) - 1; i >= 0; i--) {\n\t\t\tvar curve = clearLater[i];\n\t\t\tif (curve._path)\n\t\t\t\tclearLookup[getId(curve)] = true;\n\t\t}\n\n\t\tfor (var i = locations.length - 1; i >= 0; i--) {\n\t\t\tvar loc = locations[i],\n\t\t\t\ttime = loc._time,\n\t\t\t\torigTime = time,\n\t\t\t\texclude = include && !include(loc),\n\t\t\t\tcurve = loc._curve,\n\t\t\t\tsegment;\n\t\t\tif (curve) {\n\t\t\t\tif (curve !== prevCurve) {\n\t\t\t\t\tclearHandles = !curve.hasHandles()\n\t\t\t\t\t\t\t|| clearLookup && clearLookup[getId(curve)];\n\t\t\t\t\trenormalizeLocs = [];\n\t\t\t\t\tprevTime = null;\n\t\t\t\t\tprevCurve = curve;\n\t\t\t\t} else if (prevTime >= tMin) {\n\t\t\t\t\ttime /= prevTime;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (exclude) {\n\t\t\t\tif (renormalizeLocs)\n\t\t\t\t\trenormalizeLocs.push(loc);\n\t\t\t\tcontinue;\n\t\t\t} else if (include) {\n\t\t\t\tresults.unshift(loc);\n\t\t\t}\n\t\t\tprevTime = origTime;\n\t\t\tif (time < tMin) {\n\t\t\t\tsegment = curve._segment1;\n\t\t\t} else if (time > tMax) {\n\t\t\t\tsegment = curve._segment2;\n\t\t\t} else {\n\t\t\t\tvar newCurve = curve.divideAtTime(time, true);\n\t\t\t\tif (clearHandles)\n\t\t\t\t\tclearCurves.push(curve, newCurve);\n\t\t\t\tsegment = newCurve._segment1;\n\t\t\t\tfor (var j = renormalizeLocs.length - 1; j >= 0; j--) {\n\t\t\t\t\tvar l = renormalizeLocs[j];\n\t\t\t\t\tl._time = (l._time - time) / (1 - time);\n\t\t\t\t}\n\t\t\t}\n\t\t\tloc._setSegment(segment);\n\t\t\tvar inter = segment._intersection,\n\t\t\t\tdest = loc._intersection;\n\t\t\tif (inter) {\n\t\t\t\tlinkIntersections(inter, dest);\n\t\t\t\tvar other = inter;\n\t\t\t\twhile (other) {\n\t\t\t\t\tlinkIntersections(other._intersection, inter);\n\t\t\t\t\tother = other._next;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsegment._intersection = dest;\n\t\t\t}\n\t\t}\n\t\tif (!clearLater)\n\t\t\tclearCurveHandles(clearCurves);\n\t\treturn results || locations;\n\t}\n\n\tfunction getWinding(point, curves, dir, closed, dontFlip) {\n\t\tvar ia = dir ? 1 : 0,\n\t\t\tio = ia ^ 1,\n\t\t\tpv = [point.x, point.y],\n\t\t\tpa = pv[ia],\n\t\t\tpo = pv[io],\n\t\t\twindingEpsilon = 1e-9,\n\t\t\tqualityEpsilon = 1e-6,\n\t\t\tpaL = pa - windingEpsilon,\n\t\t\tpaR = pa + windingEpsilon,\n\t\t\twindingL = 0,\n\t\t\twindingR = 0,\n\t\t\tpathWindingL = 0,\n\t\t\tpathWindingR = 0,\n\t\t\tonPath = false,\n\t\t\tonAnyPath = false,\n\t\t\tquality = 1,\n\t\t\troots = [],\n\t\t\tvPrev,\n\t\t\tvClose;\n\n\t\tfunction addWinding(v) {\n\t\t\tvar o0 = v[io + 0],\n\t\t\t\to3 = v[io + 6];\n\t\t\tif (po < min(o0, o3) || po > max(o0, o3)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar a0 = v[ia + 0],\n\t\t\t\ta1 = v[ia + 2],\n\t\t\t\ta2 = v[ia + 4],\n\t\t\t\ta3 = v[ia + 6];\n\t\t\tif (o0 === o3) {\n\t\t\t\tif (a0 < paR && a3 > paL || a3 < paR && a0 > paL) {\n\t\t\t\t\tonPath = true;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar t =   po === o0 ? 0\n\t\t\t\t\t: po === o3 ? 1\n\t\t\t\t\t: paL > max(a0, a1, a2, a3) || paR < min(a0, a1, a2, a3)\n\t\t\t\t\t? 1\n\t\t\t\t\t: Curve.solveCubic(v, io, po, roots, 0, 1) > 0\n\t\t\t\t\t\t? roots[0]\n\t\t\t\t\t\t: 1,\n\t\t\t\ta =   t === 0 ? a0\n\t\t\t\t\t: t === 1 ? a3\n\t\t\t\t\t: Curve.getPoint(v, t)[dir ? 'y' : 'x'],\n\t\t\t\twinding = o0 > o3 ? 1 : -1,\n\t\t\t\twindingPrev = vPrev[io] > vPrev[io + 6] ? 1 : -1,\n\t\t\t\ta3Prev = vPrev[ia + 6];\n\t\t\tif (po !== o0) {\n\t\t\t\tif (a < paL) {\n\t\t\t\t\tpathWindingL += winding;\n\t\t\t\t} else if (a > paR) {\n\t\t\t\t\tpathWindingR += winding;\n\t\t\t\t} else {\n\t\t\t\t\tonPath = true;\n\t\t\t\t}\n\t\t\t\tif (a > pa - qualityEpsilon && a < pa + qualityEpsilon)\n\t\t\t\t\tquality /= 2;\n\t\t\t} else {\n\t\t\t\tif (winding !== windingPrev) {\n\t\t\t\t\tif (a0 < paL) {\n\t\t\t\t\t\tpathWindingL += winding;\n\t\t\t\t\t} else if (a0 > paR) {\n\t\t\t\t\t\tpathWindingR += winding;\n\t\t\t\t\t}\n\t\t\t\t} else if (a0 != a3Prev) {\n\t\t\t\t\tif (a3Prev < paR && a > paR) {\n\t\t\t\t\t\tpathWindingR += winding;\n\t\t\t\t\t\tonPath = true;\n\t\t\t\t\t} else if (a3Prev > paL && a < paL) {\n\t\t\t\t\t\tpathWindingL += winding;\n\t\t\t\t\t\tonPath = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tquality = 0;\n\t\t\t}\n\t\t\tvPrev = v;\n\t\t\treturn !dontFlip && a > paL && a < paR\n\t\t\t\t\t&& Curve.getTangent(v, t)[dir ? 'x' : 'y'] === 0\n\t\t\t\t\t&& getWinding(point, curves, !dir, closed, true);\n\t\t}\n\n\t\tfunction handleCurve(v) {\n\t\t\tvar o0 = v[io + 0],\n\t\t\t\to1 = v[io + 2],\n\t\t\t\to2 = v[io + 4],\n\t\t\t\to3 = v[io + 6];\n\t\t\tif (po <= max(o0, o1, o2, o3) && po >= min(o0, o1, o2, o3)) {\n\t\t\t\tvar a0 = v[ia + 0],\n\t\t\t\t\ta1 = v[ia + 2],\n\t\t\t\t\ta2 = v[ia + 4],\n\t\t\t\t\ta3 = v[ia + 6],\n\t\t\t\t\tmonoCurves = paL > max(a0, a1, a2, a3) ||\n\t\t\t\t\t\t\t\t paR < min(a0, a1, a2, a3)\n\t\t\t\t\t\t\t? [v] : Curve.getMonoCurves(v, dir),\n\t\t\t\t\tres;\n\t\t\t\tfor (var i = 0, l = monoCurves.length; i < l; i++) {\n\t\t\t\t\tif (res = addWinding(monoCurves[i]))\n\t\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\tvar curve = curves[i],\n\t\t\t\tpath = curve._path,\n\t\t\t\tv = curve.getValues(),\n\t\t\t\tres;\n\t\t\tif (!i || curves[i - 1]._path !== path) {\n\t\t\t\tvPrev = null;\n\t\t\t\tif (!path._closed) {\n\t\t\t\t\tvClose = Curve.getValues(\n\t\t\t\t\t\t\tpath.getLastCurve().getSegment2(),\n\t\t\t\t\t\t\tcurve.getSegment1(),\n\t\t\t\t\t\t\tnull, !closed);\n\t\t\t\t\tif (vClose[io] !== vClose[io + 6]) {\n\t\t\t\t\t\tvPrev = vClose;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!vPrev) {\n\t\t\t\t\tvPrev = v;\n\t\t\t\t\tvar prev = path.getLastCurve();\n\t\t\t\t\twhile (prev && prev !== curve) {\n\t\t\t\t\t\tvar v2 = prev.getValues();\n\t\t\t\t\t\tif (v2[io] !== v2[io + 6]) {\n\t\t\t\t\t\t\tvPrev = v2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprev = prev.getPrevious();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (res = handleCurve(v))\n\t\t\t\treturn res;\n\n\t\t\tif (i + 1 === l || curves[i + 1]._path !== path) {\n\t\t\t\tif (vClose && (res = handleCurve(vClose)))\n\t\t\t\t\treturn res;\n\t\t\t\tif (onPath && !pathWindingL && !pathWindingR) {\n\t\t\t\t\tpathWindingL = pathWindingR = path.isClockwise(closed) ^ dir\n\t\t\t\t\t\t\t? 1 : -1;\n\t\t\t\t}\n\t\t\t\twindingL += pathWindingL;\n\t\t\t\twindingR += pathWindingR;\n\t\t\t\tpathWindingL = pathWindingR = 0;\n\t\t\t\tif (onPath) {\n\t\t\t\t\tonAnyPath = true;\n\t\t\t\t\tonPath = false;\n\t\t\t\t}\n\t\t\t\tvClose = null;\n\t\t\t}\n\t\t}\n\t\twindingL = abs(windingL);\n\t\twindingR = abs(windingR);\n\t\treturn {\n\t\t\twinding: max(windingL, windingR),\n\t\t\twindingL: windingL,\n\t\t\twindingR: windingR,\n\t\t\tquality: quality,\n\t\t\tonPath: onAnyPath\n\t\t};\n\t}\n\n\tfunction propagateWinding(segment, path1, path2, curves, operator) {\n\t\tvar chain = [],\n\t\t\tstart = segment,\n\t\t\ttotalLength = 0,\n\t\t\twinding;\n\t\tdo {\n\t\t\tvar curve = segment.getCurve(),\n\t\t\t\tlength = curve.getLength();\n\t\t\tchain.push({ segment: segment, curve: curve, length: length });\n\t\t\ttotalLength += length;\n\t\t\tsegment = segment.getNext();\n\t\t} while (segment && !segment._intersection && segment !== start);\n\t\tvar offsets = [0.5, 0.25, 0.75],\n\t\t\twinding = { winding: 0, quality: -1 },\n\t\t\ttMin = 1e-8,\n\t\t\ttMax = 1 - tMin;\n\t\tfor (var i = 0; i < offsets.length && winding.quality < 0.5; i++) {\n\t\t\tvar length = totalLength * offsets[i];\n\t\t\tfor (var j = 0, l = chain.length; j < l; j++) {\n\t\t\t\tvar entry = chain[j],\n\t\t\t\t\tcurveLength = entry.length;\n\t\t\t\tif (length <= curveLength) {\n\t\t\t\t\tvar curve = entry.curve,\n\t\t\t\t\t\tpath = curve._path,\n\t\t\t\t\t\tparent = path._parent,\n\t\t\t\t\t\toperand = parent instanceof CompoundPath ? parent : path,\n\t\t\t\t\t\tt = Numerical.clamp(curve.getTimeAt(length), tMin, tMax),\n\t\t\t\t\t\tpt = curve.getPointAtTime(t),\n\t\t\t\t\t\tdir = abs(curve.getTangentAtTime(t).y) < Math.SQRT1_2;\n\t\t\t\t\tvar wind = !(operator.subtract && path2 && (\n\t\t\t\t\t\t\toperand === path1 &&\n\t\t\t\t\t\t\t\tpath2._getWinding(pt, dir, true).winding ||\n\t\t\t\t\t\t\toperand === path2 &&\n\t\t\t\t\t\t\t\t!path1._getWinding(pt, dir, true).winding))\n\t\t\t\t\t\t\t? getWinding(pt, curves, dir, true)\n\t\t\t\t\t\t\t: { winding: 0, quality: 1 };\n\t\t\t\t\tif (wind.quality > winding.quality)\n\t\t\t\t\t\twinding = wind;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlength -= curveLength;\n\t\t\t}\n\t\t}\n\t\tfor (var j = chain.length - 1; j >= 0; j--) {\n\t\t\tchain[j].segment._winding = winding;\n\t\t}\n\t}\n\n\tfunction tracePaths(segments, operator) {\n\t\tvar paths = [],\n\t\t\tstarts;\n\n\t\tfunction isValid(seg) {\n\t\t\tvar winding;\n\t\t\treturn !!(seg && !seg._visited && (!operator\n\t\t\t\t\t|| operator[(winding = seg._winding || {}).winding]\n\t\t\t\t\t\t&& !(operator.unite && winding.winding === 2\n\t\t\t\t\t\t\t&& winding.windingL && winding.windingR)));\n\t\t}\n\n\t\tfunction isStart(seg) {\n\t\t\tif (seg) {\n\t\t\t\tfor (var i = 0, l = starts.length; i < l; i++) {\n\t\t\t\t\tif (seg === starts[i])\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction visitPath(path) {\n\t\t\tvar segments = path._segments;\n\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\tsegments[i]._visited = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction getCrossingSegments(segment, collectStarts) {\n\t\t\tvar inter = segment._intersection,\n\t\t\t\tstart = inter,\n\t\t\t\tcrossings = [];\n\t\t\tif (collectStarts)\n\t\t\t\tstarts = [segment];\n\n\t\t\tfunction collect(inter, end) {\n\t\t\t\twhile (inter && inter !== end) {\n\t\t\t\t\tvar other = inter._segment,\n\t\t\t\t\t\tpath = other && other._path;\n\t\t\t\t\tif (path) {\n\t\t\t\t\t\tvar next = other.getNext() || path.getFirstSegment(),\n\t\t\t\t\t\t\tnextInter = next._intersection;\n\t\t\t\t\t\tif (other !== segment && (isStart(other)\n\t\t\t\t\t\t\t|| isStart(next)\n\t\t\t\t\t\t\t|| next && (isValid(other) && (isValid(next)\n\t\t\t\t\t\t\t\t|| nextInter && isValid(nextInter._segment))))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcrossings.push(other);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (collectStarts)\n\t\t\t\t\t\t\tstarts.push(other);\n\t\t\t\t\t}\n\t\t\t\t\tinter = inter._next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (inter) {\n\t\t\t\tcollect(inter);\n\t\t\t\twhile (inter && inter._prev)\n\t\t\t\t\tinter = inter._prev;\n\t\t\t\tcollect(inter, start);\n\t\t\t}\n\t\t\treturn crossings;\n\t\t}\n\n\t\tsegments.sort(function(seg1, seg2) {\n\t\t\tvar inter1 = seg1._intersection,\n\t\t\t\tinter2 = seg2._intersection,\n\t\t\t\tover1 = !!(inter1 && inter1._overlap),\n\t\t\t\tover2 = !!(inter2 && inter2._overlap),\n\t\t\t\tpath1 = seg1._path,\n\t\t\t\tpath2 = seg2._path;\n\t\t\treturn over1 ^ over2\n\t\t\t\t\t? over1 ? 1 : -1\n\t\t\t\t\t: !inter1 ^ !inter2\n\t\t\t\t\t\t? inter1 ? 1 : -1\n\t\t\t\t\t\t: path1 !== path2\n\t\t\t\t\t\t\t? path1._id - path2._id\n\t\t\t\t\t\t\t: seg1._index - seg2._index;\n\t\t});\n\n\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\tvar seg = segments[i],\n\t\t\t\tvalid = isValid(seg),\n\t\t\t\tpath = null,\n\t\t\t\tfinished = false,\n\t\t\t\tclosed = true,\n\t\t\t\tbranches = [],\n\t\t\t\tbranch,\n\t\t\t\tvisited,\n\t\t\t\thandleIn;\n\t\t\tif (valid && seg._path._overlapsOnly) {\n\t\t\t\tvar path1 = seg._path,\n\t\t\t\t\tpath2 = seg._intersection._segment._path;\n\t\t\t\tif (path1.compare(path2)) {\n\t\t\t\t\tif (path1.getArea())\n\t\t\t\t\t\tpaths.push(path1.clone(false));\n\t\t\t\t\tvisitPath(path1);\n\t\t\t\t\tvisitPath(path2);\n\t\t\t\t\tvalid = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (valid) {\n\t\t\t\tvar first = !path,\n\t\t\t\t\tcrossings = getCrossingSegments(seg, first),\n\t\t\t\t\tother = crossings.shift(),\n\t\t\t\t\tfinished = !first && (isStart(seg) || isStart(other)),\n\t\t\t\t\tcross = !finished && other;\n\t\t\t\tif (first) {\n\t\t\t\t\tpath = new Path(Item.NO_INSERT);\n\t\t\t\t\tbranch = null;\n\t\t\t\t}\n\t\t\t\tif (finished) {\n\t\t\t\t\tif (seg.isFirst() || seg.isLast())\n\t\t\t\t\t\tclosed = seg._path._closed;\n\t\t\t\t\tseg._visited = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (cross && branch) {\n\t\t\t\t\tbranches.push(branch);\n\t\t\t\t\tbranch = null;\n\t\t\t\t}\n\t\t\t\tif (!branch) {\n\t\t\t\t\tif (cross)\n\t\t\t\t\t\tcrossings.push(seg);\n\t\t\t\t\tbranch = {\n\t\t\t\t\t\tstart: path._segments.length,\n\t\t\t\t\t\tcrossings: crossings,\n\t\t\t\t\t\tvisited: visited = [],\n\t\t\t\t\t\thandleIn: handleIn\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (cross)\n\t\t\t\t\tseg = other;\n\t\t\t\tif (!isValid(seg)) {\n\t\t\t\t\tpath.removeSegments(branch.start);\n\t\t\t\t\tfor (var j = 0, k = visited.length; j < k; j++) {\n\t\t\t\t\t\tvisited[j]._visited = false;\n\t\t\t\t\t}\n\t\t\t\t\tvisited.length = 0;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tseg = branch && branch.crossings.shift();\n\t\t\t\t\t\tif (!seg || !seg._path) {\n\t\t\t\t\t\t\tseg = null;\n\t\t\t\t\t\t\tbranch = branches.pop();\n\t\t\t\t\t\t\tif (branch) {\n\t\t\t\t\t\t\t\tvisited = branch.visited;\n\t\t\t\t\t\t\t\thandleIn = branch.handleIn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (branch && !isValid(seg));\n\t\t\t\t\tif (!seg)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar next = seg.getNext();\n\t\t\t\tpath.add(new Segment(seg._point, handleIn,\n\t\t\t\t\t\tnext && seg._handleOut));\n\t\t\t\tseg._visited = true;\n\t\t\t\tvisited.push(seg);\n\t\t\t\tseg = next || seg._path.getFirstSegment();\n\t\t\t\thandleIn = next && next._handleIn;\n\t\t\t}\n\t\t\tif (finished) {\n\t\t\t\tif (closed) {\n\t\t\t\t\tpath.getFirstSegment().setHandleIn(handleIn);\n\t\t\t\t\tpath.setClosed(closed);\n\t\t\t\t}\n\t\t\t\tif (path.getArea() !== 0) {\n\t\t\t\t\tpaths.push(path);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn paths;\n\t}\n\n\treturn {\n\t\t_getWinding: function(point, dir, closed) {\n\t\t\treturn getWinding(point, this.getCurves(), dir, closed);\n\t\t},\n\n\t\tunite: function(path, options) {\n\t\t\treturn traceBoolean(this, path, 'unite', options);\n\t\t},\n\n\t\tintersect: function(path, options) {\n\t\t\treturn traceBoolean(this, path, 'intersect', options);\n\t\t},\n\n\t\tsubtract: function(path, options) {\n\t\t\treturn traceBoolean(this, path, 'subtract', options);\n\t\t},\n\n\t\texclude: function(path, options) {\n\t\t\treturn traceBoolean(this, path, 'exclude', options);\n\t\t},\n\n\t\tdivide: function(path, options) {\n\t\t\treturn options && (options.trace == false || options.stroke)\n\t\t\t\t\t? splitBoolean(this, path, 'divide')\n\t\t\t\t\t: createResult([\n\t\t\t\t\t\tthis.subtract(path, options),\n\t\t\t\t\t\tthis.intersect(path, options)\n\t\t\t\t\t], true, this, path, options);\n\t\t},\n\n\t\tresolveCrossings: function() {\n\t\t\tvar children = this._children,\n\t\t\t\tpaths = children || [this];\n\n\t\t\tfunction hasOverlap(seg, path) {\n\t\t\t\tvar inter = seg && seg._intersection;\n\t\t\t\treturn inter && inter._overlap && inter._path === path;\n\t\t\t}\n\n\t\t\tvar hasOverlaps = false,\n\t\t\t\thasCrossings = false,\n\t\t\t\tintersections = this.getIntersections(null, function(inter) {\n\t\t\t\t\treturn inter.hasOverlap() && (hasOverlaps = true) ||\n\t\t\t\t\t\t\tinter.isCrossing() && (hasCrossings = true);\n\t\t\t\t}),\n\t\t\t\tclearCurves = hasOverlaps && hasCrossings && [];\n\t\t\tintersections = CurveLocation.expand(intersections);\n\t\t\tif (hasOverlaps) {\n\t\t\t\tvar overlaps = divideLocations(intersections, function(inter) {\n\t\t\t\t\treturn inter.hasOverlap();\n\t\t\t\t}, clearCurves);\n\t\t\t\tfor (var i = overlaps.length - 1; i >= 0; i--) {\n\t\t\t\t\tvar overlap = overlaps[i],\n\t\t\t\t\t\tpath = overlap._path,\n\t\t\t\t\t\tseg = overlap._segment,\n\t\t\t\t\t\tprev = seg.getPrevious(),\n\t\t\t\t\t\tnext = seg.getNext();\n\t\t\t\t\tif (hasOverlap(prev, path) && hasOverlap(next, path)) {\n\t\t\t\t\t\tseg.remove();\n\t\t\t\t\t\tprev._handleOut._set(0, 0);\n\t\t\t\t\t\tnext._handleIn._set(0, 0);\n\t\t\t\t\t\tif (prev !== seg && !prev.getCurve().hasLength()) {\n\t\t\t\t\t\t\tnext._handleIn.set(prev._handleIn);\n\t\t\t\t\t\t\tprev.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hasCrossings) {\n\t\t\t\tdivideLocations(intersections, hasOverlaps && function(inter) {\n\t\t\t\t\tvar curve1 = inter.getCurve(),\n\t\t\t\t\t\tseg1 = inter.getSegment(),\n\t\t\t\t\t\tother = inter._intersection,\n\t\t\t\t\t\tcurve2 = other._curve,\n\t\t\t\t\t\tseg2 = other._segment;\n\t\t\t\t\tif (curve1 && curve2 && curve1._path && curve2._path)\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tif (seg1)\n\t\t\t\t\t\tseg1._intersection = null;\n\t\t\t\t\tif (seg2)\n\t\t\t\t\t\tseg2._intersection = null;\n\t\t\t\t}, clearCurves);\n\t\t\t\tif (clearCurves)\n\t\t\t\t\tclearCurveHandles(clearCurves);\n\t\t\t\tpaths = tracePaths(Base.each(paths, function(path) {\n\t\t\t\t\tthis.push.apply(this, path._segments);\n\t\t\t\t}, []));\n\t\t\t}\n\t\t\tvar length = paths.length,\n\t\t\t\titem;\n\t\t\tif (length > 1 && children) {\n\t\t\t\tif (paths !== children)\n\t\t\t\t\tthis.setChildren(paths);\n\t\t\t\titem = this;\n\t\t\t} else if (length === 1 && !children) {\n\t\t\t\tif (paths[0] !== this)\n\t\t\t\t\tthis.setSegments(paths[0].removeSegments());\n\t\t\t\titem = this;\n\t\t\t}\n\t\t\tif (!item) {\n\t\t\t\titem = new CompoundPath(Item.NO_INSERT);\n\t\t\t\titem.addChildren(paths);\n\t\t\t\titem = item.reduce();\n\t\t\t\titem.copyAttributes(this);\n\t\t\t\tthis.replaceWith(item);\n\t\t\t}\n\t\t\treturn item;\n\t\t},\n\n\t\treorient: function(nonZero, clockwise) {\n\t\t\tvar children = this._children;\n\t\t\tif (children && children.length) {\n\t\t\t\tthis.setChildren(reorientPaths(this.removeChildren(),\n\t\t\t\t\t\tfunction(w) {\n\t\t\t\t\t\t\treturn !!(nonZero ? w : w & 1);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclockwise));\n\t\t\t} else if (clockwise !== undefined) {\n\t\t\t\tthis.setClockwise(clockwise);\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\n\t\tgetInteriorPoint: function() {\n\t\t\tvar bounds = this.getBounds(),\n\t\t\t\tpoint = bounds.getCenter(true);\n\t\t\tif (!this.contains(point)) {\n\t\t\t\tvar curves = this.getCurves(),\n\t\t\t\t\ty = point.y,\n\t\t\t\t\tintercepts = [],\n\t\t\t\t\troots = [];\n\t\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\t\t\tvar v = curves[i].getValues(),\n\t\t\t\t\t\to0 = v[1],\n\t\t\t\t\t\to1 = v[3],\n\t\t\t\t\t\to2 = v[5],\n\t\t\t\t\t\to3 = v[7];\n\t\t\t\t\tif (y >= min(o0, o1, o2, o3) && y <= max(o0, o1, o2, o3)) {\n\t\t\t\t\t\tvar monoCurves = Curve.getMonoCurves(v);\n\t\t\t\t\t\tfor (var j = 0, m = monoCurves.length; j < m; j++) {\n\t\t\t\t\t\t\tvar mv = monoCurves[j],\n\t\t\t\t\t\t\t\tmo0 = mv[1],\n\t\t\t\t\t\t\t\tmo3 = mv[7];\n\t\t\t\t\t\t\tif ((mo0 !== mo3) &&\n\t\t\t\t\t\t\t\t(y >= mo0 && y <= mo3 || y >= mo3 && y <= mo0)){\n\t\t\t\t\t\t\t\tvar x = y === mo0 ? mv[0]\n\t\t\t\t\t\t\t\t\t: y === mo3 ? mv[6]\n\t\t\t\t\t\t\t\t\t: Curve.solveCubic(mv, 1, y, roots, 0, 1)\n\t\t\t\t\t\t\t\t\t\t=== 1\n\t\t\t\t\t\t\t\t\t\t? Curve.getPoint(mv, roots[0]).x\n\t\t\t\t\t\t\t\t\t\t: (mv[0] + mv[6]) / 2;\n\t\t\t\t\t\t\t\tintercepts.push(x);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (intercepts.length > 1) {\n\t\t\t\t\tintercepts.sort(function(a, b) { return a - b; });\n\t\t\t\t\tpoint.x = (intercepts[0] + intercepts[1]) / 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn point;\n\t\t}\n\t};\n});\n\nvar PathFlattener = Base.extend({\n\t_class: 'PathFlattener',\n\n\tinitialize: function(path, flatness, maxRecursion, ignoreStraight, matrix) {\n\t\tvar curves = [],\n\t\t\tparts = [],\n\t\t\tlength = 0,\n\t\t\tminSpan = 1 / (maxRecursion || 32),\n\t\t\tsegments = path._segments,\n\t\t\tsegment1 = segments[0],\n\t\t\tsegment2;\n\n\t\tfunction addCurve(segment1, segment2) {\n\t\t\tvar curve = Curve.getValues(segment1, segment2, matrix);\n\t\t\tcurves.push(curve);\n\t\t\tcomputeParts(curve, segment1._index, 0, 1);\n\t\t}\n\n\t\tfunction computeParts(curve, index, t1, t2) {\n\t\t\tif ((t2 - t1) > minSpan\n\t\t\t\t\t&& !(ignoreStraight && Curve.isStraight(curve))\n\t\t\t\t\t&& !Curve.isFlatEnough(curve, flatness || 0.25)) {\n\t\t\t\tvar halves = Curve.subdivide(curve, 0.5),\n\t\t\t\t\ttMid = (t1 + t2) / 2;\n\t\t\t\tcomputeParts(halves[0], index, t1, tMid);\n\t\t\t\tcomputeParts(halves[1], index, tMid, t2);\n\t\t\t} else {\n\t\t\t\tvar dx = curve[6] - curve[0],\n\t\t\t\t\tdy = curve[7] - curve[1],\n\t\t\t\t\tdist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tif (dist > 0) {\n\t\t\t\t\tlength += dist;\n\t\t\t\t\tparts.push({\n\t\t\t\t\t\toffset: length,\n\t\t\t\t\t\tcurve: curve,\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\ttime: t2,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 1, l = segments.length; i < l; i++) {\n\t\t\tsegment2 = segments[i];\n\t\t\taddCurve(segment1, segment2);\n\t\t\tsegment1 = segment2;\n\t\t}\n\t\tif (path._closed)\n\t\t\taddCurve(segment2, segments[0]);\n\t\tthis.curves = curves;\n\t\tthis.parts = parts;\n\t\tthis.length = length;\n\t\tthis.index = 0;\n\t},\n\n\t_get: function(offset) {\n\t\tvar parts = this.parts,\n\t\t\tlength = parts.length,\n\t\t\tstart,\n\t\t\ti, j = this.index;\n\t\tfor (;;) {\n\t\t\ti = j;\n\t\t\tif (!j || parts[--j].offset < offset)\n\t\t\t\tbreak;\n\t\t}\n\t\tfor (; i < length; i++) {\n\t\t\tvar part = parts[i];\n\t\t\tif (part.offset >= offset) {\n\t\t\t\tthis.index = i;\n\t\t\t\tvar prev = parts[i - 1],\n\t\t\t\t\tprevTime = prev && prev.index === part.index ? prev.time : 0,\n\t\t\t\t\tprevOffset = prev ? prev.offset : 0;\n\t\t\t\treturn {\n\t\t\t\t\tindex: part.index,\n\t\t\t\t\ttime: prevTime + (part.time - prevTime)\n\t\t\t\t\t\t* (offset - prevOffset) / (part.offset - prevOffset)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tindex: parts[length - 1].index,\n\t\t\ttime: 1\n\t\t};\n\t},\n\n\tdrawPart: function(ctx, from, to) {\n\t\tvar start = this._get(from),\n\t\t\tend = this._get(to);\n\t\tfor (var i = start.index, l = end.index; i <= l; i++) {\n\t\t\tvar curve = Curve.getPart(this.curves[i],\n\t\t\t\t\ti === start.index ? start.time : 0,\n\t\t\t\t\ti === end.index ? end.time : 1);\n\t\t\tif (i === start.index)\n\t\t\t\tctx.moveTo(curve[0], curve[1]);\n\t\t\tctx.bezierCurveTo.apply(ctx, curve.slice(2));\n\t\t}\n\t}\n}, Base.each(Curve._evaluateMethods,\n\tfunction(name) {\n\t\tthis[name + 'At'] = function(offset) {\n\t\t\tvar param = this._get(offset);\n\t\t\treturn Curve[name](this.curves[param.index], param.time);\n\t\t};\n\t}, {})\n);\n\nvar PathFitter = Base.extend({\n\tinitialize: function(path) {\n\t\tvar points = this.points = [],\n\t\t\tsegments = path._segments,\n\t\t\tclosed = path._closed;\n\t\tfor (var i = 0, prev, l = segments.length; i < l; i++) {\n\t\t\tvar point = segments[i].point;\n\t\t\tif (!prev || !prev.equals(point)) {\n\t\t\t\tpoints.push(prev = point.clone());\n\t\t\t}\n\t\t}\n\t\tif (closed) {\n\t\t\tpoints.unshift(points[points.length - 1]);\n\t\t\tpoints.push(points[1]);\n\t\t}\n\t\tthis.closed = closed;\n\t},\n\n\tfit: function(error) {\n\t\tvar points = this.points,\n\t\t\tlength = points.length,\n\t\t\tsegments = null;\n\t\tif (length > 0) {\n\t\t\tsegments = [new Segment(points[0])];\n\t\t\tif (length > 1) {\n\t\t\t\tthis.fitCubic(segments, error, 0, length - 1,\n\t\t\t\t\t\tpoints[1].subtract(points[0]),\n\t\t\t\t\t\tpoints[length - 2].subtract(points[length - 1]));\n\t\t\t\tif (this.closed) {\n\t\t\t\t\tsegments.shift();\n\t\t\t\t\tsegments.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn segments;\n\t},\n\n\tfitCubic: function(segments, error, first, last, tan1, tan2) {\n\t\tvar points = this.points;\n\t\tif (last - first === 1) {\n\t\t\tvar pt1 = points[first],\n\t\t\t\tpt2 = points[last],\n\t\t\t\tdist = pt1.getDistance(pt2) / 3;\n\t\t\tthis.addCurve(segments, [pt1, pt1.add(tan1.normalize(dist)),\n\t\t\t\t\tpt2.add(tan2.normalize(dist)), pt2]);\n\t\t\treturn;\n\t\t}\n\t\tvar uPrime = this.chordLengthParameterize(first, last),\n\t\t\tmaxError = Math.max(error, error * error),\n\t\t\tsplit,\n\t\t\tparametersInOrder = true;\n\t\tfor (var i = 0; i <= 4; i++) {\n\t\t\tvar curve = this.generateBezier(first, last, uPrime, tan1, tan2);\n\t\t\tvar max = this.findMaxError(first, last, curve, uPrime);\n\t\t\tif (max.error < error && parametersInOrder) {\n\t\t\t\tthis.addCurve(segments, curve);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsplit = max.index;\n\t\t\tif (max.error >= maxError)\n\t\t\t\tbreak;\n\t\t\tparametersInOrder = this.reparameterize(first, last, uPrime, curve);\n\t\t\tmaxError = max.error;\n\t\t}\n\t\tvar tanCenter = points[split - 1].subtract(points[split + 1]);\n\t\tthis.fitCubic(segments, error, first, split, tan1, tanCenter);\n\t\tthis.fitCubic(segments, error, split, last, tanCenter.negate(), tan2);\n\t},\n\n\taddCurve: function(segments, curve) {\n\t\tvar prev = segments[segments.length - 1];\n\t\tprev.setHandleOut(curve[1].subtract(curve[0]));\n\t\tsegments.push(new Segment(curve[3], curve[2].subtract(curve[3])));\n\t},\n\n\tgenerateBezier: function(first, last, uPrime, tan1, tan2) {\n\t\tvar epsilon = 1e-12,\n\t\t\tabs = Math.abs,\n\t\t\tpoints = this.points,\n\t\t\tpt1 = points[first],\n\t\t\tpt2 = points[last],\n\t\t\tC = [[0, 0], [0, 0]],\n\t\t\tX = [0, 0];\n\n\t\tfor (var i = 0, l = last - first + 1; i < l; i++) {\n\t\t\tvar u = uPrime[i],\n\t\t\t\tt = 1 - u,\n\t\t\t\tb = 3 * u * t,\n\t\t\t\tb0 = t * t * t,\n\t\t\t\tb1 = b * t,\n\t\t\t\tb2 = b * u,\n\t\t\t\tb3 = u * u * u,\n\t\t\t\ta1 = tan1.normalize(b1),\n\t\t\t\ta2 = tan2.normalize(b2),\n\t\t\t\ttmp = points[first + i]\n\t\t\t\t\t.subtract(pt1.multiply(b0 + b1))\n\t\t\t\t\t.subtract(pt2.multiply(b2 + b3));\n\t\t\tC[0][0] += a1.dot(a1);\n\t\t\tC[0][1] += a1.dot(a2);\n\t\t\tC[1][0] = C[0][1];\n\t\t\tC[1][1] += a2.dot(a2);\n\t\t\tX[0] += a1.dot(tmp);\n\t\t\tX[1] += a2.dot(tmp);\n\t\t}\n\n\t\tvar detC0C1 = C[0][0] * C[1][1] - C[1][0] * C[0][1],\n\t\t\talpha1,\n\t\t\talpha2;\n\t\tif (abs(detC0C1) > epsilon) {\n\t\t\tvar detC0X = C[0][0] * X[1]    - C[1][0] * X[0],\n\t\t\t\tdetXC1 = X[0]    * C[1][1] - X[1]    * C[0][1];\n\t\t\talpha1 = detXC1 / detC0C1;\n\t\t\talpha2 = detC0X / detC0C1;\n\t\t} else {\n\t\t\tvar c0 = C[0][0] + C[0][1],\n\t\t\t\tc1 = C[1][0] + C[1][1];\n\t\t\talpha1 = alpha2 = abs(c0) > epsilon ? X[0] / c0\n\t\t\t\t\t\t\t: abs(c1) > epsilon ? X[1] / c1\n\t\t\t\t\t\t\t: 0;\n\t\t}\n\n\t\tvar segLength = pt2.getDistance(pt1),\n\t\t\teps = epsilon * segLength,\n\t\t\thandle1,\n\t\t\thandle2;\n\t\tif (alpha1 < eps || alpha2 < eps) {\n\t\t\talpha1 = alpha2 = segLength / 3;\n\t\t} else {\n\t\t\tvar line = pt2.subtract(pt1);\n\t\t\thandle1 = tan1.normalize(alpha1);\n\t\t\thandle2 = tan2.normalize(alpha2);\n\t\t\tif (handle1.dot(line) - handle2.dot(line) > segLength * segLength) {\n\t\t\t\talpha1 = alpha2 = segLength / 3;\n\t\t\t\thandle1 = handle2 = null;\n\t\t\t}\n\t\t}\n\n\t\treturn [pt1,\n\t\t\t\tpt1.add(handle1 || tan1.normalize(alpha1)),\n\t\t\t\tpt2.add(handle2 || tan2.normalize(alpha2)),\n\t\t\t\tpt2];\n\t},\n\n\treparameterize: function(first, last, u, curve) {\n\t\tfor (var i = first; i <= last; i++) {\n\t\t\tu[i - first] = this.findRoot(curve, this.points[i], u[i - first]);\n\t\t}\n\t\tfor (var i = 1, l = u.length; i < l; i++) {\n\t\t\tif (u[i] <= u[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\tfindRoot: function(curve, point, u) {\n\t\tvar curve1 = [],\n\t\t\tcurve2 = [];\n\t\tfor (var i = 0; i <= 2; i++) {\n\t\t\tcurve1[i] = curve[i + 1].subtract(curve[i]).multiply(3);\n\t\t}\n\t\tfor (var i = 0; i <= 1; i++) {\n\t\t\tcurve2[i] = curve1[i + 1].subtract(curve1[i]).multiply(2);\n\t\t}\n\t\tvar pt = this.evaluate(3, curve, u),\n\t\t\tpt1 = this.evaluate(2, curve1, u),\n\t\t\tpt2 = this.evaluate(1, curve2, u),\n\t\t\tdiff = pt.subtract(point),\n\t\t\tdf = pt1.dot(pt1) + diff.dot(pt2);\n\t\treturn Numerical.isZero(df) ? u : u - diff.dot(pt1) / df;\n\t},\n\n\tevaluate: function(degree, curve, t) {\n\t\tvar tmp = curve.slice();\n\t\tfor (var i = 1; i <= degree; i++) {\n\t\t\tfor (var j = 0; j <= degree - i; j++) {\n\t\t\t\ttmp[j] = tmp[j].multiply(1 - t).add(tmp[j + 1].multiply(t));\n\t\t\t}\n\t\t}\n\t\treturn tmp[0];\n\t},\n\n\tchordLengthParameterize: function(first, last) {\n\t\tvar u = [0];\n\t\tfor (var i = first + 1; i <= last; i++) {\n\t\t\tu[i - first] = u[i - first - 1]\n\t\t\t\t\t+ this.points[i].getDistance(this.points[i - 1]);\n\t\t}\n\t\tfor (var i = 1, m = last - first; i <= m; i++) {\n\t\t\tu[i] /= u[m];\n\t\t}\n\t\treturn u;\n\t},\n\n\tfindMaxError: function(first, last, curve, u) {\n\t\tvar index = Math.floor((last - first + 1) / 2),\n\t\t\tmaxDist = 0;\n\t\tfor (var i = first + 1; i < last; i++) {\n\t\t\tvar P = this.evaluate(3, curve, u[i - first]);\n\t\t\tvar v = P.subtract(this.points[i]);\n\t\t\tvar dist = v.x * v.x + v.y * v.y;\n\t\t\tif (dist >= maxDist) {\n\t\t\t\tmaxDist = dist;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\terror: maxDist,\n\t\t\tindex: index\n\t\t};\n\t}\n});\n\nvar TextItem = Item.extend({\n\t_class: 'TextItem',\n\t_applyMatrix: false,\n\t_canApplyMatrix: false,\n\t_serializeFields: {\n\t\tcontent: null\n\t},\n\t_boundsOptions: { stroke: false, handle: false },\n\n\tinitialize: function TextItem(arg) {\n\t\tthis._content = '';\n\t\tthis._lines = [];\n\t\tvar hasProps = arg && Base.isPlainObject(arg)\n\t\t\t\t&& arg.x === undefined && arg.y === undefined;\n\t\tthis._initialize(hasProps && arg, !hasProps && Point.read(arguments));\n\t},\n\n\t_equals: function(item) {\n\t\treturn this._content === item._content;\n\t},\n\n\tcopyContent: function(source) {\n\t\tthis.setContent(source._content);\n\t},\n\n\tgetContent: function() {\n\t\treturn this._content;\n\t},\n\n\tsetContent: function(content) {\n\t\tthis._content = '' + content;\n\t\tthis._lines = this._content.split(/\\r\\n|\\n|\\r/mg);\n\t\tthis._changed(265);\n\t},\n\n\tisEmpty: function() {\n\t\treturn !this._content;\n\t},\n\n\tgetCharacterStyle: '#getStyle',\n\tsetCharacterStyle: '#setStyle',\n\n\tgetParagraphStyle: '#getStyle',\n\tsetParagraphStyle: '#setStyle'\n});\n\nvar PointText = TextItem.extend({\n\t_class: 'PointText',\n\n\tinitialize: function PointText() {\n\t\tTextItem.apply(this, arguments);\n\t},\n\n\tgetPoint: function() {\n\t\tvar point = this._matrix.getTranslation();\n\t\treturn new LinkedPoint(point.x, point.y, this, 'setPoint');\n\t},\n\n\tsetPoint: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis.translate(point.subtract(this._matrix.getTranslation()));\n\t},\n\n\t_draw: function(ctx, param, viewMatrix) {\n\t\tif (!this._content)\n\t\t\treturn;\n\t\tthis._setStyles(ctx, param, viewMatrix);\n\t\tvar lines = this._lines,\n\t\t\tstyle = this._style,\n\t\t\thasFill = style.hasFill(),\n\t\t\thasStroke = style.hasStroke(),\n\t\t\tleading = style.getLeading(),\n\t\t\tshadowColor = ctx.shadowColor;\n\t\tctx.font = style.getFontStyle();\n\t\tctx.textAlign = style.getJustification();\n\t\tfor (var i = 0, l = lines.length; i < l; i++) {\n\t\t\tctx.shadowColor = shadowColor;\n\t\t\tvar line = lines[i];\n\t\t\tif (hasFill) {\n\t\t\t\tctx.fillText(line, 0, 0);\n\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t}\n\t\t\tif (hasStroke)\n\t\t\t\tctx.strokeText(line, 0, 0);\n\t\t\tctx.translate(0, leading);\n\t\t}\n\t},\n\n\t_getBounds: function(matrix, options) {\n\t\tvar style = this._style,\n\t\t\tlines = this._lines,\n\t\t\tnumLines = lines.length,\n\t\t\tjustification = style.getJustification(),\n\t\t\tleading = style.getLeading(),\n\t\t\twidth = this.getView().getTextWidth(style.getFontStyle(), lines),\n\t\t\tx = 0;\n\t\tif (justification !== 'left')\n\t\t\tx -= width / (justification === 'center' ? 2: 1);\n\t\tvar rect = new Rectangle(x,\n\t\t\t\t\tnumLines ? - 0.75 * leading : 0,\n\t\t\t\t\twidth, numLines * leading);\n\t\treturn matrix ? matrix._transformBounds(rect, rect) : rect;\n\t}\n});\n\nvar Color = Base.extend(new function() {\n\tvar types = {\n\t\tgray: ['gray'],\n\t\trgb: ['red', 'green', 'blue'],\n\t\thsb: ['hue', 'saturation', 'brightness'],\n\t\thsl: ['hue', 'saturation', 'lightness'],\n\t\tgradient: ['gradient', 'origin', 'destination', 'highlight']\n\t};\n\n\tvar componentParsers = {},\n\t\tcolorCache = {},\n\t\tcolorCtx;\n\n\tfunction fromCSS(string) {\n\t\tvar match = string.match(/^#(\\w{1,2})(\\w{1,2})(\\w{1,2})$/),\n\t\t\tcomponents;\n\t\tif (match) {\n\t\t\tcomponents = [0, 0, 0];\n\t\t\tfor (var i = 0; i < 3; i++) {\n\t\t\t\tvar value = match[i + 1];\n\t\t\t\tcomponents[i] = parseInt(value.length == 1\n\t\t\t\t\t\t? value + value : value, 16) / 255;\n\t\t\t}\n\t\t} else if (match = string.match(/^rgba?\\((.*)\\)$/)) {\n\t\t\tcomponents = match[1].split(',');\n\t\t\tfor (var i = 0, l = components.length; i < l; i++) {\n\t\t\t\tvar value = +components[i];\n\t\t\t\tcomponents[i] = i < 3 ? value / 255 : value;\n\t\t\t}\n\t\t} else if (window) {\n\t\t\tvar cached = colorCache[string];\n\t\t\tif (!cached) {\n\t\t\t\tif (!colorCtx) {\n\t\t\t\t\tcolorCtx = CanvasProvider.getContext(1, 1);\n\t\t\t\t\tcolorCtx.globalCompositeOperation = 'copy';\n\t\t\t\t}\n\t\t\t\tcolorCtx.fillStyle = 'rgba(0,0,0,0)';\n\t\t\t\tcolorCtx.fillStyle = string;\n\t\t\t\tcolorCtx.fillRect(0, 0, 1, 1);\n\t\t\t\tvar data = colorCtx.getImageData(0, 0, 1, 1).data;\n\t\t\t\tcached = colorCache[string] = [\n\t\t\t\t\tdata[0] / 255,\n\t\t\t\t\tdata[1] / 255,\n\t\t\t\t\tdata[2] / 255\n\t\t\t\t];\n\t\t\t}\n\t\t\tcomponents = cached.slice();\n\t\t} else {\n\t\t\tcomponents = [0, 0, 0];\n\t\t}\n\t\treturn components;\n\t}\n\n\tvar hsbIndices = [\n\t\t[0, 3, 1],\n\t\t[2, 0, 1],\n\t\t[1, 0, 3],\n\t\t[1, 2, 0],\n\t\t[3, 1, 0],\n\t\t[0, 1, 2]\n\t];\n\n\tvar converters = {\n\t\t'rgb-hsb': function(r, g, b) {\n\t\t\tvar max = Math.max(r, g, b),\n\t\t\t\tmin = Math.min(r, g, b),\n\t\t\t\tdelta = max - min,\n\t\t\t\th = delta === 0 ? 0\n\t\t\t\t\t:   ( max == r ? (g - b) / delta + (g < b ? 6 : 0)\n\t\t\t\t\t\t: max == g ? (b - r) / delta + 2\n\t\t\t\t\t\t:            (r - g) / delta + 4) * 60;\n\t\t\treturn [h, max === 0 ? 0 : delta / max, max];\n\t\t},\n\n\t\t'hsb-rgb': function(h, s, b) {\n\t\t\th = (((h / 60) % 6) + 6) % 6;\n\t\t\tvar i = Math.floor(h),\n\t\t\t\tf = h - i,\n\t\t\t\ti = hsbIndices[i],\n\t\t\t\tv = [\n\t\t\t\t\tb,\n\t\t\t\t\tb * (1 - s),\n\t\t\t\t\tb * (1 - s * f),\n\t\t\t\t\tb * (1 - s * (1 - f))\n\t\t\t\t];\n\t\t\treturn [v[i[0]], v[i[1]], v[i[2]]];\n\t\t},\n\n\t\t'rgb-hsl': function(r, g, b) {\n\t\t\tvar max = Math.max(r, g, b),\n\t\t\t\tmin = Math.min(r, g, b),\n\t\t\t\tdelta = max - min,\n\t\t\t\tachromatic = delta === 0,\n\t\t\t\th = achromatic ? 0\n\t\t\t\t\t:   ( max == r ? (g - b) / delta + (g < b ? 6 : 0)\n\t\t\t\t\t\t: max == g ? (b - r) / delta + 2\n\t\t\t\t\t\t:            (r - g) / delta + 4) * 60,\n\t\t\t\tl = (max + min) / 2,\n\t\t\t\ts = achromatic ? 0 : l < 0.5\n\t\t\t\t\t\t? delta / (max + min)\n\t\t\t\t\t\t: delta / (2 - max - min);\n\t\t\treturn [h, s, l];\n\t\t},\n\n\t\t'hsl-rgb': function(h, s, l) {\n\t\t\th = (((h / 360) % 1) + 1) % 1;\n\t\t\tif (s === 0)\n\t\t\t\treturn [l, l, l];\n\t\t\tvar t3s = [ h + 1 / 3, h, h - 1 / 3 ],\n\t\t\t\tt2 = l < 0.5 ? l * (1 + s) : l + s - l * s,\n\t\t\t\tt1 = 2 * l - t2,\n\t\t\t\tc = [];\n\t\t\tfor (var i = 0; i < 3; i++) {\n\t\t\t\tvar t3 = t3s[i];\n\t\t\t\tif (t3 < 0) t3 += 1;\n\t\t\t\tif (t3 > 1) t3 -= 1;\n\t\t\t\tc[i] = 6 * t3 < 1\n\t\t\t\t\t? t1 + (t2 - t1) * 6 * t3\n\t\t\t\t\t: 2 * t3 < 1\n\t\t\t\t\t\t? t2\n\t\t\t\t\t\t: 3 * t3 < 2\n\t\t\t\t\t\t\t? t1 + (t2 - t1) * ((2 / 3) - t3) * 6\n\t\t\t\t\t\t\t: t1;\n\t\t\t}\n\t\t\treturn c;\n\t\t},\n\n\t\t'rgb-gray': function(r, g, b) {\n\t\t\treturn [r * 0.2989 + g * 0.587 + b * 0.114];\n\t\t},\n\n\t\t'gray-rgb': function(g) {\n\t\t\treturn [g, g, g];\n\t\t},\n\n\t\t'gray-hsb': function(g) {\n\t\t\treturn [0, 0, g];\n\t\t},\n\n\t\t'gray-hsl': function(g) {\n\t\t\treturn [0, 0, g];\n\t\t},\n\n\t\t'gradient-rgb': function() {\n\t\t\treturn [];\n\t\t},\n\n\t\t'rgb-gradient': function() {\n\t\t\treturn [];\n\t\t}\n\n\t};\n\n\treturn Base.each(types, function(properties, type) {\n\t\tcomponentParsers[type] = [];\n\t\tBase.each(properties, function(name, index) {\n\t\t\tvar part = Base.capitalize(name),\n\t\t\t\thasOverlap = /^(hue|saturation)$/.test(name),\n\t\t\t\tparser = componentParsers[type][index] = name === 'gradient'\n\t\t\t\t\t? function(value) {\n\t\t\t\t\t\tvar current = this._components[0];\n\t\t\t\t\t\tvalue = Gradient.read(Array.isArray(value) ? value\n\t\t\t\t\t\t\t\t: arguments, 0, { readNull: true });\n\t\t\t\t\t\tif (current !== value) {\n\t\t\t\t\t\t\tif (current)\n\t\t\t\t\t\t\t\tcurrent._removeOwner(this);\n\t\t\t\t\t\t\tif (value)\n\t\t\t\t\t\t\t\tvalue._addOwner(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t\t: type === 'gradient'\n\t\t\t\t\t\t? function() {\n\t\t\t\t\t\t\treturn Point.read(arguments, 0, {\n\t\t\t\t\t\t\t\t\treadNull: name === 'highlight',\n\t\t\t\t\t\t\t\t\tclone: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t: function(value) {\n\t\t\t\t\t\t\treturn value == null || isNaN(value) ? 0 : value;\n\t\t\t\t\t\t};\n\n\t\t\tthis['get' + part] = function() {\n\t\t\t\treturn this._type === type\n\t\t\t\t\t|| hasOverlap && /^hs[bl]$/.test(this._type)\n\t\t\t\t\t\t? this._components[index]\n\t\t\t\t\t\t: this._convert(type)[index];\n\t\t\t};\n\n\t\t\tthis['set' + part] = function(value) {\n\t\t\t\tif (this._type !== type\n\t\t\t\t\t\t&& !(hasOverlap && /^hs[bl]$/.test(this._type))) {\n\t\t\t\t\tthis._components = this._convert(type);\n\t\t\t\t\tthis._properties = types[type];\n\t\t\t\t\tthis._type = type;\n\t\t\t\t}\n\t\t\t\tthis._components[index] = parser.call(this, value);\n\t\t\t\tthis._changed();\n\t\t\t};\n\t\t}, this);\n\t}, {\n\t\t_class: 'Color',\n\t\t_readIndex: true,\n\n\t\tinitialize: function Color(arg) {\n\t\t\tvar args = arguments,\n\t\t\t\treading = this.__read,\n\t\t\t\tread = 0,\n\t\t\t\ttype,\n\t\t\t\tcomponents,\n\t\t\t\talpha,\n\t\t\t\tvalues;\n\t\t\tif (Array.isArray(arg)) {\n\t\t\t\targs = arg;\n\t\t\t\targ = args[0];\n\t\t\t}\n\t\t\tvar argType = arg != null && typeof arg;\n\t\t\tif (argType === 'string' && arg in types) {\n\t\t\t\ttype = arg;\n\t\t\t\targ = args[1];\n\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\tcomponents = arg;\n\t\t\t\t\talpha = args[2];\n\t\t\t\t} else {\n\t\t\t\t\tif (reading)\n\t\t\t\t\t\tread = 1;\n\t\t\t\t\targs = Base.slice(args, 1);\n\t\t\t\t\targType = typeof arg;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!components) {\n\t\t\t\tvalues = argType === 'number'\n\t\t\t\t\t\t? args\n\t\t\t\t\t\t: argType === 'object' && arg.length != null\n\t\t\t\t\t\t\t? arg\n\t\t\t\t\t\t\t: null;\n\t\t\t\tif (values) {\n\t\t\t\t\tif (!type)\n\t\t\t\t\t\ttype = values.length >= 3\n\t\t\t\t\t\t\t\t? 'rgb'\n\t\t\t\t\t\t\t\t: 'gray';\n\t\t\t\t\tvar length = types[type].length;\n\t\t\t\t\talpha = values[length];\n\t\t\t\t\tif (reading) {\n\t\t\t\t\t\tread += values === arguments\n\t\t\t\t\t\t\t? length + (alpha != null ? 1 : 0)\n\t\t\t\t\t\t\t: 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (values.length > length)\n\t\t\t\t\t\tvalues = Base.slice(values, 0, length);\n\t\t\t\t} else if (argType === 'string') {\n\t\t\t\t\ttype = 'rgb';\n\t\t\t\t\tcomponents = fromCSS(arg);\n\t\t\t\t\tif (components.length === 4) {\n\t\t\t\t\t\talpha = components[3];\n\t\t\t\t\t\tcomponents.length--;\n\t\t\t\t\t}\n\t\t\t\t} else if (argType === 'object') {\n\t\t\t\t\tif (arg.constructor === Color) {\n\t\t\t\t\t\ttype = arg._type;\n\t\t\t\t\t\tcomponents = arg._components.slice();\n\t\t\t\t\t\talpha = arg._alpha;\n\t\t\t\t\t\tif (type === 'gradient') {\n\t\t\t\t\t\t\tfor (var i = 1, l = components.length; i < l; i++) {\n\t\t\t\t\t\t\t\tvar point = components[i];\n\t\t\t\t\t\t\t\tif (point)\n\t\t\t\t\t\t\t\t\tcomponents[i] = point.clone();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (arg.constructor === Gradient) {\n\t\t\t\t\t\ttype = 'gradient';\n\t\t\t\t\t\tvalues = args;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = 'hue' in arg\n\t\t\t\t\t\t\t? 'lightness' in arg\n\t\t\t\t\t\t\t\t? 'hsl'\n\t\t\t\t\t\t\t\t: 'hsb'\n\t\t\t\t\t\t\t: 'gradient' in arg || 'stops' in arg\n\t\t\t\t\t\t\t\t\t|| 'radial' in arg\n\t\t\t\t\t\t\t\t? 'gradient'\n\t\t\t\t\t\t\t\t: 'gray' in arg\n\t\t\t\t\t\t\t\t\t? 'gray'\n\t\t\t\t\t\t\t\t\t: 'rgb';\n\t\t\t\t\t\tvar properties = types[type],\n\t\t\t\t\t\t\tparsers = componentParsers[type];\n\t\t\t\t\t\tthis._components = components = [];\n\t\t\t\t\t\tfor (var i = 0, l = properties.length; i < l; i++) {\n\t\t\t\t\t\t\tvar value = arg[properties[i]];\n\t\t\t\t\t\t\tif (value == null && !i && type === 'gradient'\n\t\t\t\t\t\t\t\t\t&& 'stops' in arg) {\n\t\t\t\t\t\t\t\tvalue = {\n\t\t\t\t\t\t\t\t\tstops: arg.stops,\n\t\t\t\t\t\t\t\t\tradial: arg.radial\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvalue = parsers[i].call(this, value);\n\t\t\t\t\t\t\tif (value != null)\n\t\t\t\t\t\t\t\tcomponents[i] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\talpha = arg.alpha;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (reading && type)\n\t\t\t\t\tread = 1;\n\t\t\t}\n\t\t\tthis._type = type || 'rgb';\n\t\t\tif (!components) {\n\t\t\t\tthis._components = components = [];\n\t\t\t\tvar parsers = componentParsers[this._type];\n\t\t\t\tfor (var i = 0, l = parsers.length; i < l; i++) {\n\t\t\t\t\tvar value = parsers[i].call(this, values && values[i]);\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t\tcomponents[i] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._components = components;\n\t\t\tthis._properties = types[this._type];\n\t\t\tthis._alpha = alpha;\n\t\t\tif (reading)\n\t\t\t\tthis.__read = read;\n\t\t\treturn this;\n\t\t},\n\n\t\tset: '#initialize',\n\n\t\t_serialize: function(options, dictionary) {\n\t\t\tvar components = this.getComponents();\n\t\t\treturn Base.serialize(\n\t\t\t\t\t/^(gray|rgb)$/.test(this._type)\n\t\t\t\t\t\t? components\n\t\t\t\t\t\t: [this._type].concat(components),\n\t\t\t\t\toptions, true, dictionary);\n\t\t},\n\n\t\t_changed: function() {\n\t\t\tthis._canvasStyle = null;\n\t\t\tif (this._owner)\n\t\t\t\tthis._owner._changed(65);\n\t\t},\n\n\t\t_convert: function(type) {\n\t\t\tvar converter;\n\t\t\treturn this._type === type\n\t\t\t\t\t? this._components.slice()\n\t\t\t\t\t: (converter = converters[this._type + '-' + type])\n\t\t\t\t\t\t? converter.apply(this, this._components)\n\t\t\t\t\t\t: converters['rgb-' + type].apply(this,\n\t\t\t\t\t\t\tconverters[this._type + '-rgb'].apply(this,\n\t\t\t\t\t\t\t\tthis._components));\n\t\t},\n\n\t\tconvert: function(type) {\n\t\t\treturn new Color(type, this._convert(type), this._alpha);\n\t\t},\n\n\t\tgetType: function() {\n\t\t\treturn this._type;\n\t\t},\n\n\t\tsetType: function(type) {\n\t\t\tthis._components = this._convert(type);\n\t\t\tthis._properties = types[type];\n\t\t\tthis._type = type;\n\t\t},\n\n\t\tgetComponents: function() {\n\t\t\tvar components = this._components.slice();\n\t\t\tif (this._alpha != null)\n\t\t\t\tcomponents.push(this._alpha);\n\t\t\treturn components;\n\t\t},\n\n\t\tgetAlpha: function() {\n\t\t\treturn this._alpha != null ? this._alpha : 1;\n\t\t},\n\n\t\tsetAlpha: function(alpha) {\n\t\t\tthis._alpha = alpha == null ? null : Math.min(Math.max(alpha, 0), 1);\n\t\t\tthis._changed();\n\t\t},\n\n\t\thasAlpha: function() {\n\t\t\treturn this._alpha != null;\n\t\t},\n\n\t\tequals: function(color) {\n\t\t\tvar col = Base.isPlainValue(color, true)\n\t\t\t\t\t? Color.read(arguments)\n\t\t\t\t\t: color;\n\t\t\treturn col === this || col && this._class === col._class\n\t\t\t\t\t&& this._type === col._type\n\t\t\t\t\t&& this.getAlpha() === col.getAlpha()\n\t\t\t\t\t&& Base.equals(this._components, col._components)\n\t\t\t\t\t|| false;\n\t\t},\n\n\t\ttoString: function() {\n\t\t\tvar properties = this._properties,\n\t\t\t\tparts = [],\n\t\t\t\tisGradient = this._type === 'gradient',\n\t\t\t\tf = Formatter.instance;\n\t\t\tfor (var i = 0, l = properties.length; i < l; i++) {\n\t\t\t\tvar value = this._components[i];\n\t\t\t\tif (value != null)\n\t\t\t\t\tparts.push(properties[i] + ': '\n\t\t\t\t\t\t\t+ (isGradient ? value : f.number(value)));\n\t\t\t}\n\t\t\tif (this._alpha != null)\n\t\t\t\tparts.push('alpha: ' + f.number(this._alpha));\n\t\t\treturn '{ ' + parts.join(', ') + ' }';\n\t\t},\n\n\t\ttoCSS: function(hex) {\n\t\t\tvar components = this._convert('rgb'),\n\t\t\t\talpha = hex || this._alpha == null ? 1 : this._alpha;\n\t\t\tfunction convert(val) {\n\t\t\t\treturn Math.round((val < 0 ? 0 : val > 1 ? 1 : val) * 255);\n\t\t\t}\n\t\t\tcomponents = [\n\t\t\t\tconvert(components[0]),\n\t\t\t\tconvert(components[1]),\n\t\t\t\tconvert(components[2])\n\t\t\t];\n\t\t\tif (alpha < 1)\n\t\t\t\tcomponents.push(alpha < 0 ? 0 : alpha);\n\t\t\treturn hex\n\t\t\t\t\t? '#' + ((1 << 24) + (components[0] << 16)\n\t\t\t\t\t\t+ (components[1] << 8)\n\t\t\t\t\t\t+ components[2]).toString(16).slice(1)\n\t\t\t\t\t: (components.length == 4 ? 'rgba(' : 'rgb(')\n\t\t\t\t\t\t+ components.join(',') + ')';\n\t\t},\n\n\t\ttoCanvasStyle: function(ctx, matrix) {\n\t\t\tif (this._canvasStyle)\n\t\t\t\treturn this._canvasStyle;\n\t\t\tif (this._type !== 'gradient')\n\t\t\t\treturn this._canvasStyle = this.toCSS();\n\t\t\tvar components = this._components,\n\t\t\t\tgradient = components[0],\n\t\t\t\tstops = gradient._stops,\n\t\t\t\torigin = components[1],\n\t\t\t\tdestination = components[2],\n\t\t\t\thighlight = components[3],\n\t\t\t\tinverse = matrix && matrix.inverted(),\n\t\t\t\tcanvasGradient;\n\t\t\tif (inverse) {\n\t\t\t\torigin = inverse._transformPoint(origin);\n\t\t\t\tdestination = inverse._transformPoint(destination);\n\t\t\t\tif (highlight)\n\t\t\t\t\thighlight = inverse._transformPoint(highlight);\n\t\t\t}\n\t\t\tif (gradient._radial) {\n\t\t\t\tvar radius = destination.getDistance(origin);\n\t\t\t\tif (highlight) {\n\t\t\t\t\tvar vector = highlight.subtract(origin);\n\t\t\t\t\tif (vector.getLength() > radius)\n\t\t\t\t\t\thighlight = origin.add(vector.normalize(radius - 0.1));\n\t\t\t\t}\n\t\t\t\tvar start = highlight || origin;\n\t\t\t\tcanvasGradient = ctx.createRadialGradient(start.x, start.y,\n\t\t\t\t\t\t0, origin.x, origin.y, radius);\n\t\t\t} else {\n\t\t\t\tcanvasGradient = ctx.createLinearGradient(origin.x, origin.y,\n\t\t\t\t\t\tdestination.x, destination.y);\n\t\t\t}\n\t\t\tfor (var i = 0, l = stops.length; i < l; i++) {\n\t\t\t\tvar stop = stops[i],\n\t\t\t\t\toffset = stop._offset;\n\t\t\t\tcanvasGradient.addColorStop(\n\t\t\t\t\t\toffset == null ? i / (l - 1) : offset,\n\t\t\t\t\t\tstop._color.toCanvasStyle());\n\t\t\t}\n\t\t\treturn this._canvasStyle = canvasGradient;\n\t\t},\n\n\t\ttransform: function(matrix) {\n\t\t\tif (this._type === 'gradient') {\n\t\t\t\tvar components = this._components;\n\t\t\t\tfor (var i = 1, l = components.length; i < l; i++) {\n\t\t\t\t\tvar point = components[i];\n\t\t\t\t\tmatrix._transformPoint(point, point, true);\n\t\t\t\t}\n\t\t\t\tthis._changed();\n\t\t\t}\n\t\t},\n\n\t\tstatics: {\n\t\t\t_types: types,\n\n\t\t\trandom: function() {\n\t\t\t\tvar random = Math.random;\n\t\t\t\treturn new Color(random(), random(), random());\n\t\t\t}\n\t\t}\n\t});\n},\nnew function() {\n\tvar operators = {\n\t\tadd: function(a, b) {\n\t\t\treturn a + b;\n\t\t},\n\n\t\tsubtract: function(a, b) {\n\t\t\treturn a - b;\n\t\t},\n\n\t\tmultiply: function(a, b) {\n\t\t\treturn a * b;\n\t\t},\n\n\t\tdivide: function(a, b) {\n\t\t\treturn a / b;\n\t\t}\n\t};\n\n\treturn Base.each(operators, function(operator, name) {\n\t\tthis[name] = function(color) {\n\t\t\tcolor = Color.read(arguments);\n\t\t\tvar type = this._type,\n\t\t\t\tcomponents1 = this._components,\n\t\t\t\tcomponents2 = color._convert(type);\n\t\t\tfor (var i = 0, l = components1.length; i < l; i++)\n\t\t\t\tcomponents2[i] = operator(components1[i], components2[i]);\n\t\t\treturn new Color(type, components2,\n\t\t\t\t\tthis._alpha != null\n\t\t\t\t\t\t\t? operator(this._alpha, color.getAlpha())\n\t\t\t\t\t\t\t: null);\n\t\t};\n\t}, {\n\t});\n});\n\nvar Gradient = Base.extend({\n\t_class: 'Gradient',\n\n\tinitialize: function Gradient(stops, radial) {\n\t\tthis._id = UID.get();\n\t\tif (stops && Base.isPlainObject(stops)) {\n\t\t\tthis.set(stops);\n\t\t\tstops = radial = null;\n\t\t}\n\t\tif (this._stops == null) {\n\t\t\tthis.setStops(stops || ['white', 'black']);\n\t\t}\n\t\tif (this._radial == null) {\n\t\t\tthis.setRadial(typeof radial === 'string' && radial === 'radial'\n\t\t\t\t\t|| radial || false);\n\t\t}\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn dictionary.add(this, function() {\n\t\t\treturn Base.serialize([this._stops, this._radial],\n\t\t\t\t\toptions, true, dictionary);\n\t\t});\n\t},\n\n\t_changed: function() {\n\t\tfor (var i = 0, l = this._owners && this._owners.length; i < l; i++) {\n\t\t\tthis._owners[i]._changed();\n\t\t}\n\t},\n\n\t_addOwner: function(color) {\n\t\tif (!this._owners)\n\t\t\tthis._owners = [];\n\t\tthis._owners.push(color);\n\t},\n\n\t_removeOwner: function(color) {\n\t\tvar index = this._owners ? this._owners.indexOf(color) : -1;\n\t\tif (index != -1) {\n\t\t\tthis._owners.splice(index, 1);\n\t\t\tif (!this._owners.length)\n\t\t\t\tthis._owners = undefined;\n\t\t}\n\t},\n\n\tclone: function() {\n\t\tvar stops = [];\n\t\tfor (var i = 0, l = this._stops.length; i < l; i++) {\n\t\t\tstops[i] = this._stops[i].clone();\n\t\t}\n\t\treturn new Gradient(stops, this._radial);\n\t},\n\n\tgetStops: function() {\n\t\treturn this._stops;\n\t},\n\n\tsetStops: function(stops) {\n\t\tif (stops.length < 2) {\n\t\t\tthrow new Error(\n\t\t\t\t\t'Gradient stop list needs to contain at least two stops.');\n\t\t}\n\t\tvar _stops = this._stops;\n\t\tif (_stops) {\n\t\t\tfor (var i = 0, l = _stops.length; i < l; i++)\n\t\t\t\t_stops[i]._owner = undefined;\n\t\t}\n\t\t_stops = this._stops = GradientStop.readList(stops, 0, { clone: true });\n\t\tfor (var i = 0, l = _stops.length; i < l; i++)\n\t\t\t_stops[i]._owner = this;\n\t\tthis._changed();\n\t},\n\n\tgetRadial: function() {\n\t\treturn this._radial;\n\t},\n\n\tsetRadial: function(radial) {\n\t\tthis._radial = radial;\n\t\tthis._changed();\n\t},\n\n\tequals: function(gradient) {\n\t\tif (gradient === this)\n\t\t\treturn true;\n\t\tif (gradient && this._class === gradient._class) {\n\t\t\tvar stops1 = this._stops,\n\t\t\t\tstops2 = gradient._stops,\n\t\t\t\tlength = stops1.length;\n\t\t\tif (length === stops2.length) {\n\t\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\t\tif (!stops1[i].equals(stops2[i]))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n});\n\nvar GradientStop = Base.extend({\n\t_class: 'GradientStop',\n\n\tinitialize: function GradientStop(arg0, arg1) {\n\t\tvar color = arg0,\n\t\t\toffset = arg1;\n\t\tif (typeof arg0 === 'object' && arg1 === undefined) {\n\t\t\tif (Array.isArray(arg0) && typeof arg0[0] !== 'number') {\n\t\t\t\tcolor = arg0[0];\n\t\t\t\toffset = arg0[1];\n\t\t\t} else if ('color' in arg0 || 'offset' in arg0\n\t\t\t\t\t|| 'rampPoint' in arg0) {\n\t\t\t\tcolor = arg0.color;\n\t\t\t\toffset = arg0.offset || arg0.rampPoint || 0;\n\t\t\t}\n\t\t}\n\t\tthis.setColor(color);\n\t\tthis.setOffset(offset);\n\t},\n\n\tclone: function() {\n\t\treturn new GradientStop(this._color.clone(), this._offset);\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\tvar color = this._color,\n\t\t\toffset = this._offset;\n\t\treturn Base.serialize(offset == null ? [color] : [color, offset],\n\t\t\t\toptions, true, dictionary);\n\t},\n\n\t_changed: function() {\n\t\tif (this._owner)\n\t\t\tthis._owner._changed(65);\n\t},\n\n\tgetOffset: function() {\n\t\treturn this._offset;\n\t},\n\n\tsetOffset: function(offset) {\n\t\tthis._offset = offset;\n\t\tthis._changed();\n\t},\n\n\tgetRampPoint: '#getOffset',\n\tsetRampPoint: '#setOffset',\n\n\tgetColor: function() {\n\t\treturn this._color;\n\t},\n\n\tsetColor: function() {\n\t\tvar color = Color.read(arguments, 0, { clone: true });\n\t\tif (color)\n\t\t\tcolor._owner = this;\n\t\tthis._color = color;\n\t\tthis._changed();\n\t},\n\n\tequals: function(stop) {\n\t\treturn stop === this || stop && this._class === stop._class\n\t\t\t\t&& this._color.equals(stop._color)\n\t\t\t\t&& this._offset == stop._offset\n\t\t\t\t|| false;\n\t}\n});\n\nvar Style = Base.extend(new function() {\n\tvar itemDefaults = {\n\t\tfillColor: null,\n\t\tfillRule: 'nonzero',\n\t\tstrokeColor: null,\n\t\tstrokeWidth: 1,\n\t\tstrokeCap: 'butt',\n\t\tstrokeJoin: 'miter',\n\t\tstrokeScaling: true,\n\t\tmiterLimit: 10,\n\t\tdashOffset: 0,\n\t\tdashArray: [],\n\t\tshadowColor: null,\n\t\tshadowBlur: 0,\n\t\tshadowOffset: new Point(),\n\t\tselectedColor: null\n\t},\n\tgroupDefaults = Base.set({}, itemDefaults, {\n\t\tfontFamily: 'sans-serif',\n\t\tfontWeight: 'normal',\n\t\tfontSize: 12,\n\t\tleading: null,\n\t\tjustification: 'left'\n\t}),\n\ttextDefaults = Base.set({}, groupDefaults, {\n\t\tfillColor: new Color()\n\t}),\n\tflags = {\n\t\tstrokeWidth: 97,\n\t\tstrokeCap: 97,\n\t\tstrokeJoin: 97,\n\t\tstrokeScaling: 105,\n\t\tmiterLimit: 97,\n\t\tfontFamily: 9,\n\t\tfontWeight: 9,\n\t\tfontSize: 9,\n\t\tfont: 9,\n\t\tleading: 9,\n\t\tjustification: 9\n\t},\n\titem = {\n\t\tbeans: true\n\t},\n\tfields = {\n\t\t_class: 'Style',\n\t\tbeans: true,\n\n\t\tinitialize: function Style(style, _owner, _project) {\n\t\t\tthis._values = {};\n\t\t\tthis._owner = _owner;\n\t\t\tthis._project = _owner && _owner._project || _project\n\t\t\t\t\t|| paper.project;\n\t\t\tthis._defaults = !_owner || _owner instanceof Group ? groupDefaults\n\t\t\t\t\t: _owner instanceof TextItem ? textDefaults\n\t\t\t\t\t: itemDefaults;\n\t\t\tif (style)\n\t\t\t\tthis.set(style);\n\t\t}\n\t};\n\n\tBase.each(groupDefaults, function(value, key) {\n\t\tvar isColor = /Color$/.test(key),\n\t\t\tisPoint = key === 'shadowOffset',\n\t\t\tpart = Base.capitalize(key),\n\t\t\tflag = flags[key],\n\t\t\tset = 'set' + part,\n\t\t\tget = 'get' + part;\n\n\t\tfields[set] = function(value) {\n\t\t\tvar owner = this._owner,\n\t\t\t\tchildren = owner && owner._children;\n\t\t\tif (children && children.length > 0\n\t\t\t\t\t&& !(owner instanceof CompoundPath)) {\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\t\tchildren[i]._style[set](value);\n\t\t\t} else if (key in this._defaults) {\n\t\t\t\tvar old = this._values[key];\n\t\t\t\tif (old !== value) {\n\t\t\t\t\tif (isColor) {\n\t\t\t\t\t\tif (old && old._owner !== undefined)\n\t\t\t\t\t\t\told._owner = undefined;\n\t\t\t\t\t\tif (value && value.constructor === Color) {\n\t\t\t\t\t\t\tif (value._owner)\n\t\t\t\t\t\t\t\tvalue = value.clone();\n\t\t\t\t\t\t\tvalue._owner = owner;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._values[key] = value;\n\t\t\t\t\tif (owner)\n\t\t\t\t\t\towner._changed(flag || 65);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfields[get] = function(_dontMerge) {\n\t\t\tvar owner = this._owner,\n\t\t\t\tchildren = owner && owner._children,\n\t\t\t\tvalue;\n\t\t\tif (key in this._defaults && (!children || !children.length\n\t\t\t\t\t|| _dontMerge || owner instanceof CompoundPath)) {\n\t\t\t\tvar value = this._values[key];\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\tvalue = this._defaults[key];\n\t\t\t\t\tif (value && value.clone)\n\t\t\t\t\t\tvalue = value.clone();\n\t\t\t\t} else {\n\t\t\t\t\tvar ctor = isColor ? Color : isPoint ? Point : null;\n\t\t\t\t\tif (ctor && !(value && value.constructor === ctor)) {\n\t\t\t\t\t\tthis._values[key] = value = ctor.read([value], 0,\n\t\t\t\t\t\t\t\t{ readNull: true, clone: true });\n\t\t\t\t\t\tif (value && isColor)\n\t\t\t\t\t\t\tvalue._owner = owner;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (children) {\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tvar childValue = children[i]._style[get]();\n\t\t\t\t\tif (!i) {\n\t\t\t\t\t\tvalue = childValue;\n\t\t\t\t\t} else if (!Base.equals(value, childValue)) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\t\titem[get] = function(_dontMerge) {\n\t\t\treturn this._style[get](_dontMerge);\n\t\t};\n\n\t\titem[set] = function(value) {\n\t\t\tthis._style[set](value);\n\t\t};\n\t});\n\n\tBase.each({\n\t\tFont: 'FontFamily',\n\t\tWindingRule: 'FillRule'\n\t}, function(value, key) {\n\t\tvar get = 'get' + key,\n\t\t\tset = 'set' + key;\n\t\tfields[get] = item[get] = '#get' + value;\n\t\tfields[set] = item[set] = '#set' + value;\n\t});\n\n\tItem.inject(item);\n\treturn fields;\n}, {\n\tset: function(style) {\n\t\tvar isStyle = style instanceof Style,\n\t\t\tvalues = isStyle ? style._values : style;\n\t\tif (values) {\n\t\t\tfor (var key in values) {\n\t\t\t\tif (key in this._defaults) {\n\t\t\t\t\tvar value = values[key];\n\t\t\t\t\tthis[key] = value && isStyle && value.clone\n\t\t\t\t\t\t\t? value.clone() : value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tequals: function(style) {\n\t\tfunction compare(style1, style2, secondary) {\n\t\t\tvar values1 = style1._values,\n\t\t\t\tvalues2 = style2._values,\n\t\t\t\tdefaults2 = style2._defaults;\n\t\t\tfor (var key in values1) {\n\t\t\t\tvar value1 = values1[key],\n\t\t\t\t\tvalue2 = values2[key];\n\t\t\t\tif (!(secondary && key in values2) && !Base.equals(value1,\n\t\t\t\t\t\tvalue2 === undefined ? defaults2[key] : value2))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn style === this || style && this._class === style._class\n\t\t\t\t&& compare(this, style)\n\t\t\t\t&& compare(style, this, true)\n\t\t\t\t|| false;\n\t},\n\n\thasFill: function() {\n\t\tvar color = this.getFillColor();\n\t\treturn !!color && color.alpha > 0;\n\t},\n\n\thasStroke: function() {\n\t\tvar color = this.getStrokeColor();\n\t\treturn !!color && color.alpha > 0 && this.getStrokeWidth() > 0;\n\t},\n\n\thasShadow: function() {\n\t\tvar color = this.getShadowColor();\n\t\treturn !!color && color.alpha > 0 && (this.getShadowBlur() > 0\n\t\t\t\t|| !this.getShadowOffset().isZero());\n\t},\n\n\tgetView: function() {\n\t\treturn this._project._view;\n\t},\n\n\tgetFontStyle: function() {\n\t\tvar fontSize = this.getFontSize();\n\t\treturn this.getFontWeight()\n\t\t\t\t+ ' ' + fontSize + (/[a-z]/i.test(fontSize + '') ? ' ' : 'px ')\n\t\t\t\t+ this.getFontFamily();\n\t},\n\n\tgetFont: '#getFontFamily',\n\tsetFont: '#setFontFamily',\n\n\tgetLeading: function getLeading() {\n\t\tvar leading = getLeading.base.call(this),\n\t\t\tfontSize = this.getFontSize();\n\t\tif (/pt|em|%|px/.test(fontSize))\n\t\t\tfontSize = this.getView().getPixelSize(fontSize);\n\t\treturn leading != null ? leading : fontSize * 1.2;\n\t}\n\n});\n\nvar DomElement = new function() {\n\tfunction handlePrefix(el, name, set, value) {\n\t\tvar prefixes = ['', 'webkit', 'moz', 'Moz', 'ms', 'o'],\n\t\t\tsuffix = name[0].toUpperCase() + name.substring(1);\n\t\tfor (var i = 0; i < 6; i++) {\n\t\t\tvar prefix = prefixes[i],\n\t\t\t\tkey = prefix ? prefix + suffix : name;\n\t\t\tif (key in el) {\n\t\t\t\tif (set) {\n\t\t\t\t\tel[key] = value;\n\t\t\t\t} else {\n\t\t\t\t\treturn el[key];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tgetStyles: function(el) {\n\t\t\tvar doc = el && el.nodeType !== 9 ? el.ownerDocument : el,\n\t\t\t\tview = doc && doc.defaultView;\n\t\t\treturn view && view.getComputedStyle(el, '');\n\t\t},\n\n\t\tgetBounds: function(el, viewport) {\n\t\t\tvar doc = el.ownerDocument,\n\t\t\t\tbody = doc.body,\n\t\t\t\thtml = doc.documentElement,\n\t\t\t\trect;\n\t\t\ttry {\n\t\t\t\trect = el.getBoundingClientRect();\n\t\t\t} catch (e) {\n\t\t\t\trect = { left: 0, top: 0, width: 0, height: 0 };\n\t\t\t}\n\t\t\tvar x = rect.left - (html.clientLeft || body.clientLeft || 0),\n\t\t\t\ty = rect.top - (html.clientTop || body.clientTop || 0);\n\t\t\tif (!viewport) {\n\t\t\t\tvar view = doc.defaultView;\n\t\t\t\tx += view.pageXOffset || html.scrollLeft || body.scrollLeft;\n\t\t\t\ty += view.pageYOffset || html.scrollTop || body.scrollTop;\n\t\t\t}\n\t\t\treturn new Rectangle(x, y, rect.width, rect.height);\n\t\t},\n\n\t\tgetViewportBounds: function(el) {\n\t\t\tvar doc = el.ownerDocument,\n\t\t\t\tview = doc.defaultView,\n\t\t\t\thtml = doc.documentElement;\n\t\t\treturn new Rectangle(0, 0,\n\t\t\t\tview.innerWidth || html.clientWidth,\n\t\t\t\tview.innerHeight || html.clientHeight\n\t\t\t);\n\t\t},\n\n\t\tgetOffset: function(el, viewport) {\n\t\t\treturn DomElement.getBounds(el, viewport).getPoint();\n\t\t},\n\n\t\tgetSize: function(el) {\n\t\t\treturn DomElement.getBounds(el, true).getSize();\n\t\t},\n\n\t\tisInvisible: function(el) {\n\t\t\treturn DomElement.getSize(el).equals(new Size(0, 0));\n\t\t},\n\n\t\tisInView: function(el) {\n\t\t\treturn !DomElement.isInvisible(el)\n\t\t\t\t\t&& DomElement.getViewportBounds(el).intersects(\n\t\t\t\t\t\tDomElement.getBounds(el, true));\n\t\t},\n\n\t\tisInserted: function(el) {\n\t\t\treturn document.body.contains(el);\n\t\t},\n\n\t\tgetPrefixed: function(el, name) {\n\t\t\treturn el && handlePrefix(el, name);\n\t\t},\n\n\t\tsetPrefixed: function(el, name, value) {\n\t\t\tif (typeof name === 'object') {\n\t\t\t\tfor (var key in name)\n\t\t\t\t\thandlePrefix(el, key, true, name[key]);\n\t\t\t} else {\n\t\t\t\thandlePrefix(el, name, true, value);\n\t\t\t}\n\t\t}\n\t};\n};\n\nvar DomEvent = {\n\tadd: function(el, events) {\n\t\tif (el) {\n\t\t\tfor (var type in events) {\n\t\t\t\tvar func = events[type],\n\t\t\t\t\tparts = type.split(/[\\s,]+/g);\n\t\t\t\tfor (var i = 0, l = parts.length; i < l; i++)\n\t\t\t\t\tel.addEventListener(parts[i], func, false);\n\t\t\t}\n\t\t}\n\t},\n\n\tremove: function(el, events) {\n\t\tif (el) {\n\t\t\tfor (var type in events) {\n\t\t\t\tvar func = events[type],\n\t\t\t\t\tparts = type.split(/[\\s,]+/g);\n\t\t\t\tfor (var i = 0, l = parts.length; i < l; i++)\n\t\t\t\t\tel.removeEventListener(parts[i], func, false);\n\t\t\t}\n\t\t}\n\t},\n\n\tgetPoint: function(event) {\n\t\tvar pos = event.targetTouches\n\t\t\t\t? event.targetTouches.length\n\t\t\t\t\t? event.targetTouches[0]\n\t\t\t\t\t: event.changedTouches[0]\n\t\t\t\t: event;\n\t\treturn new Point(\n\t\t\tpos.pageX || pos.clientX + document.documentElement.scrollLeft,\n\t\t\tpos.pageY || pos.clientY + document.documentElement.scrollTop\n\t\t);\n\t},\n\n\tgetTarget: function(event) {\n\t\treturn event.target || event.srcElement;\n\t},\n\n\tgetRelatedTarget: function(event) {\n\t\treturn event.relatedTarget || event.toElement;\n\t},\n\n\tgetOffset: function(event, target) {\n\t\treturn DomEvent.getPoint(event).subtract(DomElement.getOffset(\n\t\t\t\ttarget || DomEvent.getTarget(event)));\n\t}\n};\n\nDomEvent.requestAnimationFrame = new function() {\n\tvar nativeRequest = DomElement.getPrefixed(window, 'requestAnimationFrame'),\n\t\trequested = false,\n\t\tcallbacks = [],\n\t\ttimer;\n\n\tfunction handleCallbacks() {\n\t\tvar functions = callbacks;\n\t\tcallbacks = [];\n\t\tfor (var i = 0, l = functions.length; i < l; i++)\n\t\t\tfunctions[i]();\n\t\trequested = nativeRequest && callbacks.length;\n\t\tif (requested)\n\t\t\tnativeRequest(handleCallbacks);\n\t}\n\n\treturn function(callback) {\n\t\tcallbacks.push(callback);\n\t\tif (nativeRequest) {\n\t\t\tif (!requested) {\n\t\t\t\tnativeRequest(handleCallbacks);\n\t\t\t\trequested = true;\n\t\t\t}\n\t\t} else if (!timer) {\n\t\t\ttimer = setInterval(handleCallbacks, 1000 / 60);\n\t\t}\n\t};\n};\n\nvar View = Base.extend(Emitter, {\n\t_class: 'View',\n\n\tinitialize: function View(project, element) {\n\n\t\tfunction getSize(name) {\n\t\t\treturn element[name] || parseInt(element.getAttribute(name), 10);\n\t\t}\n\n\t\tfunction getCanvasSize() {\n\t\t\tvar size = DomElement.getSize(element);\n\t\t\treturn size.isNaN() || size.isZero()\n\t\t\t\t\t? new Size(getSize('width'), getSize('height'))\n\t\t\t\t\t: size;\n\t\t}\n\n\t\tvar size;\n\t\tif (window && element) {\n\t\t\tthis._id = element.getAttribute('id');\n\t\t\tif (this._id == null)\n\t\t\t\telement.setAttribute('id', this._id = 'view-' + View._id++);\n\t\t\tDomEvent.add(element, this._viewEvents);\n\t\t\tvar none = 'none';\n\t\t\tDomElement.setPrefixed(element.style, {\n\t\t\t\tuserDrag: none,\n\t\t\t\tuserSelect: none,\n\t\t\t\ttouchCallout: none,\n\t\t\t\tcontentZooming: none,\n\t\t\t\ttapHighlightColor: 'rgba(0,0,0,0)'\n\t\t\t});\n\n\t\t\tif (PaperScope.hasAttribute(element, 'resize')) {\n\t\t\t\tvar that = this;\n\t\t\t\tDomEvent.add(window, this._windowEvents = {\n\t\t\t\t\tresize: function() {\n\t\t\t\t\t\tthat.setViewSize(getCanvasSize());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tsize = getCanvasSize();\n\n\t\t\tif (PaperScope.hasAttribute(element, 'stats')\n\t\t\t\t\t&& typeof Stats !== 'undefined') {\n\t\t\t\tthis._stats = new Stats();\n\t\t\t\tvar stats = this._stats.domElement,\n\t\t\t\t\tstyle = stats.style,\n\t\t\t\t\toffset = DomElement.getOffset(element);\n\t\t\t\tstyle.position = 'absolute';\n\t\t\t\tstyle.left = offset.x + 'px';\n\t\t\t\tstyle.top = offset.y + 'px';\n\t\t\t\tdocument.body.appendChild(stats);\n\t\t\t}\n\t\t} else {\n\t\t\tsize = new Size(element);\n\t\t\telement = null;\n\t\t}\n\t\tthis._project = project;\n\t\tthis._scope = project._scope;\n\t\tthis._element = element;\n\t\tif (!this._pixelRatio)\n\t\t\tthis._pixelRatio = window && window.devicePixelRatio || 1;\n\t\tthis._setElementSize(size.width, size.height);\n\t\tthis._viewSize = size;\n\t\tView._views.push(this);\n\t\tView._viewsById[this._id] = this;\n\t\t(this._matrix = new Matrix())._owner = this;\n\t\tif (!View._focused)\n\t\t\tView._focused = this;\n\t\tthis._frameItems = {};\n\t\tthis._frameItemCount = 0;\n\t\tthis._itemEvents = { native: {}, virtual: {} };\n\t\tthis._autoUpdate = !paper.agent.node;\n\t\tthis._needsUpdate = false;\n\t},\n\n\tremove: function() {\n\t\tif (!this._project)\n\t\t\treturn false;\n\t\tif (View._focused === this)\n\t\t\tView._focused = null;\n\t\tView._views.splice(View._views.indexOf(this), 1);\n\t\tdelete View._viewsById[this._id];\n\t\tvar project = this._project;\n\t\tif (project._view === this)\n\t\t\tproject._view = null;\n\t\tDomEvent.remove(this._element, this._viewEvents);\n\t\tDomEvent.remove(window, this._windowEvents);\n\t\tthis._element = this._project = null;\n\t\tthis.off('frame');\n\t\tthis._animate = false;\n\t\tthis._frameItems = {};\n\t\treturn true;\n\t},\n\n\t_events: Base.each(\n\t\tItem._itemHandlers.concat(['onResize', 'onKeyDown', 'onKeyUp']),\n\t\tfunction(name) {\n\t\t\tthis[name] = {};\n\t\t}, {\n\t\t\tonFrame: {\n\t\t\t\tinstall: function() {\n\t\t\t\t\tthis.play();\n\t\t\t\t},\n\n\t\t\t\tuninstall: function() {\n\t\t\t\t\tthis.pause();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t),\n\n\t_animate: false,\n\t_time: 0,\n\t_count: 0,\n\n\tgetAutoUpdate: function() {\n\t\treturn this._autoUpdate;\n\t},\n\n\tsetAutoUpdate: function(autoUpdate) {\n\t\tthis._autoUpdate = autoUpdate;\n\t\tif (autoUpdate)\n\t\t\tthis.requestUpdate();\n\t},\n\n\tupdate: function() {\n\t},\n\n\tdraw: function() {\n\t\tthis.update();\n\t},\n\n\trequestUpdate: function() {\n\t\tif (!this._requested) {\n\t\t\tvar that = this;\n\t\t\tDomEvent.requestAnimationFrame(function() {\n\t\t\t\tthat._requested = false;\n\t\t\t\tif (that._animate) {\n\t\t\t\t\tthat.requestUpdate();\n\t\t\t\t\tvar element = that._element;\n\t\t\t\t\tif ((!DomElement.getPrefixed(document, 'hidden')\n\t\t\t\t\t\t\t|| PaperScope.getAttribute(element, 'keepalive')\n\t\t\t\t\t\t\t\t=== 'true') && DomElement.isInView(element)) {\n\t\t\t\t\t\tthat._handleFrame();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (that._autoUpdate)\n\t\t\t\t\tthat.update();\n\t\t\t});\n\t\t\tthis._requested = true;\n\t\t}\n\t},\n\n\tplay: function() {\n\t\tthis._animate = true;\n\t\tthis.requestUpdate();\n\t},\n\n\tpause: function() {\n\t\tthis._animate = false;\n\t},\n\n\t_handleFrame: function() {\n\t\tpaper = this._scope;\n\t\tvar now = Date.now() / 1000,\n\t\t\tdelta = this._last ? now - this._last : 0;\n\t\tthis._last = now;\n\t\tthis.emit('frame', new Base({\n\t\t\tdelta: delta,\n\t\t\ttime: this._time += delta,\n\t\t\tcount: this._count++\n\t\t}));\n\t\tif (this._stats)\n\t\t\tthis._stats.update();\n\t},\n\n\t_animateItem: function(item, animate) {\n\t\tvar items = this._frameItems;\n\t\tif (animate) {\n\t\t\titems[item._id] = {\n\t\t\t\titem: item,\n\t\t\t\ttime: 0,\n\t\t\t\tcount: 0\n\t\t\t};\n\t\t\tif (++this._frameItemCount === 1)\n\t\t\t\tthis.on('frame', this._handleFrameItems);\n\t\t} else {\n\t\t\tdelete items[item._id];\n\t\t\tif (--this._frameItemCount === 0) {\n\t\t\t\tthis.off('frame', this._handleFrameItems);\n\t\t\t}\n\t\t}\n\t},\n\n\t_handleFrameItems: function(event) {\n\t\tfor (var i in this._frameItems) {\n\t\t\tvar entry = this._frameItems[i];\n\t\t\tentry.item.emit('frame', new Base(event, {\n\t\t\t\ttime: entry.time += event.delta,\n\t\t\t\tcount: entry.count++\n\t\t\t}));\n\t\t}\n\t},\n\n\t_changed: function() {\n\t\tthis._project._changed(2049);\n\t\tthis._bounds = this._decomposed = undefined;\n\t},\n\n\tgetElement: function() {\n\t\treturn this._element;\n\t},\n\n\tgetPixelRatio: function() {\n\t\treturn this._pixelRatio;\n\t},\n\n\tgetResolution: function() {\n\t\treturn this._pixelRatio * 72;\n\t},\n\n\tgetViewSize: function() {\n\t\tvar size = this._viewSize;\n\t\treturn new LinkedSize(size.width, size.height, this, 'setViewSize');\n\t},\n\n\tsetViewSize: function() {\n\t\tvar size = Size.read(arguments),\n\t\t\tdelta = size.subtract(this._viewSize);\n\t\tif (delta.isZero())\n\t\t\treturn;\n\t\tthis._setElementSize(size.width, size.height);\n\t\tthis._viewSize.set(size);\n\t\tthis._changed();\n\t\tthis.emit('resize', { size: size, delta: delta });\n\t\tif (this._autoUpdate) {\n\t\t\tthis.update();\n\t\t}\n\t},\n\n\t_setElementSize: function(width, height) {\n\t\tvar element = this._element;\n\t\tif (element) {\n\t\t\tif (element.width !== width)\n\t\t\t\telement.width = width;\n\t\t\tif (element.height !== height)\n\t\t\t\telement.height = height;\n\t\t}\n\t},\n\n\tgetBounds: function() {\n\t\tif (!this._bounds)\n\t\t\tthis._bounds = this._matrix.inverted()._transformBounds(\n\t\t\t\t\tnew Rectangle(new Point(), this._viewSize));\n\t\treturn this._bounds;\n\t},\n\n\tgetSize: function() {\n\t\treturn this.getBounds().getSize();\n\t},\n\n\tisVisible: function() {\n\t\treturn DomElement.isInView(this._element);\n\t},\n\n\tisInserted: function() {\n\t\treturn DomElement.isInserted(this._element);\n\t},\n\n\tgetPixelSize: function(size) {\n\t\tvar element = this._element,\n\t\t\tpixels;\n\t\tif (element) {\n\t\t\tvar parent = element.parentNode,\n\t\t\t\ttemp = document.createElement('div');\n\t\t\ttemp.style.fontSize = size;\n\t\t\tparent.appendChild(temp);\n\t\t\tpixels = parseFloat(DomElement.getStyles(temp).fontSize);\n\t\t\tparent.removeChild(temp);\n\t\t} else {\n\t\t\tpixels = parseFloat(pixels);\n\t\t}\n\t\treturn pixels;\n\t},\n\n\tgetTextWidth: function(font, lines) {\n\t\treturn 0;\n\t}\n}, Base.each(['rotate', 'scale', 'shear', 'skew'], function(key) {\n\tvar rotate = key === 'rotate';\n\tthis[key] = function() {\n\t\tvar value = (rotate ? Base : Point).read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\treturn this.transform(new Matrix()[key](value,\n\t\t\t\tcenter || this.getCenter(true)));\n\t};\n}, {\n\t_decompose: function() {\n\t\treturn this._decomposed || (this._decomposed = this._matrix.decompose());\n\t},\n\n\ttranslate: function() {\n\t\tvar mx = new Matrix();\n\t\treturn this.transform(mx.translate.apply(mx, arguments));\n\t},\n\n\tgetCenter: function() {\n\t\treturn this.getBounds().getCenter();\n\t},\n\n\tsetCenter: function() {\n\t\tvar center = Point.read(arguments);\n\t\tthis.translate(this.getCenter().subtract(center));\n\t},\n\n\tgetZoom: function() {\n\t\tvar decomposed = this._decompose(),\n\t\t\tscaling = decomposed && decomposed.scaling;\n\t\treturn scaling ? (scaling.x + scaling.y) / 2 : 0;\n\t},\n\n\tsetZoom: function(zoom) {\n\t\tthis.transform(new Matrix().scale(zoom / this.getZoom(),\n\t\t\tthis.getCenter()));\n\t},\n\n\tgetRotation: function() {\n\t\tvar decomposed = this._decompose();\n\t\treturn decomposed && decomposed.rotation;\n\t},\n\n\tsetRotation: function(rotation) {\n\t\tvar current = this.getRotation();\n\t\tif (current != null && rotation != null) {\n\t\t\tthis.rotate(rotation - current);\n\t\t}\n\t},\n\n\tgetScaling: function() {\n\t\tvar decomposed = this._decompose(),\n\t\t\tscaling = decomposed && decomposed.scaling;\n\t\treturn scaling\n\t\t\t\t? new LinkedPoint(scaling.x, scaling.y, this, 'setScaling')\n\t\t\t\t: undefined;\n\t},\n\n\tsetScaling: function() {\n\t\tvar current = this.getScaling(),\n\t\t\tscaling = Point.read(arguments, 0, { clone: true, readNull: true });\n\t\tif (current && scaling) {\n\t\t\tthis.scale(scaling.x / current.x, scaling.y / current.y);\n\t\t}\n\t},\n\n\tgetMatrix: function() {\n\t\treturn this._matrix;\n\t},\n\n\tsetMatrix: function() {\n\t\tvar matrix = this._matrix;\n\t\tmatrix.initialize.apply(matrix, arguments);\n\t},\n\n\ttransform: function(matrix) {\n\t\tthis._matrix.append(matrix);\n\t},\n\n\tscrollBy: function() {\n\t\tthis.translate(Point.read(arguments).negate());\n\t}\n}), {\n\n\tprojectToView: function() {\n\t\treturn this._matrix._transformPoint(Point.read(arguments));\n\t},\n\n\tviewToProject: function() {\n\t\treturn this._matrix._inverseTransform(Point.read(arguments));\n\t},\n\n\tgetEventPoint: function(event) {\n\t\treturn this.viewToProject(DomEvent.getOffset(event, this._element));\n\t},\n\n}, {\n\tstatics: {\n\t\t_views: [],\n\t\t_viewsById: {},\n\t\t_id: 0,\n\n\t\tcreate: function(project, element) {\n\t\t\tif (document && typeof element === 'string')\n\t\t\t\telement = document.getElementById(element);\n\t\t\tvar ctor = window ? CanvasView : View;\n\t\t\treturn new ctor(project, element);\n\t\t}\n\t}\n},\nnew function() {\n\tif (!window)\n\t\treturn;\n\tvar prevFocus,\n\t\ttempFocus,\n\t\tdragging = false,\n\t\tmouseDown = false;\n\n\tfunction getView(event) {\n\t\tvar target = DomEvent.getTarget(event);\n\t\treturn target.getAttribute && View._viewsById[\n\t\t\t\ttarget.getAttribute('id')];\n\t}\n\n\tfunction updateFocus() {\n\t\tvar view = View._focused;\n\t\tif (!view || !view.isVisible()) {\n\t\t\tfor (var i = 0, l = View._views.length; i < l; i++) {\n\t\t\t\tif ((view = View._views[i]).isVisible()) {\n\t\t\t\t\tView._focused = tempFocus = view;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction handleMouseMove(view, event, point) {\n\t\tview._handleMouseEvent('mousemove', event, point);\n\t}\n\n\tvar navigator = window.navigator,\n\t\tmousedown, mousemove, mouseup;\n\tif (navigator.pointerEnabled || navigator.msPointerEnabled) {\n\t\tmousedown = 'pointerdown MSPointerDown';\n\t\tmousemove = 'pointermove MSPointerMove';\n\t\tmouseup = 'pointerup pointercancel MSPointerUp MSPointerCancel';\n\t} else {\n\t\tmousedown = 'touchstart';\n\t\tmousemove = 'touchmove';\n\t\tmouseup = 'touchend touchcancel';\n\t\tif (!('ontouchstart' in window && navigator.userAgent.match(\n\t\t\t\t/mobile|tablet|ip(ad|hone|od)|android|silk/i))) {\n\t\t\tmousedown += ' mousedown';\n\t\t\tmousemove += ' mousemove';\n\t\t\tmouseup += ' mouseup';\n\t\t}\n\t}\n\n\tvar viewEvents = {},\n\t\tdocEvents = {\n\t\t\tmouseout: function(event) {\n\t\t\t\tvar view = View._focused,\n\t\t\t\t\ttarget = DomEvent.getRelatedTarget(event);\n\t\t\t\tif (view && (!target || target.nodeName === 'HTML')) {\n\t\t\t\t\tvar offset = DomEvent.getOffset(event, view._element),\n\t\t\t\t\t\tx = offset.x,\n\t\t\t\t\t\tabs = Math.abs,\n\t\t\t\t\t\tax = abs(x),\n\t\t\t\t\t\tmax = 1 << 25,\n\t\t\t\t\t\tdiff = ax - max;\n\t\t\t\t\toffset.x = abs(diff) < ax ? diff * (x < 0 ? -1 : 1) : x;\n\t\t\t\t\thandleMouseMove(view, event, view.viewToProject(offset));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tscroll: updateFocus\n\t\t};\n\n\tviewEvents[mousedown] = function(event) {\n\t\tvar view = View._focused = getView(event);\n\t\tif (!dragging) {\n\t\t\tdragging = true;\n\t\t\tview._handleMouseEvent('mousedown', event);\n\t\t}\n\t};\n\n\tdocEvents[mousemove] = function(event) {\n\t\tvar view = View._focused;\n\t\tif (!mouseDown) {\n\t\t\tvar target = getView(event);\n\t\t\tif (target) {\n\t\t\t\tif (view !== target) {\n\t\t\t\t\tif (view)\n\t\t\t\t\t\thandleMouseMove(view, event);\n\t\t\t\t\tif (!prevFocus)\n\t\t\t\t\t\tprevFocus = view;\n\t\t\t\t\tview = View._focused = tempFocus = target;\n\t\t\t\t}\n\t\t\t} else if (tempFocus && tempFocus === view) {\n\t\t\t\tif (prevFocus && !prevFocus.isInserted())\n\t\t\t\t\tprevFocus = null;\n\t\t\t\tview = View._focused = prevFocus;\n\t\t\t\tprevFocus = null;\n\t\t\t\tupdateFocus();\n\t\t\t}\n\t\t}\n\t\tif (view)\n\t\t\thandleMouseMove(view, event);\n\t};\n\n\tdocEvents[mousedown] = function() {\n\t\tmouseDown = true;\n\t};\n\n\tdocEvents[mouseup] = function(event) {\n\t\tvar view = View._focused;\n\t\tif (view && dragging)\n\t\t\tview._handleMouseEvent('mouseup', event);\n\t\tmouseDown = dragging = false;\n\t};\n\n\tDomEvent.add(document, docEvents);\n\n\tDomEvent.add(window, {\n\t\tload: updateFocus\n\t});\n\n\tvar called = false,\n\t\tprevented = false,\n\t\tfallbacks = {\n\t\t\tdoubleclick: 'click',\n\t\t\tmousedrag: 'mousemove'\n\t\t},\n\t\twasInView = false,\n\t\toverView,\n\t\tdownPoint,\n\t\tlastPoint,\n\t\tdownItem,\n\t\toverItem,\n\t\tdragItem,\n\t\tclickItem,\n\t\tclickTime,\n\t\tdblClick;\n\n\tfunction emitMouseEvent(obj, target, type, event, point, prevPoint,\n\t\t\tstopItem) {\n\t\tvar stopped = false,\n\t\t\tmouseEvent;\n\n\t\tfunction emit(obj, type) {\n\t\t\tif (obj.responds(type)) {\n\t\t\t\tif (!mouseEvent) {\n\t\t\t\t\tmouseEvent = new MouseEvent(type, event, point,\n\t\t\t\t\t\t\ttarget || obj,\n\t\t\t\t\t\t\tprevPoint ? point.subtract(prevPoint) : null);\n\t\t\t\t}\n\t\t\t\tif (obj.emit(type, mouseEvent)) {\n\t\t\t\t\tcalled = true;\n\t\t\t\t\tif (mouseEvent.prevented)\n\t\t\t\t\t\tprevented = true;\n\t\t\t\t\tif (mouseEvent.stopped)\n\t\t\t\t\t\treturn stopped = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar fallback = fallbacks[type];\n\t\t\t\tif (fallback)\n\t\t\t\t\treturn emit(obj, fallback);\n\t\t\t}\n\t\t}\n\n\t\twhile (obj && obj !== stopItem) {\n\t\t\tif (emit(obj, type))\n\t\t\t\tbreak;\n\t\t\tobj = obj._parent;\n\t\t}\n\t\treturn stopped;\n\t}\n\n\tfunction emitMouseEvents(view, hitItem, type, event, point, prevPoint) {\n\t\tview._project.removeOn(type);\n\t\tprevented = called = false;\n\t\treturn (dragItem && emitMouseEvent(dragItem, null, type, event,\n\t\t\t\t\tpoint, prevPoint)\n\t\t\t|| hitItem && hitItem !== dragItem\n\t\t\t\t&& !hitItem.isDescendant(dragItem)\n\t\t\t\t&& emitMouseEvent(hitItem, null, type, event, point, prevPoint,\n\t\t\t\t\tdragItem)\n\t\t\t|| emitMouseEvent(view, dragItem || hitItem || view, type, event,\n\t\t\t\t\tpoint, prevPoint));\n\t}\n\n\tvar itemEventsMap = {\n\t\tmousedown: {\n\t\t\tmousedown: 1,\n\t\t\tmousedrag: 1,\n\t\t\tclick: 1,\n\t\t\tdoubleclick: 1\n\t\t},\n\t\tmouseup: {\n\t\t\tmouseup: 1,\n\t\t\tmousedrag: 1,\n\t\t\tclick: 1,\n\t\t\tdoubleclick: 1\n\t\t},\n\t\tmousemove: {\n\t\t\tmousedrag: 1,\n\t\t\tmousemove: 1,\n\t\t\tmouseenter: 1,\n\t\t\tmouseleave: 1\n\t\t}\n\t};\n\n\treturn {\n\t\t_viewEvents: viewEvents,\n\n\t\t_handleMouseEvent: function(type, event, point) {\n\t\t\tvar itemEvents = this._itemEvents,\n\t\t\t\thitItems = itemEvents.native[type],\n\t\t\t\tnativeMove = type === 'mousemove',\n\t\t\t\ttool = this._scope.tool,\n\t\t\t\tview = this;\n\n\t\t\tfunction responds(type) {\n\t\t\t\treturn itemEvents.virtual[type] || view.responds(type)\n\t\t\t\t\t\t|| tool && tool.responds(type);\n\t\t\t}\n\n\t\t\tif (nativeMove && dragging && responds('mousedrag'))\n\t\t\t\ttype = 'mousedrag';\n\t\t\tif (!point)\n\t\t\t\tpoint = this.getEventPoint(event);\n\n\t\t\tvar inView = this.getBounds().contains(point),\n\t\t\t\thit = hitItems && inView && view._project.hitTest(point, {\n\t\t\t\t\ttolerance: 0,\n\t\t\t\t\tfill: true,\n\t\t\t\t\tstroke: true\n\t\t\t\t}),\n\t\t\t\thitItem = hit && hit.item || null,\n\t\t\t\thandle = false,\n\t\t\t\tmouse = {};\n\t\t\tmouse[type.substr(5)] = true;\n\n\t\t\tif (hitItems && hitItem !== overItem) {\n\t\t\t\tif (overItem) {\n\t\t\t\t\temitMouseEvent(overItem, null, 'mouseleave', event, point);\n\t\t\t\t}\n\t\t\t\tif (hitItem) {\n\t\t\t\t\temitMouseEvent(hitItem, null, 'mouseenter', event, point);\n\t\t\t\t}\n\t\t\t\toverItem = hitItem;\n\t\t\t}\n\t\t\tif (wasInView ^ inView) {\n\t\t\t\temitMouseEvent(this, null, inView ? 'mouseenter' : 'mouseleave',\n\t\t\t\t\t\tevent, point);\n\t\t\t\toverView = inView ? this : null;\n\t\t\t\thandle = true;\n\t\t\t}\n\t\t\tif ((inView || mouse.drag) && !point.equals(lastPoint)) {\n\t\t\t\temitMouseEvents(this, hitItem, nativeMove ? type : 'mousemove',\n\t\t\t\t\t\tevent, point, lastPoint);\n\t\t\t\thandle = true;\n\t\t\t}\n\t\t\twasInView = inView;\n\t\t\tif (mouse.down && inView || mouse.up && downPoint) {\n\t\t\t\temitMouseEvents(this, hitItem, type, event, point, downPoint);\n\t\t\t\tif (mouse.down) {\n\t\t\t\t\tdblClick = hitItem === clickItem\n\t\t\t\t\t\t&& (Date.now() - clickTime < 300);\n\t\t\t\t\tdownItem = clickItem = hitItem;\n\t\t\t\t\tif (!prevented && hitItem) {\n\t\t\t\t\t\tvar item = hitItem;\n\t\t\t\t\t\twhile (item && !item.responds('mousedrag'))\n\t\t\t\t\t\t\titem = item._parent;\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\tdragItem = hitItem;\n\t\t\t\t\t}\n\t\t\t\t\tdownPoint = point;\n\t\t\t\t} else if (mouse.up) {\n\t\t\t\t\tif (!prevented && hitItem === downItem) {\n\t\t\t\t\t\tclickTime = Date.now();\n\t\t\t\t\t\temitMouseEvents(this, hitItem, dblClick ? 'doubleclick'\n\t\t\t\t\t\t\t\t: 'click', event, point, downPoint);\n\t\t\t\t\t\tdblClick = false;\n\t\t\t\t\t}\n\t\t\t\t\tdownItem = dragItem = null;\n\t\t\t\t}\n\t\t\t\twasInView = false;\n\t\t\t\thandle = true;\n\t\t\t}\n\t\t\tlastPoint = point;\n\t\t\tif (handle && tool) {\n\t\t\t\tcalled = tool._handleMouseEvent(type, event, point, mouse)\n\t\t\t\t\t|| called;\n\t\t\t}\n\n\t\t\tif (called && !mouse.move || mouse.down && responds('mouseup'))\n\t\t\t\tevent.preventDefault();\n\t\t},\n\n\t\t_handleKeyEvent: function(type, event, key, character) {\n\t\t\tvar scope = this._scope,\n\t\t\t\ttool = scope.tool,\n\t\t\t\tkeyEvent;\n\n\t\t\tfunction emit(obj) {\n\t\t\t\tif (obj.responds(type)) {\n\t\t\t\t\tpaper = scope;\n\t\t\t\t\tobj.emit(type, keyEvent = keyEvent\n\t\t\t\t\t\t\t|| new KeyEvent(type, event, key, character));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isVisible()) {\n\t\t\t\temit(this);\n\t\t\t\tif (tool && tool.responds(type))\n\t\t\t\t\temit(tool);\n\t\t\t}\n\t\t},\n\n\t\t_countItemEvent: function(type, sign) {\n\t\t\tvar itemEvents = this._itemEvents,\n\t\t\t\tnative = itemEvents.native,\n\t\t\t\tvirtual = itemEvents.virtual;\n\t\t\tfor (var key in itemEventsMap) {\n\t\t\t\tnative[key] = (native[key] || 0)\n\t\t\t\t\t\t+ (itemEventsMap[key][type] || 0) * sign;\n\t\t\t}\n\t\t\tvirtual[type] = (virtual[type] || 0) + sign;\n\t\t},\n\n\t\tstatics: {\n\t\t\tupdateFocus: updateFocus\n\t\t}\n\t};\n});\n\nvar CanvasView = View.extend({\n\t_class: 'CanvasView',\n\n\tinitialize: function CanvasView(project, canvas) {\n\t\tif (!(canvas instanceof window.HTMLCanvasElement)) {\n\t\t\tvar size = Size.read(arguments, 1);\n\t\t\tif (size.isZero())\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Cannot create CanvasView with the provided argument: '\n\t\t\t\t\t\t+ Base.slice(arguments, 1));\n\t\t\tcanvas = CanvasProvider.getCanvas(size);\n\t\t}\n\t\tvar ctx = this._context = canvas.getContext('2d');\n\t\tctx.save();\n\t\tthis._pixelRatio = 1;\n\t\tif (!/^off|false$/.test(PaperScope.getAttribute(canvas, 'hidpi'))) {\n\t\t\tvar deviceRatio = window.devicePixelRatio || 1,\n\t\t\t\tbackingStoreRatio = DomElement.getPrefixed(ctx,\n\t\t\t\t\t\t'backingStorePixelRatio') || 1;\n\t\t\tthis._pixelRatio = deviceRatio / backingStoreRatio;\n\t\t}\n\t\tView.call(this, project, canvas);\n\t\tthis._needsUpdate = true;\n\t},\n\n\tremove: function remove() {\n\t\tthis._context.restore();\n\t\treturn remove.base.call(this);\n\t},\n\n\t_setElementSize: function _setElementSize(width, height) {\n\t\tvar pixelRatio = this._pixelRatio;\n\t\t_setElementSize.base.call(this, width * pixelRatio, height * pixelRatio);\n\t\tif (pixelRatio !== 1) {\n\t\t\tvar element = this._element,\n\t\t\t\tctx = this._context;\n\t\t\tif (!PaperScope.hasAttribute(element, 'resize')) {\n\t\t\t\tvar style = element.style;\n\t\t\t\tstyle.width = width + 'px';\n\t\t\t\tstyle.height = height + 'px';\n\t\t\t}\n\t\t\tctx.restore();\n\t\t\tctx.save();\n\t\t\tctx.scale(pixelRatio, pixelRatio);\n\t\t}\n\t},\n\n\tgetPixelSize: function getPixelSize(size) {\n\t\tvar agent = paper.agent,\n\t\t\tpixels;\n\t\tif (agent && agent.firefox) {\n\t\t\tpixels = getPixelSize.base.call(this, size);\n\t\t} else {\n\t\t\tvar ctx = this._context,\n\t\t\t\tprevFont = ctx.font;\n\t\t\tctx.font = size + ' serif';\n\t\t\tpixels = parseFloat(ctx.font);\n\t\t\tctx.font = prevFont;\n\t\t}\n\t\treturn pixels;\n\t},\n\n\tgetTextWidth: function(font, lines) {\n\t\tvar ctx = this._context,\n\t\t\tprevFont = ctx.font,\n\t\t\twidth = 0;\n\t\tctx.font = font;\n\t\tfor (var i = 0, l = lines.length; i < l; i++)\n\t\t\twidth = Math.max(width, ctx.measureText(lines[i]).width);\n\t\tctx.font = prevFont;\n\t\treturn width;\n\t},\n\n\tupdate: function() {\n\t\tif (!this._needsUpdate)\n\t\t\treturn false;\n\t\tvar project = this._project,\n\t\t\tctx = this._context,\n\t\t\tsize = this._viewSize;\n\t\tctx.clearRect(0, 0, size.width + 1, size.height + 1);\n\t\tif (project)\n\t\t\tproject.draw(ctx, this._matrix, this._pixelRatio);\n\t\tthis._needsUpdate = false;\n\t\treturn true;\n\t}\n});\n\nvar Event = Base.extend({\n\t_class: 'Event',\n\n\tinitialize: function Event(event) {\n\t\tthis.event = event;\n\t\tthis.type = event && event.type;\n\t},\n\n\tprevented: false,\n\tstopped: false,\n\n\tpreventDefault: function() {\n\t\tthis.prevented = true;\n\t\tthis.event.preventDefault();\n\t},\n\n\tstopPropagation: function() {\n\t\tthis.stopped = true;\n\t\tthis.event.stopPropagation();\n\t},\n\n\tstop: function() {\n\t\tthis.stopPropagation();\n\t\tthis.preventDefault();\n\t},\n\n\tgetTimeStamp: function() {\n\t\treturn this.event.timeStamp;\n\t},\n\n\tgetModifiers: function() {\n\t\treturn Key.modifiers;\n\t}\n});\n\nvar KeyEvent = Event.extend({\n\t_class: 'KeyEvent',\n\n\tinitialize: function KeyEvent(type, event, key, character) {\n\t\tthis.type = type;\n\t\tthis.event = event;\n\t\tthis.key = key;\n\t\tthis.character = character;\n\t},\n\n\ttoString: function() {\n\t\treturn \"{ type: '\" + this.type\n\t\t\t\t+ \"', key: '\" + this.key\n\t\t\t\t+ \"', character: '\" + this.character\n\t\t\t\t+ \"', modifiers: \" + this.getModifiers()\n\t\t\t\t+ \" }\";\n\t}\n});\n\nvar Key = new function() {\n\tvar keyLookup = {\n\t\t\t'\\t': 'tab',\n\t\t\t' ': 'space',\n\t\t\t'\\b': 'backspace',\n\t\t\t'\\x7f': 'delete',\n\t\t\t'Spacebar': 'space',\n\t\t\t'Del': 'delete',\n\t\t\t'Win': 'meta',\n\t\t\t'Esc': 'escape'\n\t\t},\n\n\t\tcharLookup = {\n\t\t\t'tab': '\\t',\n\t\t\t'space': ' ',\n\t\t\t'enter': '\\r'\n\t\t},\n\n\t\tkeyMap = {},\n\t\tcharMap = {},\n\t\tmetaFixMap,\n\t\tdownKey,\n\n\t\tmodifiers = new Base({\n\t\t\tshift: false,\n\t\t\tcontrol: false,\n\t\t\talt: false,\n\t\t\tmeta: false,\n\t\t\tcapsLock: false,\n\t\t\tspace: false\n\t\t}).inject({\n\t\t\toption: {\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.alt;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcommand: {\n\t\t\t\tget: function() {\n\t\t\t\t\tvar agent = paper && paper.agent;\n\t\t\t\t\treturn agent && agent.mac ? this.meta : this.control;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\tfunction getKey(event) {\n\t\tvar key = event.key || event.keyIdentifier;\n\t\tkey = /^U\\+/.test(key)\n\t\t\t\t? String.fromCharCode(parseInt(key.substr(2), 16))\n\t\t\t\t: /^Arrow[A-Z]/.test(key) ? key.substr(5)\n\t\t\t\t: key === 'Unidentified'  || key === undefined\n\t\t\t\t\t? String.fromCharCode(event.keyCode)\n\t\t\t\t\t: key;\n\t\treturn keyLookup[key] ||\n\t\t\t\t(key.length > 1 ? Base.hyphenate(key) : key.toLowerCase());\n\t}\n\n\tfunction handleKey(down, key, character, event) {\n\t\tvar type = down ? 'keydown' : 'keyup',\n\t\t\tview = View._focused,\n\t\t\tname;\n\t\tkeyMap[key] = down;\n\t\tif (down) {\n\t\t\tcharMap[key] = character;\n\t\t} else {\n\t\t\tdelete charMap[key];\n\t\t}\n\t\tif (key.length > 1 && (name = Base.camelize(key)) in modifiers) {\n\t\t\tmodifiers[name] = down;\n\t\t\tvar agent = paper && paper.agent;\n\t\t\tif (name === 'meta' && agent && agent.mac) {\n\t\t\t\tif (down) {\n\t\t\t\t\tmetaFixMap = {};\n\t\t\t\t} else {\n\t\t\t\t\tfor (var k in metaFixMap) {\n\t\t\t\t\t\tif (k in charMap)\n\t\t\t\t\t\t\thandleKey(false, k, metaFixMap[k], event);\n\t\t\t\t\t}\n\t\t\t\t\tmetaFixMap = null;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (down && metaFixMap) {\n\t\t\tmetaFixMap[key] = character;\n\t\t}\n\t\tif (view) {\n\t\t\tview._handleKeyEvent(down ? 'keydown' : 'keyup', event, key,\n\t\t\t\t\tcharacter);\n\t\t}\n\t}\n\n\tDomEvent.add(document, {\n\t\tkeydown: function(event) {\n\t\t\tvar key = getKey(event),\n\t\t\t\tagent = paper && paper.agent;\n\t\t\tif (key.length > 1 || agent && (agent.chrome && (event.altKey\n\t\t\t\t\t\t|| agent.mac && event.metaKey\n\t\t\t\t\t\t|| !agent.mac && event.ctrlKey))) {\n\t\t\t\thandleKey(true, key,\n\t\t\t\t\t\tcharLookup[key] || (key.length > 1 ? '' : key), event);\n\t\t\t} else {\n\t\t\t\tdownKey = key;\n\t\t\t}\n\t\t},\n\n\t\tkeypress: function(event) {\n\t\t\tif (downKey) {\n\t\t\t\tvar key = getKey(event),\n\t\t\t\t\tcode = event.charCode,\n\t\t\t\t\tcharacter = code >= 32 ? String.fromCharCode(code)\n\t\t\t\t\t\t: key.length > 1 ? '' : key;\n\t\t\t\tif (key !== downKey) {\n\t\t\t\t\tkey = character.toLowerCase();\n\t\t\t\t}\n\t\t\t\thandleKey(true, key, character, event);\n\t\t\t\tdownKey = null;\n\t\t\t}\n\t\t},\n\n\t\tkeyup: function(event) {\n\t\t\tvar key = getKey(event);\n\t\t\tif (key in charMap)\n\t\t\t\thandleKey(false, key, charMap[key], event);\n\t\t}\n\t});\n\n\tDomEvent.add(window, {\n\t\tblur: function(event) {\n\t\t\tfor (var key in charMap)\n\t\t\t\thandleKey(false, key, charMap[key], event);\n\t\t}\n\t});\n\n\treturn {\n\t\tmodifiers: modifiers,\n\n\t\tisDown: function(key) {\n\t\t\treturn !!keyMap[key];\n\t\t}\n\t};\n};\n\nvar MouseEvent = Event.extend({\n\t_class: 'MouseEvent',\n\n\tinitialize: function MouseEvent(type, event, point, target, delta) {\n\t\tthis.type = type;\n\t\tthis.event = event;\n\t\tthis.point = point;\n\t\tthis.target = target;\n\t\tthis.delta = delta;\n\t},\n\n\ttoString: function() {\n\t\treturn \"{ type: '\" + this.type\n\t\t\t\t+ \"', point: \" + this.point\n\t\t\t\t+ ', target: ' + this.target\n\t\t\t\t+ (this.delta ? ', delta: ' + this.delta : '')\n\t\t\t\t+ ', modifiers: ' + this.getModifiers()\n\t\t\t\t+ ' }';\n\t}\n});\n\nvar ToolEvent = Event.extend({\n\t_class: 'ToolEvent',\n\t_item: null,\n\n\tinitialize: function ToolEvent(tool, type, event) {\n\t\tthis.tool = tool;\n\t\tthis.type = type;\n\t\tthis.event = event;\n\t},\n\n\t_choosePoint: function(point, toolPoint) {\n\t\treturn point ? point : toolPoint ? toolPoint.clone() : null;\n\t},\n\n\tgetPoint: function() {\n\t\treturn this._choosePoint(this._point, this.tool._point);\n\t},\n\n\tsetPoint: function(point) {\n\t\tthis._point = point;\n\t},\n\n\tgetLastPoint: function() {\n\t\treturn this._choosePoint(this._lastPoint, this.tool._lastPoint);\n\t},\n\n\tsetLastPoint: function(lastPoint) {\n\t\tthis._lastPoint = lastPoint;\n\t},\n\n\tgetDownPoint: function() {\n\t\treturn this._choosePoint(this._downPoint, this.tool._downPoint);\n\t},\n\n\tsetDownPoint: function(downPoint) {\n\t\tthis._downPoint = downPoint;\n\t},\n\n\tgetMiddlePoint: function() {\n\t\tif (!this._middlePoint && this.tool._lastPoint) {\n\t\t\treturn this.tool._point.add(this.tool._lastPoint).divide(2);\n\t\t}\n\t\treturn this._middlePoint;\n\t},\n\n\tsetMiddlePoint: function(middlePoint) {\n\t\tthis._middlePoint = middlePoint;\n\t},\n\n\tgetDelta: function() {\n\t\treturn !this._delta && this.tool._lastPoint\n\t\t\t\t? this.tool._point.subtract(this.tool._lastPoint)\n\t\t\t\t: this._delta;\n\t},\n\n\tsetDelta: function(delta) {\n\t\tthis._delta = delta;\n\t},\n\n\tgetCount: function() {\n\t\treturn this.tool[/^mouse(down|up)$/.test(this.type)\n\t\t\t\t? '_downCount' : '_moveCount'];\n\t},\n\n\tsetCount: function(count) {\n\t\tthis.tool[/^mouse(down|up)$/.test(this.type) ? 'downCount' : 'count']\n\t\t\t= count;\n\t},\n\n\tgetItem: function() {\n\t\tif (!this._item) {\n\t\t\tvar result = this.tool._scope.project.hitTest(this.getPoint());\n\t\t\tif (result) {\n\t\t\t\tvar item = result.item,\n\t\t\t\t\tparent = item._parent;\n\t\t\t\twhile (/^(Group|CompoundPath)$/.test(parent._class)) {\n\t\t\t\t\titem = parent;\n\t\t\t\t\tparent = parent._parent;\n\t\t\t\t}\n\t\t\t\tthis._item = item;\n\t\t\t}\n\t\t}\n\t\treturn this._item;\n\t},\n\n\tsetItem: function(item) {\n\t\tthis._item = item;\n\t},\n\n\ttoString: function() {\n\t\treturn '{ type: ' + this.type\n\t\t\t\t+ ', point: ' + this.getPoint()\n\t\t\t\t+ ', count: ' + this.getCount()\n\t\t\t\t+ ', modifiers: ' + this.getModifiers()\n\t\t\t\t+ ' }';\n\t}\n});\n\nvar Tool = PaperScopeItem.extend({\n\t_class: 'Tool',\n\t_list: 'tools',\n\t_reference: 'tool',\n\t_events: ['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onMouseMove',\n\t\t\t'onActivate', 'onDeactivate', 'onEditOptions', 'onKeyDown',\n\t\t\t'onKeyUp'],\n\n\tinitialize: function Tool(props) {\n\t\tPaperScopeItem.call(this);\n\t\tthis._moveCount = -1;\n\t\tthis._downCount = -1;\n\t\tthis.set(props);\n\t},\n\n\tgetMinDistance: function() {\n\t\treturn this._minDistance;\n\t},\n\n\tsetMinDistance: function(minDistance) {\n\t\tthis._minDistance = minDistance;\n\t\tif (minDistance != null && this._maxDistance != null\n\t\t\t\t&& minDistance > this._maxDistance) {\n\t\t\tthis._maxDistance = minDistance;\n\t\t}\n\t},\n\n\tgetMaxDistance: function() {\n\t\treturn this._maxDistance;\n\t},\n\n\tsetMaxDistance: function(maxDistance) {\n\t\tthis._maxDistance = maxDistance;\n\t\tif (this._minDistance != null && maxDistance != null\n\t\t\t\t&& maxDistance < this._minDistance) {\n\t\t\tthis._minDistance = maxDistance;\n\t\t}\n\t},\n\n\tgetFixedDistance: function() {\n\t\treturn this._minDistance == this._maxDistance\n\t\t\t? this._minDistance : null;\n\t},\n\n\tsetFixedDistance: function(distance) {\n\t\tthis._minDistance = this._maxDistance = distance;\n\t},\n\n\t_handleMouseEvent: function(type, event, point, mouse) {\n\t\tpaper = this._scope;\n\t\tif (mouse.drag && !this.responds(type))\n\t\t\ttype = 'mousemove';\n\t\tvar move = mouse.move || mouse.drag,\n\t\t\tresponds = this.responds(type),\n\t\t\tminDistance = this.minDistance,\n\t\t\tmaxDistance = this.maxDistance,\n\t\t\tcalled = false,\n\t\t\ttool = this;\n\t\tfunction update(minDistance, maxDistance) {\n\t\t\tvar pt = point,\n\t\t\t\ttoolPoint = move ? tool._point : (tool._downPoint || pt);\n\t\t\tif (move) {\n\t\t\t\tif (tool._moveCount && pt.equals(toolPoint)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (toolPoint && (minDistance != null || maxDistance != null)) {\n\t\t\t\t\tvar vector = pt.subtract(toolPoint),\n\t\t\t\t\t\tdistance = vector.getLength();\n\t\t\t\t\tif (distance < (minDistance || 0))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif (maxDistance) {\n\t\t\t\t\t\tpt = toolPoint.add(vector.normalize(\n\t\t\t\t\t\t\t\tMath.min(distance, maxDistance)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttool._moveCount++;\n\t\t\t}\n\t\t\ttool._point = pt;\n\t\t\ttool._lastPoint = toolPoint || pt;\n\t\t\tif (mouse.down) {\n\t\t\t\ttool._moveCount = -1;\n\t\t\t\ttool._downPoint = pt;\n\t\t\t\ttool._downCount++;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tfunction emit() {\n\t\t\tif (responds) {\n\t\t\t\tcalled = tool.emit(type, new ToolEvent(tool, type, event))\n\t\t\t\t\t\t|| called;\n\t\t\t}\n\t\t}\n\n\t\tif (mouse.down) {\n\t\t\tupdate();\n\t\t\temit();\n\t\t} else if (mouse.up) {\n\t\t\tupdate(null, maxDistance);\n\t\t\temit();\n\t\t} else if (responds) {\n\t\t\twhile (update(minDistance, maxDistance))\n\t\t\t\temit();\n\t\t}\n\t\treturn called;\n\t}\n\n});\n\nvar Http = {\n\trequest: function(options) {\n\t\tvar xhr = new self.XMLHttpRequest();\n\t\txhr.open((options.method || 'get').toUpperCase(), options.url,\n\t\t\t\tBase.pick(options.async, true));\n\t\tif (options.mimeType)\n\t\t\txhr.overrideMimeType(options.mimeType);\n\t\txhr.onload = function() {\n\t\t\tvar status = xhr.status;\n\t\t\tif (status === 0 || status === 200) {\n\t\t\t\tif (options.onLoad) {\n\t\t\t\t\toptions.onLoad.call(xhr, xhr.responseText);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\txhr.onerror();\n\t\t\t}\n\t\t};\n\t\txhr.onerror = function() {\n\t\t\tvar status = xhr.status,\n\t\t\t\tmessage = 'Could not load \"' + options.url + '\" (Status: '\n\t\t\t\t\t\t+ status + ')';\n\t\t\tif (options.onError) {\n\t\t\t\toptions.onError(message, status);\n\t\t\t} else {\n\t\t\t\tthrow new Error(message);\n\t\t\t}\n\t\t};\n\t\treturn xhr.send(null);\n\t}\n};\n\nvar CanvasProvider = {\n\tcanvases: [],\n\n\tgetCanvas: function(width, height) {\n\t\tif (!window)\n\t\t\treturn null;\n\t\tvar canvas,\n\t\t\tclear = true;\n\t\tif (typeof width === 'object') {\n\t\t\theight = width.height;\n\t\t\twidth = width.width;\n\t\t}\n\t\tif (this.canvases.length) {\n\t\t\tcanvas = this.canvases.pop();\n\t\t} else {\n\t\t\tcanvas = document.createElement('canvas');\n\t\t\tclear = false;\n\t\t}\n\t\tvar ctx = canvas.getContext('2d');\n\t\tif (!ctx) {\n\t\t\tthrow new Error('Canvas ' + canvas +\n\t\t\t\t\t' is unable to provide a 2D context.');\n\t\t}\n\t\tif (canvas.width === width && canvas.height === height) {\n\t\t\tif (clear)\n\t\t\t\tctx.clearRect(0, 0, width + 1, height + 1);\n\t\t} else {\n\t\t\tcanvas.width = width;\n\t\t\tcanvas.height = height;\n\t\t}\n\t\tctx.save();\n\t\treturn canvas;\n\t},\n\n\tgetContext: function(width, height) {\n\t\tvar canvas = this.getCanvas(width, height);\n\t\treturn canvas ? canvas.getContext('2d') : null;\n\t},\n\n\trelease: function(obj) {\n\t\tvar canvas = obj && obj.canvas ? obj.canvas : obj;\n\t\tif (canvas && canvas.getContext) {\n\t\t\tcanvas.getContext('2d').restore();\n\t\t\tthis.canvases.push(canvas);\n\t\t}\n\t}\n};\n\nvar BlendMode = new function() {\n\tvar min = Math.min,\n\t\tmax = Math.max,\n\t\tabs = Math.abs,\n\t\tsr, sg, sb, sa,\n\t\tbr, bg, bb, ba,\n\t\tdr, dg, db;\n\n\tfunction getLum(r, g, b) {\n\t\treturn 0.2989 * r + 0.587 * g + 0.114 * b;\n\t}\n\n\tfunction setLum(r, g, b, l) {\n\t\tvar d = l - getLum(r, g, b);\n\t\tdr = r + d;\n\t\tdg = g + d;\n\t\tdb = b + d;\n\t\tvar l = getLum(dr, dg, db),\n\t\t\tmn = min(dr, dg, db),\n\t\t\tmx = max(dr, dg, db);\n\t\tif (mn < 0) {\n\t\t\tvar lmn = l - mn;\n\t\t\tdr = l + (dr - l) * l / lmn;\n\t\t\tdg = l + (dg - l) * l / lmn;\n\t\t\tdb = l + (db - l) * l / lmn;\n\t\t}\n\t\tif (mx > 255) {\n\t\t\tvar ln = 255 - l,\n\t\t\t\tmxl = mx - l;\n\t\t\tdr = l + (dr - l) * ln / mxl;\n\t\t\tdg = l + (dg - l) * ln / mxl;\n\t\t\tdb = l + (db - l) * ln / mxl;\n\t\t}\n\t}\n\n\tfunction getSat(r, g, b) {\n\t\treturn max(r, g, b) - min(r, g, b);\n\t}\n\n\tfunction setSat(r, g, b, s) {\n\t\tvar col = [r, g, b],\n\t\t\tmx = max(r, g, b),\n\t\t\tmn = min(r, g, b),\n\t\t\tmd;\n\t\tmn = mn === r ? 0 : mn === g ? 1 : 2;\n\t\tmx = mx === r ? 0 : mx === g ? 1 : 2;\n\t\tmd = min(mn, mx) === 0 ? max(mn, mx) === 1 ? 2 : 1 : 0;\n\t\tif (col[mx] > col[mn]) {\n\t\t\tcol[md] = (col[md] - col[mn]) * s / (col[mx] - col[mn]);\n\t\t\tcol[mx] = s;\n\t\t} else {\n\t\t\tcol[md] = col[mx] = 0;\n\t\t}\n\t\tcol[mn] = 0;\n\t\tdr = col[0];\n\t\tdg = col[1];\n\t\tdb = col[2];\n\t}\n\n\tvar modes = {\n\t\tmultiply: function() {\n\t\t\tdr = br * sr / 255;\n\t\t\tdg = bg * sg / 255;\n\t\t\tdb = bb * sb / 255;\n\t\t},\n\n\t\tscreen: function() {\n\t\t\tdr = br + sr - (br * sr / 255);\n\t\t\tdg = bg + sg - (bg * sg / 255);\n\t\t\tdb = bb + sb - (bb * sb / 255);\n\t\t},\n\n\t\toverlay: function() {\n\t\t\tdr = br < 128 ? 2 * br * sr / 255 : 255 - 2 * (255 - br) * (255 - sr) / 255;\n\t\t\tdg = bg < 128 ? 2 * bg * sg / 255 : 255 - 2 * (255 - bg) * (255 - sg) / 255;\n\t\t\tdb = bb < 128 ? 2 * bb * sb / 255 : 255 - 2 * (255 - bb) * (255 - sb) / 255;\n\t\t},\n\n\t\t'soft-light': function() {\n\t\t\tvar t = sr * br / 255;\n\t\t\tdr = t + br * (255 - (255 - br) * (255 - sr) / 255 - t) / 255;\n\t\t\tt = sg * bg / 255;\n\t\t\tdg = t + bg * (255 - (255 - bg) * (255 - sg) / 255 - t) / 255;\n\t\t\tt = sb * bb / 255;\n\t\t\tdb = t + bb * (255 - (255 - bb) * (255 - sb) / 255 - t) / 255;\n\t\t},\n\n\t\t'hard-light': function() {\n\t\t\tdr = sr < 128 ? 2 * sr * br / 255 : 255 - 2 * (255 - sr) * (255 - br) / 255;\n\t\t\tdg = sg < 128 ? 2 * sg * bg / 255 : 255 - 2 * (255 - sg) * (255 - bg) / 255;\n\t\t\tdb = sb < 128 ? 2 * sb * bb / 255 : 255 - 2 * (255 - sb) * (255 - bb) / 255;\n\t\t},\n\n\t\t'color-dodge': function() {\n\t\t\tdr = br === 0 ? 0 : sr === 255 ? 255 : min(255, 255 * br / (255 - sr));\n\t\t\tdg = bg === 0 ? 0 : sg === 255 ? 255 : min(255, 255 * bg / (255 - sg));\n\t\t\tdb = bb === 0 ? 0 : sb === 255 ? 255 : min(255, 255 * bb / (255 - sb));\n\t\t},\n\n\t\t'color-burn': function() {\n\t\t\tdr = br === 255 ? 255 : sr === 0 ? 0 : max(0, 255 - (255 - br) * 255 / sr);\n\t\t\tdg = bg === 255 ? 255 : sg === 0 ? 0 : max(0, 255 - (255 - bg) * 255 / sg);\n\t\t\tdb = bb === 255 ? 255 : sb === 0 ? 0 : max(0, 255 - (255 - bb) * 255 / sb);\n\t\t},\n\n\t\tdarken: function() {\n\t\t\tdr = br < sr ? br : sr;\n\t\t\tdg = bg < sg ? bg : sg;\n\t\t\tdb = bb < sb ? bb : sb;\n\t\t},\n\n\t\tlighten: function() {\n\t\t\tdr = br > sr ? br : sr;\n\t\t\tdg = bg > sg ? bg : sg;\n\t\t\tdb = bb > sb ? bb : sb;\n\t\t},\n\n\t\tdifference: function() {\n\t\t\tdr = br - sr;\n\t\t\tif (dr < 0)\n\t\t\t\tdr = -dr;\n\t\t\tdg = bg - sg;\n\t\t\tif (dg < 0)\n\t\t\t\tdg = -dg;\n\t\t\tdb = bb - sb;\n\t\t\tif (db < 0)\n\t\t\t\tdb = -db;\n\t\t},\n\n\t\texclusion: function() {\n\t\t\tdr = br + sr * (255 - br - br) / 255;\n\t\t\tdg = bg + sg * (255 - bg - bg) / 255;\n\t\t\tdb = bb + sb * (255 - bb - bb) / 255;\n\t\t},\n\n\t\thue: function() {\n\t\t\tsetSat(sr, sg, sb, getSat(br, bg, bb));\n\t\t\tsetLum(dr, dg, db, getLum(br, bg, bb));\n\t\t},\n\n\t\tsaturation: function() {\n\t\t\tsetSat(br, bg, bb, getSat(sr, sg, sb));\n\t\t\tsetLum(dr, dg, db, getLum(br, bg, bb));\n\t\t},\n\n\t\tluminosity: function() {\n\t\t\tsetLum(br, bg, bb, getLum(sr, sg, sb));\n\t\t},\n\n\t\tcolor: function() {\n\t\t\tsetLum(sr, sg, sb, getLum(br, bg, bb));\n\t\t},\n\n\t\tadd: function() {\n\t\t\tdr = min(br + sr, 255);\n\t\t\tdg = min(bg + sg, 255);\n\t\t\tdb = min(bb + sb, 255);\n\t\t},\n\n\t\tsubtract: function() {\n\t\t\tdr = max(br - sr, 0);\n\t\t\tdg = max(bg - sg, 0);\n\t\t\tdb = max(bb - sb, 0);\n\t\t},\n\n\t\taverage: function() {\n\t\t\tdr = (br + sr) / 2;\n\t\t\tdg = (bg + sg) / 2;\n\t\t\tdb = (bb + sb) / 2;\n\t\t},\n\n\t\tnegation: function() {\n\t\t\tdr = 255 - abs(255 - sr - br);\n\t\t\tdg = 255 - abs(255 - sg - bg);\n\t\t\tdb = 255 - abs(255 - sb - bb);\n\t\t}\n\t};\n\n\tvar nativeModes = this.nativeModes = Base.each([\n\t\t'source-over', 'source-in', 'source-out', 'source-atop',\n\t\t'destination-over', 'destination-in', 'destination-out',\n\t\t'destination-atop', 'lighter', 'darker', 'copy', 'xor'\n\t], function(mode) {\n\t\tthis[mode] = true;\n\t}, {});\n\n\tvar ctx = CanvasProvider.getContext(1, 1);\n\tif (ctx) {\n\t\tBase.each(modes, function(func, mode) {\n\t\t\tvar darken = mode === 'darken',\n\t\t\t\tok = false;\n\t\t\tctx.save();\n\t\t\ttry {\n\t\t\t\tctx.fillStyle = darken ? '#300' : '#a00';\n\t\t\t\tctx.fillRect(0, 0, 1, 1);\n\t\t\t\tctx.globalCompositeOperation = mode;\n\t\t\t\tif (ctx.globalCompositeOperation === mode) {\n\t\t\t\t\tctx.fillStyle = darken ? '#a00' : '#300';\n\t\t\t\t\tctx.fillRect(0, 0, 1, 1);\n\t\t\t\t\tok = ctx.getImageData(0, 0, 1, 1).data[0] !== darken\n\t\t\t\t\t\t\t? 170 : 51;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t\tctx.restore();\n\t\t\tnativeModes[mode] = ok;\n\t\t});\n\t\tCanvasProvider.release(ctx);\n\t}\n\n\tthis.process = function(mode, srcContext, dstContext, alpha, offset) {\n\t\tvar srcCanvas = srcContext.canvas,\n\t\t\tnormal = mode === 'normal';\n\t\tif (normal || nativeModes[mode]) {\n\t\t\tdstContext.save();\n\t\t\tdstContext.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\tdstContext.globalAlpha = alpha;\n\t\t\tif (!normal)\n\t\t\t\tdstContext.globalCompositeOperation = mode;\n\t\t\tdstContext.drawImage(srcCanvas, offset.x, offset.y);\n\t\t\tdstContext.restore();\n\t\t} else {\n\t\t\tvar process = modes[mode];\n\t\t\tif (!process)\n\t\t\t\treturn;\n\t\t\tvar dstData = dstContext.getImageData(offset.x, offset.y,\n\t\t\t\t\tsrcCanvas.width, srcCanvas.height),\n\t\t\t\tdst = dstData.data,\n\t\t\t\tsrc = srcContext.getImageData(0, 0,\n\t\t\t\t\tsrcCanvas.width, srcCanvas.height).data;\n\t\t\tfor (var i = 0, l = dst.length; i < l; i += 4) {\n\t\t\t\tsr = src[i];\n\t\t\t\tbr = dst[i];\n\t\t\t\tsg = src[i + 1];\n\t\t\t\tbg = dst[i + 1];\n\t\t\t\tsb = src[i + 2];\n\t\t\t\tbb = dst[i + 2];\n\t\t\t\tsa = src[i + 3];\n\t\t\t\tba = dst[i + 3];\n\t\t\t\tprocess();\n\t\t\t\tvar a1 = sa * alpha / 255,\n\t\t\t\t\ta2 = 1 - a1;\n\t\t\t\tdst[i] = a1 * dr + a2 * br;\n\t\t\t\tdst[i + 1] = a1 * dg + a2 * bg;\n\t\t\t\tdst[i + 2] = a1 * db + a2 * bb;\n\t\t\t\tdst[i + 3] = sa * alpha + a2 * ba;\n\t\t\t}\n\t\t\tdstContext.putImageData(dstData, offset.x, offset.y);\n\t\t}\n\t};\n};\n\nvar SvgElement = new function() {\n\tvar svg = 'http://www.w3.org/2000/svg',\n\t\txmlns = 'http://www.w3.org/2000/xmlns',\n\t\txlink = 'http://www.w3.org/1999/xlink',\n\t\tattributeNamespace = {\n\t\t\thref: xlink,\n\t\t\txlink: xmlns,\n\t\t\txmlns: xmlns + '/',\n\t\t\t'xmlns:xlink': xmlns + '/'\n\t\t};\n\n\tfunction create(tag, attributes, formatter) {\n\t\treturn set(document.createElementNS(svg, tag), attributes, formatter);\n\t}\n\n\tfunction get(node, name) {\n\t\tvar namespace = attributeNamespace[name],\n\t\t\tvalue = namespace\n\t\t\t\t? node.getAttributeNS(namespace, name)\n\t\t\t\t: node.getAttribute(name);\n\t\treturn value === 'null' ? null : value;\n\t}\n\n\tfunction set(node, attributes, formatter) {\n\t\tfor (var name in attributes) {\n\t\t\tvar value = attributes[name],\n\t\t\t\tnamespace = attributeNamespace[name];\n\t\t\tif (typeof value === 'number' && formatter)\n\t\t\t\tvalue = formatter.number(value);\n\t\t\tif (namespace) {\n\t\t\t\tnode.setAttributeNS(namespace, name, value);\n\t\t\t} else {\n\t\t\t\tnode.setAttribute(name, value);\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\n\treturn {\n\t\tsvg: svg,\n\t\txmlns: xmlns,\n\t\txlink: xlink,\n\n\t\tcreate: create,\n\t\tget: get,\n\t\tset: set\n\t};\n};\n\nvar SvgStyles = Base.each({\n\tfillColor: ['fill', 'color'],\n\tfillRule: ['fill-rule', 'string'],\n\tstrokeColor: ['stroke', 'color'],\n\tstrokeWidth: ['stroke-width', 'number'],\n\tstrokeCap: ['stroke-linecap', 'string'],\n\tstrokeJoin: ['stroke-linejoin', 'string'],\n\tstrokeScaling: ['vector-effect', 'lookup', {\n\t\ttrue: 'none',\n\t\tfalse: 'non-scaling-stroke'\n\t}, function(item, value) {\n\t\treturn !value\n\t\t\t\t&& (item instanceof PathItem\n\t\t\t\t\t|| item instanceof Shape\n\t\t\t\t\t|| item instanceof TextItem);\n\t}],\n\tmiterLimit: ['stroke-miterlimit', 'number'],\n\tdashArray: ['stroke-dasharray', 'array'],\n\tdashOffset: ['stroke-dashoffset', 'number'],\n\tfontFamily: ['font-family', 'string'],\n\tfontWeight: ['font-weight', 'string'],\n\tfontSize: ['font-size', 'number'],\n\tjustification: ['text-anchor', 'lookup', {\n\t\tleft: 'start',\n\t\tcenter: 'middle',\n\t\tright: 'end'\n\t}],\n\topacity: ['opacity', 'number'],\n\tblendMode: ['mix-blend-mode', 'style']\n}, function(entry, key) {\n\tvar part = Base.capitalize(key),\n\t\tlookup = entry[2];\n\tthis[key] = {\n\t\ttype: entry[1],\n\t\tproperty: key,\n\t\tattribute: entry[0],\n\t\ttoSVG: lookup,\n\t\tfromSVG: lookup && Base.each(lookup, function(value, name) {\n\t\t\tthis[value] = name;\n\t\t}, {}),\n\t\texportFilter: entry[3],\n\t\tget: 'get' + part,\n\t\tset: 'set' + part\n\t};\n}, {});\n\nnew function() {\n\tvar formatter;\n\n\tfunction getTransform(matrix, coordinates, center) {\n\t\tvar attrs = new Base(),\n\t\t\ttrans = matrix.getTranslation();\n\t\tif (coordinates) {\n\t\t\tmatrix = matrix._shiftless();\n\t\t\tvar point = matrix._inverseTransform(trans);\n\t\t\tattrs[center ? 'cx' : 'x'] = point.x;\n\t\t\tattrs[center ? 'cy' : 'y'] = point.y;\n\t\t\ttrans = null;\n\t\t}\n\t\tif (!matrix.isIdentity()) {\n\t\t\tvar decomposed = matrix.decompose();\n\t\t\tif (decomposed) {\n\t\t\t\tvar parts = [],\n\t\t\t\t\tangle = decomposed.rotation,\n\t\t\t\t\tscale = decomposed.scaling,\n\t\t\t\t\tskew = decomposed.skewing;\n\t\t\t\tif (trans && !trans.isZero())\n\t\t\t\t\tparts.push('translate(' + formatter.point(trans) + ')');\n\t\t\t\tif (angle)\n\t\t\t\t\tparts.push('rotate(' + formatter.number(angle) + ')');\n\t\t\t\tif (!Numerical.isZero(scale.x - 1)\n\t\t\t\t\t\t|| !Numerical.isZero(scale.y - 1))\n\t\t\t\t\tparts.push('scale(' + formatter.point(scale) +')');\n\t\t\t\tif (skew.x)\n\t\t\t\t\tparts.push('skewX(' + formatter.number(skew.x) + ')');\n\t\t\t\tif (skew.y)\n\t\t\t\t\tparts.push('skewY(' + formatter.number(skew.y) + ')');\n\t\t\t\tattrs.transform = parts.join(' ');\n\t\t\t} else {\n\t\t\t\tattrs.transform = 'matrix(' + matrix.getValues().join(',') + ')';\n\t\t\t}\n\t\t}\n\t\treturn attrs;\n\t}\n\n\tfunction exportGroup(item, options) {\n\t\tvar attrs = getTransform(item._matrix),\n\t\t\tchildren = item._children;\n\t\tvar node = SvgElement.create('g', attrs, formatter);\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tvar child = children[i];\n\t\t\tvar childNode = exportSVG(child, options);\n\t\t\tif (childNode) {\n\t\t\t\tif (child.isClipMask()) {\n\t\t\t\t\tvar clip = SvgElement.create('clipPath');\n\t\t\t\t\tclip.appendChild(childNode);\n\t\t\t\t\tsetDefinition(child, clip, 'clip');\n\t\t\t\t\tSvgElement.set(node, {\n\t\t\t\t\t\t'clip-path': 'url(#' + clip.id + ')'\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\n\tfunction exportRaster(item, options) {\n\t\tvar attrs = getTransform(item._matrix, true),\n\t\t\tsize = item.getSize(),\n\t\t\timage = item.getImage();\n\t\tattrs.x -= size.width / 2;\n\t\tattrs.y -= size.height / 2;\n\t\tattrs.width = size.width;\n\t\tattrs.height = size.height;\n\t\tattrs.href = options.embedImages == false && image && image.src\n\t\t\t\t|| item.toDataURL();\n\t\treturn SvgElement.create('image', attrs, formatter);\n\t}\n\n\tfunction exportPath(item, options) {\n\t\tvar matchShapes = options.matchShapes;\n\t\tif (matchShapes) {\n\t\t\tvar shape = item.toShape(false);\n\t\t\tif (shape)\n\t\t\t\treturn exportShape(shape, options);\n\t\t}\n\t\tvar segments = item._segments,\n\t\t\tlength = segments.length,\n\t\t\ttype,\n\t\t\tattrs = getTransform(item._matrix);\n\t\tif (matchShapes && length >= 2 && !item.hasHandles()) {\n\t\t\tif (length > 2) {\n\t\t\t\ttype = item._closed ? 'polygon' : 'polyline';\n\t\t\t\tvar parts = [];\n\t\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\t\tparts.push(formatter.point(segments[i]._point));\n\t\t\t\t}\n\t\t\t\tattrs.points = parts.join(' ');\n\t\t\t} else {\n\t\t\t\ttype = 'line';\n\t\t\t\tvar start = segments[0]._point,\n\t\t\t\t\tend = segments[1]._point;\n\t\t\t\tattrs.set({\n\t\t\t\t\tx1: start.x,\n\t\t\t\t\ty1: start.y,\n\t\t\t\t\tx2: end.x,\n\t\t\t\t\ty2: end.y\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\ttype = 'path';\n\t\t\tattrs.d = item.getPathData(null, options.precision);\n\t\t}\n\t\treturn SvgElement.create(type, attrs, formatter);\n\t}\n\n\tfunction exportShape(item) {\n\t\tvar type = item._type,\n\t\t\tradius = item._radius,\n\t\t\tattrs = getTransform(item._matrix, true, type !== 'rectangle');\n\t\tif (type === 'rectangle') {\n\t\t\ttype = 'rect';\n\t\t\tvar size = item._size,\n\t\t\t\twidth = size.width,\n\t\t\t\theight = size.height;\n\t\t\tattrs.x -= width / 2;\n\t\t\tattrs.y -= height / 2;\n\t\t\tattrs.width = width;\n\t\t\tattrs.height = height;\n\t\t\tif (radius.isZero())\n\t\t\t\tradius = null;\n\t\t}\n\t\tif (radius) {\n\t\t\tif (type === 'circle') {\n\t\t\t\tattrs.r = radius;\n\t\t\t} else {\n\t\t\t\tattrs.rx = radius.width;\n\t\t\t\tattrs.ry = radius.height;\n\t\t\t}\n\t\t}\n\t\treturn SvgElement.create(type, attrs, formatter);\n\t}\n\n\tfunction exportCompoundPath(item, options) {\n\t\tvar attrs = getTransform(item._matrix);\n\t\tvar data = item.getPathData(null, options.precision);\n\t\tif (data)\n\t\t\tattrs.d = data;\n\t\treturn SvgElement.create('path', attrs, formatter);\n\t}\n\n\tfunction exportSymbolItem(item, options) {\n\t\tvar attrs = getTransform(item._matrix, true),\n\t\t\tdefinition = item._definition,\n\t\t\tnode = getDefinition(definition, 'symbol'),\n\t\t\tdefinitionItem = definition._item,\n\t\t\tbounds = definitionItem.getBounds();\n\t\tif (!node) {\n\t\t\tnode = SvgElement.create('symbol', {\n\t\t\t\tviewBox: formatter.rectangle(bounds)\n\t\t\t});\n\t\t\tnode.appendChild(exportSVG(definitionItem, options));\n\t\t\tsetDefinition(definition, node, 'symbol');\n\t\t}\n\t\tattrs.href = '#' + node.id;\n\t\tattrs.x += bounds.x;\n\t\tattrs.y += bounds.y;\n\t\tattrs.width = bounds.width;\n\t\tattrs.height = bounds.height;\n\t\tattrs.overflow = 'visible';\n\t\treturn SvgElement.create('use', attrs, formatter);\n\t}\n\n\tfunction exportGradient(color) {\n\t\tvar gradientNode = getDefinition(color, 'color');\n\t\tif (!gradientNode) {\n\t\t\tvar gradient = color.getGradient(),\n\t\t\t\tradial = gradient._radial,\n\t\t\t\torigin = color.getOrigin(),\n\t\t\t\tdestination = color.getDestination(),\n\t\t\t\tattrs;\n\t\t\tif (radial) {\n\t\t\t\tattrs = {\n\t\t\t\t\tcx: origin.x,\n\t\t\t\t\tcy: origin.y,\n\t\t\t\t\tr: origin.getDistance(destination)\n\t\t\t\t};\n\t\t\t\tvar highlight = color.getHighlight();\n\t\t\t\tif (highlight) {\n\t\t\t\t\tattrs.fx = highlight.x;\n\t\t\t\t\tattrs.fy = highlight.y;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tattrs = {\n\t\t\t\t\tx1: origin.x,\n\t\t\t\t\ty1: origin.y,\n\t\t\t\t\tx2: destination.x,\n\t\t\t\t\ty2: destination.y\n\t\t\t\t};\n\t\t\t}\n\t\t\tattrs.gradientUnits = 'userSpaceOnUse';\n\t\t\tgradientNode = SvgElement.create((radial ? 'radial' : 'linear')\n\t\t\t\t\t+ 'Gradient', attrs, formatter);\n\t\t\tvar stops = gradient._stops;\n\t\t\tfor (var i = 0, l = stops.length; i < l; i++) {\n\t\t\t\tvar stop = stops[i],\n\t\t\t\t\tstopColor = stop._color,\n\t\t\t\t\talpha = stopColor.getAlpha(),\n\t\t\t\t\toffset = stop._offset;\n\t\t\t\tattrs = {\n\t\t\t\t\toffset: offset == null ? i / (l - 1) : offset\n\t\t\t\t};\n\t\t\t\tif (stopColor)\n\t\t\t\t\tattrs['stop-color'] = stopColor.toCSS(true);\n\t\t\t\tif (alpha < 1)\n\t\t\t\t\tattrs['stop-opacity'] = alpha;\n\t\t\t\tgradientNode.appendChild(\n\t\t\t\t\t\tSvgElement.create('stop', attrs, formatter));\n\t\t\t}\n\t\t\tsetDefinition(color, gradientNode, 'color');\n\t\t}\n\t\treturn 'url(#' + gradientNode.id + ')';\n\t}\n\n\tfunction exportText(item) {\n\t\tvar node = SvgElement.create('text', getTransform(item._matrix, true),\n\t\t\t\tformatter);\n\t\tnode.textContent = item._content;\n\t\treturn node;\n\t}\n\n\tvar exporters = {\n\t\tGroup: exportGroup,\n\t\tLayer: exportGroup,\n\t\tRaster: exportRaster,\n\t\tPath: exportPath,\n\t\tShape: exportShape,\n\t\tCompoundPath: exportCompoundPath,\n\t\tSymbolItem: exportSymbolItem,\n\t\tPointText: exportText\n\t};\n\n\tfunction applyStyle(item, node, isRoot) {\n\t\tvar attrs = {},\n\t\t\tparent = !isRoot && item.getParent(),\n\t\t\tstyle = [];\n\n\t\tif (item._name != null)\n\t\t\tattrs.id = item._name;\n\n\t\tBase.each(SvgStyles, function(entry) {\n\t\t\tvar get = entry.get,\n\t\t\t\ttype = entry.type,\n\t\t\t\tvalue = item[get]();\n\t\t\tif (entry.exportFilter\n\t\t\t\t\t? entry.exportFilter(item, value)\n\t\t\t\t\t: !parent || !Base.equals(parent[get](), value)) {\n\t\t\t\tif (type === 'color' && value != null) {\n\t\t\t\t\tvar alpha = value.getAlpha();\n\t\t\t\t\tif (alpha < 1)\n\t\t\t\t\t\tattrs[entry.attribute + '-opacity'] = alpha;\n\t\t\t\t}\n\t\t\t\tif (type === 'style') {\n\t\t\t\t\tstyle.push(entry.attribute + ': ' + value);\n\t\t\t\t} else {\n\t\t\t\t\tattrs[entry.attribute] = value == null ? 'none'\n\t\t\t\t\t\t\t: type === 'color' ? value.gradient\n\t\t\t\t\t\t\t\t? exportGradient(value, item)\n\t\t\t\t\t\t\t\t: value.toCSS(true)\n\t\t\t\t\t\t\t: type === 'array' ? value.join(',')\n\t\t\t\t\t\t\t: type === 'lookup' ? entry.toSVG[value]\n\t\t\t\t\t\t\t: value;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (style.length)\n\t\t\tattrs.style = style.join(';');\n\n\t\tif (attrs.opacity === 1)\n\t\t\tdelete attrs.opacity;\n\n\t\tif (!item._visible)\n\t\t\tattrs.visibility = 'hidden';\n\n\t\treturn SvgElement.set(node, attrs, formatter);\n\t}\n\n\tvar definitions;\n\tfunction getDefinition(item, type) {\n\t\tif (!definitions)\n\t\t\tdefinitions = { ids: {}, svgs: {} };\n\t\treturn item && definitions.svgs[type + '-'\n\t\t\t\t+ (item._id || item.__id || (item.__id = UID.get('svg')))];\n\t}\n\n\tfunction setDefinition(item, node, type) {\n\t\tif (!definitions)\n\t\t\tgetDefinition();\n\t\tvar typeId = definitions.ids[type] = (definitions.ids[type] || 0) + 1;\n\t\tnode.id = type + '-' + typeId;\n\t\tdefinitions.svgs[type + '-' + (item._id || item.__id)] = node;\n\t}\n\n\tfunction exportDefinitions(node, options) {\n\t\tvar svg = node,\n\t\t\tdefs = null;\n\t\tif (definitions) {\n\t\t\tsvg = node.nodeName.toLowerCase() === 'svg' && node;\n\t\t\tfor (var i in definitions.svgs) {\n\t\t\t\tif (!defs) {\n\t\t\t\t\tif (!svg) {\n\t\t\t\t\t\tsvg = SvgElement.create('svg');\n\t\t\t\t\t\tsvg.appendChild(node);\n\t\t\t\t\t}\n\t\t\t\t\tdefs = svg.insertBefore(SvgElement.create('defs'),\n\t\t\t\t\t\t\tsvg.firstChild);\n\t\t\t\t}\n\t\t\t\tdefs.appendChild(definitions.svgs[i]);\n\t\t\t}\n\t\t\tdefinitions = null;\n\t\t}\n\t\treturn options.asString\n\t\t\t\t? new self.XMLSerializer().serializeToString(svg)\n\t\t\t\t: svg;\n\t}\n\n\tfunction exportSVG(item, options, isRoot) {\n\t\tvar exporter = exporters[item._class],\n\t\t\tnode = exporter && exporter(item, options);\n\t\tif (node) {\n\t\t\tvar onExport = options.onExport;\n\t\t\tif (onExport)\n\t\t\t\tnode = onExport(item, node, options) || node;\n\t\t\tvar data = JSON.stringify(item._data);\n\t\t\tif (data && data !== '{}' && data !== 'null')\n\t\t\t\tnode.setAttribute('data-paper-data', data);\n\t\t}\n\t\treturn node && applyStyle(item, node, isRoot);\n\t}\n\n\tfunction setOptions(options) {\n\t\tif (!options)\n\t\t\toptions = {};\n\t\tformatter = new Formatter(options.precision);\n\t\treturn options;\n\t}\n\n\tItem.inject({\n\t\texportSVG: function(options) {\n\t\t\toptions = setOptions(options);\n\t\t\treturn exportDefinitions(exportSVG(this, options, true), options);\n\t\t}\n\t});\n\n\tProject.inject({\n\t\texportSVG: function(options) {\n\t\t\toptions = setOptions(options);\n\t\t\tvar children = this._children,\n\t\t\t\tview = this.getView(),\n\t\t\t\tbounds = Base.pick(options.bounds, 'view'),\n\t\t\t\tmx = options.matrix || bounds === 'view' && view._matrix,\n\t\t\t\tmatrix = mx && Matrix.read([mx]),\n\t\t\t\trect = bounds === 'view'\n\t\t\t\t\t? new Rectangle([0, 0], view.getViewSize())\n\t\t\t\t\t: bounds === 'content'\n\t\t\t\t\t\t? Item._getBounds(children, matrix, { stroke: true })\n\t\t\t\t\t\t\t.rect\n\t\t\t\t\t\t: Rectangle.read([bounds], 0, { readNull: true }),\n\t\t\t\tattrs = {\n\t\t\t\t\tversion: '1.1',\n\t\t\t\t\txmlns: SvgElement.svg,\n\t\t\t\t\t'xmlns:xlink': SvgElement.xlink,\n\t\t\t\t};\n\t\t\tif (rect) {\n\t\t\t\tattrs.width = rect.width;\n\t\t\t\tattrs.height = rect.height;\n\t\t\t\tif (rect.x || rect.y)\n\t\t\t\t\tattrs.viewBox = formatter.rectangle(rect);\n\t\t\t}\n\t\t\tvar node = SvgElement.create('svg', attrs, formatter),\n\t\t\t\tparent = node;\n\t\t\tif (matrix && !matrix.isIdentity()) {\n\t\t\t\tparent = node.appendChild(SvgElement.create('g',\n\t\t\t\t\t\tgetTransform(matrix), formatter));\n\t\t\t}\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tparent.appendChild(exportSVG(children[i], options, true));\n\t\t\t}\n\t\t\treturn exportDefinitions(node, options);\n\t\t}\n\t});\n};\n\nnew function() {\n\n\tvar definitions = {},\n\t\trootSize;\n\n\tfunction getValue(node, name, isString, allowNull, allowPercent) {\n\t\tvar value = SvgElement.get(node, name),\n\t\t\tres = value == null\n\t\t\t\t? allowNull\n\t\t\t\t\t? null\n\t\t\t\t\t: isString ? '' : 0\n\t\t\t\t: isString\n\t\t\t\t\t? value\n\t\t\t\t\t: parseFloat(value);\n\t\treturn /%\\s*$/.test(value)\n\t\t\t? (res / 100) * (allowPercent ? 1\n\t\t\t\t: rootSize[/x|^width/.test(name) ? 'width' : 'height'])\n\t\t\t: res;\n\t}\n\n\tfunction getPoint(node, x, y, allowNull, allowPercent) {\n\t\tx = getValue(node, x || 'x', false, allowNull, allowPercent);\n\t\ty = getValue(node, y || 'y', false, allowNull, allowPercent);\n\t\treturn allowNull && (x == null || y == null) ? null\n\t\t\t\t: new Point(x, y);\n\t}\n\n\tfunction getSize(node, w, h, allowNull, allowPercent) {\n\t\tw = getValue(node, w || 'width', false, allowNull, allowPercent);\n\t\th = getValue(node, h || 'height', false, allowNull, allowPercent);\n\t\treturn allowNull && (w == null || h == null) ? null\n\t\t\t\t: new Size(w, h);\n\t}\n\n\tfunction convertValue(value, type, lookup) {\n\t\treturn value === 'none' ? null\n\t\t\t\t: type === 'number' ? parseFloat(value)\n\t\t\t\t: type === 'array' ?\n\t\t\t\t\tvalue ? value.split(/[\\s,]+/g).map(parseFloat) : []\n\t\t\t\t: type === 'color' ? getDefinition(value) || value\n\t\t\t\t: type === 'lookup' ? lookup[value]\n\t\t\t\t: value;\n\t}\n\n\tfunction importGroup(node, type, options, isRoot) {\n\t\tvar nodes = node.childNodes,\n\t\t\tisClip = type === 'clippath',\n\t\t\tisDefs = type === 'defs',\n\t\t\titem = new Group(),\n\t\t\tproject = item._project,\n\t\t\tcurrentStyle = project._currentStyle,\n\t\t\tchildren = [];\n\t\tif (!isClip && !isDefs) {\n\t\t\titem = applyAttributes(item, node, isRoot);\n\t\t\tproject._currentStyle = item._style.clone();\n\t\t}\n\t\tif (isRoot) {\n\t\t\tvar defs = node.querySelectorAll('defs');\n\t\t\tfor (var i = 0, l = defs.length; i < l; i++) {\n\t\t\t\timportNode(defs[i], options, false);\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\t\tvar childNode = nodes[i],\n\t\t\t\tchild;\n\t\t\tif (childNode.nodeType === 1\n\t\t\t\t\t&& !/^defs$/i.test(childNode.nodeName)\n\t\t\t\t\t&& (child = importNode(childNode, options, false))\n\t\t\t\t\t&& !(child instanceof SymbolDefinition))\n\t\t\t\tchildren.push(child);\n\t\t}\n\t\titem.addChildren(children);\n\t\tif (isClip)\n\t\t\titem = applyAttributes(item.reduce(), node, isRoot);\n\t\tproject._currentStyle = currentStyle;\n\t\tif (isClip || isDefs) {\n\t\t\titem.remove();\n\t\t\titem = null;\n\t\t}\n\t\treturn item;\n\t}\n\n\tfunction importPoly(node, type) {\n\t\tvar coords = node.getAttribute('points').match(\n\t\t\t\t\t/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g),\n\t\t\tpoints = [];\n\t\tfor (var i = 0, l = coords.length; i < l; i += 2)\n\t\t\tpoints.push(new Point(\n\t\t\t\t\tparseFloat(coords[i]),\n\t\t\t\t\tparseFloat(coords[i + 1])));\n\t\tvar path = new Path(points);\n\t\tif (type === 'polygon')\n\t\t\tpath.closePath();\n\t\treturn path;\n\t}\n\n\tfunction importPath(node) {\n\t\treturn PathItem.create(node.getAttribute('d'));\n\t}\n\n\tfunction importGradient(node, type) {\n\t\tvar id = (getValue(node, 'href', true) || '').substring(1),\n\t\t\tradial = type === 'radialgradient',\n\t\t\tgradient;\n\t\tif (id) {\n\t\t\tgradient = definitions[id].getGradient();\n\t\t\tif (gradient._radial ^ radial) {\n\t\t\t\tgradient = gradient.clone();\n\t\t\t\tgradient._radial = radial;\n\t\t\t}\n\t\t} else {\n\t\t\tvar nodes = node.childNodes,\n\t\t\t\tstops = [];\n\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\t\t\tvar child = nodes[i];\n\t\t\t\tif (child.nodeType === 1)\n\t\t\t\t\tstops.push(applyAttributes(new GradientStop(), child));\n\t\t\t}\n\t\t\tgradient = new Gradient(stops, radial);\n\t\t}\n\t\tvar origin, destination, highlight,\n\t\t\tscaleToBounds = getValue(node, 'gradientUnits', true) !==\n\t\t\t\t'userSpaceOnUse';\n\t\tif (radial) {\n\t\t\torigin = getPoint(node, 'cx', 'cy', false, scaleToBounds);\n\t\t\tdestination = origin.add(\n\t\t\t\t\tgetValue(node, 'r', false, false, scaleToBounds), 0);\n\t\t\thighlight = getPoint(node, 'fx', 'fy', true, scaleToBounds);\n\t\t} else {\n\t\t\torigin = getPoint(node, 'x1', 'y1', false, scaleToBounds);\n\t\t\tdestination = getPoint(node, 'x2', 'y2', false, scaleToBounds);\n\t\t}\n\t\tvar color = applyAttributes(\n\t\t\t\tnew Color(gradient, origin, destination, highlight), node);\n\t\tcolor._scaleToBounds = scaleToBounds;\n\t\treturn null;\n\t}\n\n\tvar importers = {\n\t\t'#document': function (node, type, options, isRoot) {\n\t\t\tvar nodes = node.childNodes;\n\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\t\t\tvar child = nodes[i];\n\t\t\t\tif (child.nodeType === 1)\n\t\t\t\t\treturn importNode(child, options, isRoot);\n\t\t\t}\n\t\t},\n\t\tg: importGroup,\n\t\tsvg: importGroup,\n\t\tclippath: importGroup,\n\t\tpolygon: importPoly,\n\t\tpolyline: importPoly,\n\t\tpath: importPath,\n\t\tlineargradient: importGradient,\n\t\tradialgradient: importGradient,\n\n\t\timage: function (node) {\n\t\t\tvar raster = new Raster(getValue(node, 'href', true));\n\t\t\traster.on('load', function() {\n\t\t\t\tvar size = getSize(node);\n\t\t\t\tthis.setSize(size);\n\t\t\t\tvar center = this._matrix._transformPoint(\n\t\t\t\t\t\tgetPoint(node).add(size.divide(2)));\n\t\t\t\tthis.translate(center);\n\t\t\t});\n\t\t\treturn raster;\n\t\t},\n\n\t\tsymbol: function(node, type, options, isRoot) {\n\t\t\treturn new SymbolDefinition(\n\t\t\t\t\timportGroup(node, type, options, isRoot), true);\n\t\t},\n\n\t\tdefs: importGroup,\n\n\t\tuse: function(node) {\n\t\t\tvar id = (getValue(node, 'href', true) || '').substring(1),\n\t\t\t\tdefinition = definitions[id],\n\t\t\t\tpoint = getPoint(node);\n\t\t\treturn definition\n\t\t\t\t\t? definition instanceof SymbolDefinition\n\t\t\t\t\t\t? definition.place(point)\n\t\t\t\t\t\t: definition.clone().translate(point)\n\t\t\t\t\t: null;\n\t\t},\n\n\t\tcircle: function(node) {\n\t\t\treturn new Shape.Circle(\n\t\t\t\t\tgetPoint(node, 'cx', 'cy'),\n\t\t\t\t\tgetValue(node, 'r'));\n\t\t},\n\n\t\tellipse: function(node) {\n\t\t\treturn new Shape.Ellipse({\n\t\t\t\tcenter: getPoint(node, 'cx', 'cy'),\n\t\t\t\tradius: getSize(node, 'rx', 'ry')\n\t\t\t});\n\t\t},\n\n\t\trect: function(node) {\n\t\t\treturn new Shape.Rectangle(new Rectangle(\n\t\t\t\t\t\tgetPoint(node),\n\t\t\t\t\t\tgetSize(node)\n\t\t\t\t\t), getSize(node, 'rx', 'ry'));\n\t\t\t},\n\n\t\tline: function(node) {\n\t\t\treturn new Path.Line(\n\t\t\t\t\tgetPoint(node, 'x1', 'y1'),\n\t\t\t\t\tgetPoint(node, 'x2', 'y2'));\n\t\t},\n\n\t\ttext: function(node) {\n\t\t\tvar text = new PointText(getPoint(node).add(\n\t\t\t\t\tgetPoint(node, 'dx', 'dy')));\n\t\t\ttext.setContent(node.textContent.trim() || '');\n\t\t\treturn text;\n\t\t}\n\t};\n\n\tfunction applyTransform(item, value, name, node) {\n\t\tif (item.transform) {\n\t\t\tvar transforms = (node.getAttribute(name) || '').split(/\\)\\s*/g),\n\t\t\t\tmatrix = new Matrix();\n\t\t\tfor (var i = 0, l = transforms.length; i < l; i++) {\n\t\t\t\tvar transform = transforms[i];\n\t\t\t\tif (!transform)\n\t\t\t\t\tbreak;\n\t\t\t\tvar parts = transform.split(/\\(\\s*/),\n\t\t\t\t\tcommand = parts[0],\n\t\t\t\t\tv = parts[1].split(/[\\s,]+/g);\n\t\t\t\tfor (var j = 0, m = v.length; j < m; j++)\n\t\t\t\t\tv[j] = parseFloat(v[j]);\n\t\t\t\tswitch (command) {\n\t\t\t\tcase 'matrix':\n\t\t\t\t\tmatrix.append(\n\t\t\t\t\t\t\tnew Matrix(v[0], v[1], v[2], v[3], v[4], v[5]));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rotate':\n\t\t\t\t\tmatrix.rotate(v[0], v[1], v[2]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'translate':\n\t\t\t\t\tmatrix.translate(v[0], v[1]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'scale':\n\t\t\t\t\tmatrix.scale(v);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'skewX':\n\t\t\t\t\tmatrix.skew(v[0], 0);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'skewY':\n\t\t\t\t\tmatrix.skew(0, v[0]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\titem.transform(matrix);\n\t\t}\n\t}\n\n\tfunction applyOpacity(item, value, name) {\n\t\tvar key = name === 'fill-opacity' ? 'getFillColor' : 'getStrokeColor',\n\t\t\tcolor = item[key] && item[key]();\n\t\tif (color)\n\t\t\tcolor.setAlpha(parseFloat(value));\n\t}\n\n\tvar attributes = Base.set(Base.each(SvgStyles, function(entry) {\n\t\tthis[entry.attribute] = function(item, value) {\n\t\t\tif (item[entry.set]) {\n\t\t\t\titem[entry.set](convertValue(value, entry.type, entry.fromSVG));\n\t\t\t\tif (entry.type === 'color') {\n\t\t\t\t\tvar color = item[entry.get]();\n\t\t\t\t\tif (color) {\n\t\t\t\t\t\tif (color._scaleToBounds) {\n\t\t\t\t\t\t\tvar bounds = item.getBounds();\n\t\t\t\t\t\t\tcolor.transform(new Matrix()\n\t\t\t\t\t\t\t\t.translate(bounds.getPoint())\n\t\t\t\t\t\t\t\t.scale(bounds.getSize()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}, {}), {\n\t\tid: function(item, value) {\n\t\t\tdefinitions[value] = item;\n\t\t\tif (item.setName)\n\t\t\t\titem.setName(value);\n\t\t},\n\n\t\t'clip-path': function(item, value) {\n\t\t\tvar clip = getDefinition(value);\n\t\t\tif (clip) {\n\t\t\t\tclip = clip.clone();\n\t\t\t\tclip.setClipMask(true);\n\t\t\t\tif (item instanceof Group) {\n\t\t\t\t\titem.insertChild(0, clip);\n\t\t\t\t} else {\n\t\t\t\t\treturn new Group(clip, item);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgradientTransform: applyTransform,\n\t\ttransform: applyTransform,\n\n\t\t'fill-opacity': applyOpacity,\n\t\t'stroke-opacity': applyOpacity,\n\n\t\tvisibility: function(item, value) {\n\t\t\tif (item.setVisible)\n\t\t\t\titem.setVisible(value === 'visible');\n\t\t},\n\n\t\tdisplay: function(item, value) {\n\t\t\tif (item.setVisible)\n\t\t\t\titem.setVisible(value !== null);\n\t\t},\n\n\t\t'stop-color': function(item, value) {\n\t\t\tif (item.setColor)\n\t\t\t\titem.setColor(value);\n\t\t},\n\n\t\t'stop-opacity': function(item, value) {\n\t\t\tif (item._color)\n\t\t\t\titem._color.setAlpha(parseFloat(value));\n\t\t},\n\n\t\toffset: function(item, value) {\n\t\t\tif (item.setOffset) {\n\t\t\t\tvar percent = value.match(/(.*)%$/);\n\t\t\t\titem.setOffset(percent ? percent[1] / 100 : parseFloat(value));\n\t\t\t}\n\t\t},\n\n\t\tviewBox: function(item, value, name, node, styles) {\n\t\t\tvar rect = new Rectangle(convertValue(value, 'array')),\n\t\t\t\tsize = getSize(node, null, null, true),\n\t\t\t\tgroup,\n\t\t\t\tmatrix;\n\t\t\tif (item instanceof Group) {\n\t\t\t\tvar scale = size ? size.divide(rect.getSize()) : 1,\n\t\t\t\tmatrix = new Matrix().scale(scale)\n\t\t\t\t\t\t.translate(rect.getPoint().negate());\n\t\t\t\tgroup = item;\n\t\t\t} else if (item instanceof SymbolDefinition) {\n\t\t\t\tif (size)\n\t\t\t\t\trect.setSize(size);\n\t\t\t\tgroup = item._item;\n\t\t\t}\n\t\t\tif (group)  {\n\t\t\t\tif (getAttribute(node, 'overflow', styles) !== 'visible') {\n\t\t\t\t\tvar clip = new Shape.Rectangle(rect);\n\t\t\t\t\tclip.setClipMask(true);\n\t\t\t\t\tgroup.addChild(clip);\n\t\t\t\t}\n\t\t\t\tif (matrix)\n\t\t\t\t\tgroup.transform(matrix);\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction getAttribute(node, name, styles) {\n\t\tvar attr = node.attributes[name],\n\t\t\tvalue = attr && attr.value;\n\t\tif (!value) {\n\t\t\tvar style = Base.camelize(name);\n\t\t\tvalue = node.style[style];\n\t\t\tif (!value && styles.node[style] !== styles.parent[style])\n\t\t\t\tvalue = styles.node[style];\n\t\t}\n\t\treturn !value ? undefined\n\t\t\t\t: value === 'none' ? null\n\t\t\t\t: value;\n\t}\n\n\tfunction applyAttributes(item, node, isRoot) {\n\t\tif (node.style) {\n\t\t\tvar parent = node.parentNode,\n\t\t\t\tstyles = {\n\t\t\t\t\tnode: DomElement.getStyles(node) || {},\n\t\t\t\t\tparent: !isRoot && !/^defs$/i.test(parent.tagName)\n\t\t\t\t\t\t\t&& DomElement.getStyles(parent) || {}\n\t\t\t\t};\n\t\t\tBase.each(attributes, function(apply, name) {\n\t\t\t\tvar value = getAttribute(node, name, styles);\n\t\t\t\titem = value !== undefined\n\t\t\t\t\t\t&& apply(item, value, name, node, styles) || item;\n\t\t\t});\n\t\t}\n\t\treturn item;\n\t}\n\n\tfunction getDefinition(value) {\n\t\tvar match = value && value.match(/\\((?:[\"'#]*)([^\"')]+)/),\n\t\t\tname = match && match[1],\n\t\t\tres = name && definitions[window\n\t\t\t\t\t? name.replace(window.location.href.split('#')[0] + '#', '')\n\t\t\t\t\t: name];\n\t\tif (res && res._scaleToBounds) {\n\t\t\tres = res.clone();\n\t\t\tres._scaleToBounds = true;\n\t\t}\n\t\treturn res;\n\t}\n\n\tfunction importNode(node, options, isRoot) {\n\t\tvar type = node.nodeName.toLowerCase(),\n\t\t\tisElement = type !== '#document',\n\t\t\tbody = document.body,\n\t\t\tcontainer,\n\t\t\tparent,\n\t\t\tnext;\n\t\tif (isRoot && isElement) {\n\t\t\trootSize = paper.getView().getSize();\n\t\t\trootSize = getSize(node, null, null, true) || rootSize;\n\t\t\tcontainer = SvgElement.create('svg', {\n\t\t\t\tstyle: 'stroke-width: 1px; stroke-miterlimit: 10'\n\t\t\t});\n\t\t\tparent = node.parentNode;\n\t\t\tnext = node.nextSibling;\n\t\t\tcontainer.appendChild(node);\n\t\t\tbody.appendChild(container);\n\t\t}\n\t\tvar settings = paper.settings,\n\t\t\tapplyMatrix = settings.applyMatrix,\n\t\t\tinsertItems = settings.insertItems;\n\t\tsettings.applyMatrix = false;\n\t\tsettings.insertItems = false;\n\t\tvar importer = importers[type],\n\t\t\titem = importer && importer(node, type, options, isRoot) || null;\n\t\tsettings.insertItems = insertItems;\n\t\tsettings.applyMatrix = applyMatrix;\n\t\tif (item) {\n\t\t\tif (isElement && !(item instanceof Group))\n\t\t\t\titem = applyAttributes(item, node, isRoot);\n\t\t\tvar onImport = options.onImport,\n\t\t\t\tdata = isElement && node.getAttribute('data-paper-data');\n\t\t\tif (onImport)\n\t\t\t\titem = onImport(node, item, options) || item;\n\t\t\tif (options.expandShapes && item instanceof Shape) {\n\t\t\t\titem.remove();\n\t\t\t\titem = item.toPath();\n\t\t\t}\n\t\t\tif (data)\n\t\t\t\titem._data = JSON.parse(data);\n\t\t}\n\t\tif (container) {\n\t\t\tbody.removeChild(container);\n\t\t\tif (parent) {\n\t\t\t\tif (next) {\n\t\t\t\t\tparent.insertBefore(node, next);\n\t\t\t\t} else {\n\t\t\t\t\tparent.appendChild(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (isRoot) {\n\t\t\tdefinitions = {};\n\t\t\tif (item && Base.pick(options.applyMatrix, applyMatrix))\n\t\t\t\titem.matrix.apply(true, true);\n\t\t}\n\t\treturn item;\n\t}\n\n\tfunction importSVG(source, options, owner) {\n\t\tif (!source)\n\t\t\treturn null;\n\t\toptions = typeof options === 'function' ? { onLoad: options }\n\t\t\t\t: options || {};\n\t\tvar scope = paper,\n\t\t\titem = null;\n\n\t\tfunction onLoad(svg) {\n\t\t\ttry {\n\t\t\t\tvar node = typeof svg === 'object' ? svg : new self.DOMParser()\n\t\t\t\t\t\t.parseFromString(svg, 'image/svg+xml');\n\t\t\t\tif (!node.nodeName) {\n\t\t\t\t\tnode = null;\n\t\t\t\t\tthrow new Error('Unsupported SVG source: ' + source);\n\t\t\t\t}\n\t\t\t\tpaper = scope;\n\t\t\t\titem = importNode(node, options, true);\n\t\t\t\tif (!options || options.insert !== false) {\n\t\t\t\t\towner._insertItem(undefined, item);\n\t\t\t\t}\n\t\t\t\tvar onLoad = options.onLoad;\n\t\t\t\tif (onLoad)\n\t\t\t\t\tonLoad(item, svg);\n\t\t\t} catch (e) {\n\t\t\t\tonError(e);\n\t\t\t}\n\t\t}\n\n\t\tfunction onError(message, status) {\n\t\t\tvar onError = options.onError;\n\t\t\tif (onError) {\n\t\t\t\tonError(message, status);\n\t\t\t} else {\n\t\t\t\tthrow new Error(message);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof source === 'string' && !/^.*</.test(source)) {\n\t\t\tvar node = document.getElementById(source);\n\t\t\tif (node) {\n\t\t\t\tonLoad(node);\n\t\t\t} else {\n\t\t\t\tHttp.request({\n\t\t\t\t\turl: source,\n\t\t\t\t\tasync: true,\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (typeof File !== 'undefined' && source instanceof File) {\n\t\t\tvar reader = new FileReader();\n\t\t\treader.onload = function() {\n\t\t\t\tonLoad(reader.result);\n\t\t\t};\n\t\t\treader.onerror = function() {\n\t\t\t\tonError(reader.error);\n\t\t\t};\n\t\t\treturn reader.readAsText(source);\n\t\t} else {\n\t\t\tonLoad(source);\n\t\t}\n\n\t\treturn item;\n\t}\n\n\tItem.inject({\n\t\timportSVG: function(node, options) {\n\t\t\treturn importSVG(node, options, this);\n\t\t}\n\t});\n\n\tProject.inject({\n\t\timportSVG: function(node, options) {\n\t\t\tthis.activate();\n\t\t\treturn importSVG(node, options, this);\n\t\t}\n\t});\n};\n\nBase.exports.PaperScript = function() {\n\tvar global = this,\n\t\tacorn = global.acorn;\n\tif (!acorn && typeof require !== 'undefined') {\n\t\ttry { acorn = require('acorn'); } catch(e) {}\n\t}\n\tif (!acorn) {\n\t\tvar exports, module;\n\t\tacorn = exports = module = {};\n\n(function(root, mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") return mod(exports);\n  if (typeof define == \"function\" && define.amd) return define([\"exports\"], mod);\n  mod(root.acorn || (root.acorn = {}));\n})(this, function(exports) {\n  \"use strict\";\n\n  exports.version = \"0.5.0\";\n\n  var options, input, inputLen, sourceFile;\n\n  exports.parse = function(inpt, opts) {\n\tinput = String(inpt); inputLen = input.length;\n\tsetOptions(opts);\n\tinitTokenState();\n\treturn parseTopLevel(options.program);\n  };\n\n  var defaultOptions = exports.defaultOptions = {\n\tecmaVersion: 5,\n\tstrictSemicolons: false,\n\tallowTrailingCommas: true,\n\tforbidReserved: false,\n\tallowReturnOutsideFunction: false,\n\tlocations: false,\n\tonComment: null,\n\tranges: false,\n\tprogram: null,\n\tsourceFile: null,\n\tdirectSourceFile: null\n  };\n\n  function setOptions(opts) {\n\toptions = opts || {};\n\tfor (var opt in defaultOptions) if (!Object.prototype.hasOwnProperty.call(options, opt))\n\t  options[opt] = defaultOptions[opt];\n\tsourceFile = options.sourceFile || null;\n  }\n\n  var getLineInfo = exports.getLineInfo = function(input, offset) {\n\tfor (var line = 1, cur = 0;;) {\n\t  lineBreak.lastIndex = cur;\n\t  var match = lineBreak.exec(input);\n\t  if (match && match.index < offset) {\n\t\t++line;\n\t\tcur = match.index + match[0].length;\n\t  } else break;\n\t}\n\treturn {line: line, column: offset - cur};\n  };\n\n  exports.tokenize = function(inpt, opts) {\n\tinput = String(inpt); inputLen = input.length;\n\tsetOptions(opts);\n\tinitTokenState();\n\n\tvar t = {};\n\tfunction getToken(forceRegexp) {\n\t  lastEnd = tokEnd;\n\t  readToken(forceRegexp);\n\t  t.start = tokStart; t.end = tokEnd;\n\t  t.startLoc = tokStartLoc; t.endLoc = tokEndLoc;\n\t  t.type = tokType; t.value = tokVal;\n\t  return t;\n\t}\n\tgetToken.jumpTo = function(pos, reAllowed) {\n\t  tokPos = pos;\n\t  if (options.locations) {\n\t\ttokCurLine = 1;\n\t\ttokLineStart = lineBreak.lastIndex = 0;\n\t\tvar match;\n\t\twhile ((match = lineBreak.exec(input)) && match.index < pos) {\n\t\t  ++tokCurLine;\n\t\t  tokLineStart = match.index + match[0].length;\n\t\t}\n\t  }\n\t  tokRegexpAllowed = reAllowed;\n\t  skipSpace();\n\t};\n\treturn getToken;\n  };\n\n  var tokPos;\n\n  var tokStart, tokEnd;\n\n  var tokStartLoc, tokEndLoc;\n\n  var tokType, tokVal;\n\n  var tokRegexpAllowed;\n\n  var tokCurLine, tokLineStart;\n\n  var lastStart, lastEnd, lastEndLoc;\n\n  var inFunction, labels, strict;\n\n  function raise(pos, message) {\n\tvar loc = getLineInfo(input, pos);\n\tmessage += \" (\" + loc.line + \":\" + loc.column + \")\";\n\tvar err = new SyntaxError(message);\n\terr.pos = pos; err.loc = loc; err.raisedAt = tokPos;\n\tthrow err;\n  }\n\n  var empty = [];\n\n  var _num = {type: \"num\"}, _regexp = {type: \"regexp\"}, _string = {type: \"string\"};\n  var _name = {type: \"name\"}, _eof = {type: \"eof\"};\n\n  var _break = {keyword: \"break\"}, _case = {keyword: \"case\", beforeExpr: true}, _catch = {keyword: \"catch\"};\n  var _continue = {keyword: \"continue\"}, _debugger = {keyword: \"debugger\"}, _default = {keyword: \"default\"};\n  var _do = {keyword: \"do\", isLoop: true}, _else = {keyword: \"else\", beforeExpr: true};\n  var _finally = {keyword: \"finally\"}, _for = {keyword: \"for\", isLoop: true}, _function = {keyword: \"function\"};\n  var _if = {keyword: \"if\"}, _return = {keyword: \"return\", beforeExpr: true}, _switch = {keyword: \"switch\"};\n  var _throw = {keyword: \"throw\", beforeExpr: true}, _try = {keyword: \"try\"}, _var = {keyword: \"var\"};\n  var _while = {keyword: \"while\", isLoop: true}, _with = {keyword: \"with\"}, _new = {keyword: \"new\", beforeExpr: true};\n  var _this = {keyword: \"this\"};\n\n  var _null = {keyword: \"null\", atomValue: null}, _true = {keyword: \"true\", atomValue: true};\n  var _false = {keyword: \"false\", atomValue: false};\n\n  var _in = {keyword: \"in\", binop: 7, beforeExpr: true};\n\n  var keywordTypes = {\"break\": _break, \"case\": _case, \"catch\": _catch,\n\t\t\t\t\t  \"continue\": _continue, \"debugger\": _debugger, \"default\": _default,\n\t\t\t\t\t  \"do\": _do, \"else\": _else, \"finally\": _finally, \"for\": _for,\n\t\t\t\t\t  \"function\": _function, \"if\": _if, \"return\": _return, \"switch\": _switch,\n\t\t\t\t\t  \"throw\": _throw, \"try\": _try, \"var\": _var, \"while\": _while, \"with\": _with,\n\t\t\t\t\t  \"null\": _null, \"true\": _true, \"false\": _false, \"new\": _new, \"in\": _in,\n\t\t\t\t\t  \"instanceof\": {keyword: \"instanceof\", binop: 7, beforeExpr: true}, \"this\": _this,\n\t\t\t\t\t  \"typeof\": {keyword: \"typeof\", prefix: true, beforeExpr: true},\n\t\t\t\t\t  \"void\": {keyword: \"void\", prefix: true, beforeExpr: true},\n\t\t\t\t\t  \"delete\": {keyword: \"delete\", prefix: true, beforeExpr: true}};\n\n  var _bracketL = {type: \"[\", beforeExpr: true}, _bracketR = {type: \"]\"}, _braceL = {type: \"{\", beforeExpr: true};\n  var _braceR = {type: \"}\"}, _parenL = {type: \"(\", beforeExpr: true}, _parenR = {type: \")\"};\n  var _comma = {type: \",\", beforeExpr: true}, _semi = {type: \";\", beforeExpr: true};\n  var _colon = {type: \":\", beforeExpr: true}, _dot = {type: \".\"}, _question = {type: \"?\", beforeExpr: true};\n\n  var _slash = {binop: 10, beforeExpr: true}, _eq = {isAssign: true, beforeExpr: true};\n  var _assign = {isAssign: true, beforeExpr: true};\n  var _incDec = {postfix: true, prefix: true, isUpdate: true}, _prefix = {prefix: true, beforeExpr: true};\n  var _logicalOR = {binop: 1, beforeExpr: true};\n  var _logicalAND = {binop: 2, beforeExpr: true};\n  var _bitwiseOR = {binop: 3, beforeExpr: true};\n  var _bitwiseXOR = {binop: 4, beforeExpr: true};\n  var _bitwiseAND = {binop: 5, beforeExpr: true};\n  var _equality = {binop: 6, beforeExpr: true};\n  var _relational = {binop: 7, beforeExpr: true};\n  var _bitShift = {binop: 8, beforeExpr: true};\n  var _plusMin = {binop: 9, prefix: true, beforeExpr: true};\n  var _multiplyModulo = {binop: 10, beforeExpr: true};\n\n  exports.tokTypes = {bracketL: _bracketL, bracketR: _bracketR, braceL: _braceL, braceR: _braceR,\n\t\t\t\t\t  parenL: _parenL, parenR: _parenR, comma: _comma, semi: _semi, colon: _colon,\n\t\t\t\t\t  dot: _dot, question: _question, slash: _slash, eq: _eq, name: _name, eof: _eof,\n\t\t\t\t\t  num: _num, regexp: _regexp, string: _string};\n  for (var kw in keywordTypes) exports.tokTypes[\"_\" + kw] = keywordTypes[kw];\n\n  function makePredicate(words) {\n\twords = words.split(\" \");\n\tvar f = \"\", cats = [];\n\tout: for (var i = 0; i < words.length; ++i) {\n\t  for (var j = 0; j < cats.length; ++j)\n\t\tif (cats[j][0].length == words[i].length) {\n\t\t  cats[j].push(words[i]);\n\t\t  continue out;\n\t\t}\n\t  cats.push([words[i]]);\n\t}\n\tfunction compareTo(arr) {\n\t  if (arr.length == 1) return f += \"return str === \" + JSON.stringify(arr[0]) + \";\";\n\t  f += \"switch(str){\";\n\t  for (var i = 0; i < arr.length; ++i) f += \"case \" + JSON.stringify(arr[i]) + \":\";\n\t  f += \"return true}return false;\";\n\t}\n\n\tif (cats.length > 3) {\n\t  cats.sort(function(a, b) {return b.length - a.length;});\n\t  f += \"switch(str.length){\";\n\t  for (var i = 0; i < cats.length; ++i) {\n\t\tvar cat = cats[i];\n\t\tf += \"case \" + cat[0].length + \":\";\n\t\tcompareTo(cat);\n\t  }\n\t  f += \"}\";\n\n\t} else {\n\t  compareTo(words);\n\t}\n\treturn new Function(\"str\", f);\n  }\n\n  var isReservedWord3 = makePredicate(\"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\");\n\n  var isReservedWord5 = makePredicate(\"class enum extends super const export import\");\n\n  var isStrictReservedWord = makePredicate(\"implements interface let package private protected public static yield\");\n\n  var isStrictBadIdWord = makePredicate(\"eval arguments\");\n\n  var isKeyword = makePredicate(\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\");\n\n  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n  var nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n  var newline = /[\\n\\r\\u2028\\u2029]/;\n\n  var lineBreak = /\\r\\n|[\\n\\r\\u2028\\u2029]/g;\n\n  var isIdentifierStart = exports.isIdentifierStart = function(code) {\n\tif (code < 65) return code === 36;\n\tif (code < 91) return true;\n\tif (code < 97) return code === 95;\n\tif (code < 123)return true;\n\treturn code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  };\n\n  var isIdentifierChar = exports.isIdentifierChar = function(code) {\n\tif (code < 48) return code === 36;\n\tif (code < 58) return true;\n\tif (code < 65) return false;\n\tif (code < 91) return true;\n\tif (code < 97) return code === 95;\n\tif (code < 123)return true;\n\treturn code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  };\n\n  function line_loc_t() {\n\tthis.line = tokCurLine;\n\tthis.column = tokPos - tokLineStart;\n  }\n\n  function initTokenState() {\n\ttokCurLine = 1;\n\ttokPos = tokLineStart = 0;\n\ttokRegexpAllowed = true;\n\tskipSpace();\n  }\n\n  function finishToken(type, val) {\n\ttokEnd = tokPos;\n\tif (options.locations) tokEndLoc = new line_loc_t;\n\ttokType = type;\n\tskipSpace();\n\ttokVal = val;\n\ttokRegexpAllowed = type.beforeExpr;\n  }\n\n  function skipBlockComment() {\n\tvar startLoc = options.onComment && options.locations && new line_loc_t;\n\tvar start = tokPos, end = input.indexOf(\"*/\", tokPos += 2);\n\tif (end === -1) raise(tokPos - 2, \"Unterminated comment\");\n\ttokPos = end + 2;\n\tif (options.locations) {\n\t  lineBreak.lastIndex = start;\n\t  var match;\n\t  while ((match = lineBreak.exec(input)) && match.index < tokPos) {\n\t\t++tokCurLine;\n\t\ttokLineStart = match.index + match[0].length;\n\t  }\n\t}\n\tif (options.onComment)\n\t  options.onComment(true, input.slice(start + 2, end), start, tokPos,\n\t\t\t\t\t\tstartLoc, options.locations && new line_loc_t);\n  }\n\n  function skipLineComment() {\n\tvar start = tokPos;\n\tvar startLoc = options.onComment && options.locations && new line_loc_t;\n\tvar ch = input.charCodeAt(tokPos+=2);\n\twhile (tokPos < inputLen && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n\t  ++tokPos;\n\t  ch = input.charCodeAt(tokPos);\n\t}\n\tif (options.onComment)\n\t  options.onComment(false, input.slice(start + 2, tokPos), start, tokPos,\n\t\t\t\t\t\tstartLoc, options.locations && new line_loc_t);\n  }\n\n  function skipSpace() {\n\twhile (tokPos < inputLen) {\n\t  var ch = input.charCodeAt(tokPos);\n\t  if (ch === 32) {\n\t\t++tokPos;\n\t  } else if (ch === 13) {\n\t\t++tokPos;\n\t\tvar next = input.charCodeAt(tokPos);\n\t\tif (next === 10) {\n\t\t  ++tokPos;\n\t\t}\n\t\tif (options.locations) {\n\t\t  ++tokCurLine;\n\t\t  tokLineStart = tokPos;\n\t\t}\n\t  } else if (ch === 10 || ch === 8232 || ch === 8233) {\n\t\t++tokPos;\n\t\tif (options.locations) {\n\t\t  ++tokCurLine;\n\t\t  tokLineStart = tokPos;\n\t\t}\n\t  } else if (ch > 8 && ch < 14) {\n\t\t++tokPos;\n\t  } else if (ch === 47) {\n\t\tvar next = input.charCodeAt(tokPos + 1);\n\t\tif (next === 42) {\n\t\t  skipBlockComment();\n\t\t} else if (next === 47) {\n\t\t  skipLineComment();\n\t\t} else break;\n\t  } else if (ch === 160) {\n\t\t++tokPos;\n\t  } else if (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n\t\t++tokPos;\n\t  } else {\n\t\tbreak;\n\t  }\n\t}\n  }\n\n  function readToken_dot() {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (next >= 48 && next <= 57) return readNumber(true);\n\t++tokPos;\n\treturn finishToken(_dot);\n  }\n\n  function readToken_slash() {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (tokRegexpAllowed) {++tokPos; return readRegexp();}\n\tif (next === 61) return finishOp(_assign, 2);\n\treturn finishOp(_slash, 1);\n  }\n\n  function readToken_mult_modulo() {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (next === 61) return finishOp(_assign, 2);\n\treturn finishOp(_multiplyModulo, 1);\n  }\n\n  function readToken_pipe_amp(code) {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (next === code) return finishOp(code === 124 ? _logicalOR : _logicalAND, 2);\n\tif (next === 61) return finishOp(_assign, 2);\n\treturn finishOp(code === 124 ? _bitwiseOR : _bitwiseAND, 1);\n  }\n\n  function readToken_caret() {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (next === 61) return finishOp(_assign, 2);\n\treturn finishOp(_bitwiseXOR, 1);\n  }\n\n  function readToken_plus_min(code) {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (next === code) {\n\t  if (next == 45 && input.charCodeAt(tokPos + 2) == 62 &&\n\t\t  newline.test(input.slice(lastEnd, tokPos))) {\n\t\ttokPos += 3;\n\t\tskipLineComment();\n\t\tskipSpace();\n\t\treturn readToken();\n\t  }\n\t  return finishOp(_incDec, 2);\n\t}\n\tif (next === 61) return finishOp(_assign, 2);\n\treturn finishOp(_plusMin, 1);\n  }\n\n  function readToken_lt_gt(code) {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tvar size = 1;\n\tif (next === code) {\n\t  size = code === 62 && input.charCodeAt(tokPos + 2) === 62 ? 3 : 2;\n\t  if (input.charCodeAt(tokPos + size) === 61) return finishOp(_assign, size + 1);\n\t  return finishOp(_bitShift, size);\n\t}\n\tif (next == 33 && code == 60 && input.charCodeAt(tokPos + 2) == 45 &&\n\t\tinput.charCodeAt(tokPos + 3) == 45) {\n\t  tokPos += 4;\n\t  skipLineComment();\n\t  skipSpace();\n\t  return readToken();\n\t}\n\tif (next === 61)\n\t  size = input.charCodeAt(tokPos + 2) === 61 ? 3 : 2;\n\treturn finishOp(_relational, size);\n  }\n\n  function readToken_eq_excl(code) {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (next === 61) return finishOp(_equality, input.charCodeAt(tokPos + 2) === 61 ? 3 : 2);\n\treturn finishOp(code === 61 ? _eq : _prefix, 1);\n  }\n\n  function getTokenFromCode(code) {\n\tswitch(code) {\n\tcase 46:\n\t  return readToken_dot();\n\n\tcase 40: ++tokPos; return finishToken(_parenL);\n\tcase 41: ++tokPos; return finishToken(_parenR);\n\tcase 59: ++tokPos; return finishToken(_semi);\n\tcase 44: ++tokPos; return finishToken(_comma);\n\tcase 91: ++tokPos; return finishToken(_bracketL);\n\tcase 93: ++tokPos; return finishToken(_bracketR);\n\tcase 123: ++tokPos; return finishToken(_braceL);\n\tcase 125: ++tokPos; return finishToken(_braceR);\n\tcase 58: ++tokPos; return finishToken(_colon);\n\tcase 63: ++tokPos; return finishToken(_question);\n\n\tcase 48:\n\t  var next = input.charCodeAt(tokPos + 1);\n\t  if (next === 120 || next === 88) return readHexNumber();\n\tcase 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n\t  return readNumber(false);\n\n\tcase 34: case 39:\n\t  return readString(code);\n\n\tcase 47:\n\t  return readToken_slash(code);\n\n\tcase 37: case 42:\n\t  return readToken_mult_modulo();\n\n\tcase 124: case 38:\n\t  return readToken_pipe_amp(code);\n\n\tcase 94:\n\t  return readToken_caret();\n\n\tcase 43: case 45:\n\t  return readToken_plus_min(code);\n\n\tcase 60: case 62:\n\t  return readToken_lt_gt(code);\n\n\tcase 61: case 33:\n\t  return readToken_eq_excl(code);\n\n\tcase 126:\n\t  return finishOp(_prefix, 1);\n\t}\n\n\treturn false;\n  }\n\n  function readToken(forceRegexp) {\n\tif (!forceRegexp) tokStart = tokPos;\n\telse tokPos = tokStart + 1;\n\tif (options.locations) tokStartLoc = new line_loc_t;\n\tif (forceRegexp) return readRegexp();\n\tif (tokPos >= inputLen) return finishToken(_eof);\n\n\tvar code = input.charCodeAt(tokPos);\n\tif (isIdentifierStart(code) || code === 92 ) return readWord();\n\n\tvar tok = getTokenFromCode(code);\n\n\tif (tok === false) {\n\t  var ch = String.fromCharCode(code);\n\t  if (ch === \"\\\\\" || nonASCIIidentifierStart.test(ch)) return readWord();\n\t  raise(tokPos, \"Unexpected character '\" + ch + \"'\");\n\t}\n\treturn tok;\n  }\n\n  function finishOp(type, size) {\n\tvar str = input.slice(tokPos, tokPos + size);\n\ttokPos += size;\n\tfinishToken(type, str);\n  }\n\n  function readRegexp() {\n\tvar content = \"\", escaped, inClass, start = tokPos;\n\tfor (;;) {\n\t  if (tokPos >= inputLen) raise(start, \"Unterminated regular expression\");\n\t  var ch = input.charAt(tokPos);\n\t  if (newline.test(ch)) raise(start, \"Unterminated regular expression\");\n\t  if (!escaped) {\n\t\tif (ch === \"[\") inClass = true;\n\t\telse if (ch === \"]\" && inClass) inClass = false;\n\t\telse if (ch === \"/\" && !inClass) break;\n\t\tescaped = ch === \"\\\\\";\n\t  } else escaped = false;\n\t  ++tokPos;\n\t}\n\tvar content = input.slice(start, tokPos);\n\t++tokPos;\n\tvar mods = readWord1();\n\tif (mods && !/^[gmsiy]*$/.test(mods)) raise(start, \"Invalid regexp flag\");\n\ttry {\n\t  var value = new RegExp(content, mods);\n\t} catch (e) {\n\t  if (e instanceof SyntaxError) raise(start, e.message);\n\t  raise(e);\n\t}\n\treturn finishToken(_regexp, value);\n  }\n\n  function readInt(radix, len) {\n\tvar start = tokPos, total = 0;\n\tfor (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n\t  var code = input.charCodeAt(tokPos), val;\n\t  if (code >= 97) val = code - 97 + 10;\n\t  else if (code >= 65) val = code - 65 + 10;\n\t  else if (code >= 48 && code <= 57) val = code - 48;\n\t  else val = Infinity;\n\t  if (val >= radix) break;\n\t  ++tokPos;\n\t  total = total * radix + val;\n\t}\n\tif (tokPos === start || len != null && tokPos - start !== len) return null;\n\n\treturn total;\n  }\n\n  function readHexNumber() {\n\ttokPos += 2;\n\tvar val = readInt(16);\n\tif (val == null) raise(tokStart + 2, \"Expected hexadecimal number\");\n\tif (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, \"Identifier directly after number\");\n\treturn finishToken(_num, val);\n  }\n\n  function readNumber(startsWithDot) {\n\tvar start = tokPos, isFloat = false, octal = input.charCodeAt(tokPos) === 48;\n\tif (!startsWithDot && readInt(10) === null) raise(start, \"Invalid number\");\n\tif (input.charCodeAt(tokPos) === 46) {\n\t  ++tokPos;\n\t  readInt(10);\n\t  isFloat = true;\n\t}\n\tvar next = input.charCodeAt(tokPos);\n\tif (next === 69 || next === 101) {\n\t  next = input.charCodeAt(++tokPos);\n\t  if (next === 43 || next === 45) ++tokPos;\n\t  if (readInt(10) === null) raise(start, \"Invalid number\");\n\t  isFloat = true;\n\t}\n\tif (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, \"Identifier directly after number\");\n\n\tvar str = input.slice(start, tokPos), val;\n\tif (isFloat) val = parseFloat(str);\n\telse if (!octal || str.length === 1) val = parseInt(str, 10);\n\telse if (/[89]/.test(str) || strict) raise(start, \"Invalid number\");\n\telse val = parseInt(str, 8);\n\treturn finishToken(_num, val);\n  }\n\n  function readString(quote) {\n\ttokPos++;\n\tvar out = \"\";\n\tfor (;;) {\n\t  if (tokPos >= inputLen) raise(tokStart, \"Unterminated string constant\");\n\t  var ch = input.charCodeAt(tokPos);\n\t  if (ch === quote) {\n\t\t++tokPos;\n\t\treturn finishToken(_string, out);\n\t  }\n\t  if (ch === 92) {\n\t\tch = input.charCodeAt(++tokPos);\n\t\tvar octal = /^[0-7]+/.exec(input.slice(tokPos, tokPos + 3));\n\t\tif (octal) octal = octal[0];\n\t\twhile (octal && parseInt(octal, 8) > 255) octal = octal.slice(0, -1);\n\t\tif (octal === \"0\") octal = null;\n\t\t++tokPos;\n\t\tif (octal) {\n\t\t  if (strict) raise(tokPos - 2, \"Octal literal in strict mode\");\n\t\t  out += String.fromCharCode(parseInt(octal, 8));\n\t\t  tokPos += octal.length - 1;\n\t\t} else {\n\t\t  switch (ch) {\n\t\t  case 110: out += \"\\n\"; break;\n\t\t  case 114: out += \"\\r\"; break;\n\t\t  case 120: out += String.fromCharCode(readHexChar(2)); break;\n\t\t  case 117: out += String.fromCharCode(readHexChar(4)); break;\n\t\t  case 85: out += String.fromCharCode(readHexChar(8)); break;\n\t\t  case 116: out += \"\\t\"; break;\n\t\t  case 98: out += \"\\b\"; break;\n\t\t  case 118: out += \"\\u000b\"; break;\n\t\t  case 102: out += \"\\f\"; break;\n\t\t  case 48: out += \"\\0\"; break;\n\t\t  case 13: if (input.charCodeAt(tokPos) === 10) ++tokPos;\n\t\t  case 10:\n\t\t\tif (options.locations) { tokLineStart = tokPos; ++tokCurLine; }\n\t\t\tbreak;\n\t\t  default: out += String.fromCharCode(ch); break;\n\t\t  }\n\t\t}\n\t  } else {\n\t\tif (ch === 13 || ch === 10 || ch === 8232 || ch === 8233) raise(tokStart, \"Unterminated string constant\");\n\t\tout += String.fromCharCode(ch);\n\t\t++tokPos;\n\t  }\n\t}\n  }\n\n  function readHexChar(len) {\n\tvar n = readInt(16, len);\n\tif (n === null) raise(tokStart, \"Bad character escape sequence\");\n\treturn n;\n  }\n\n  var containsEsc;\n\n  function readWord1() {\n\tcontainsEsc = false;\n\tvar word, first = true, start = tokPos;\n\tfor (;;) {\n\t  var ch = input.charCodeAt(tokPos);\n\t  if (isIdentifierChar(ch)) {\n\t\tif (containsEsc) word += input.charAt(tokPos);\n\t\t++tokPos;\n\t  } else if (ch === 92) {\n\t\tif (!containsEsc) word = input.slice(start, tokPos);\n\t\tcontainsEsc = true;\n\t\tif (input.charCodeAt(++tokPos) != 117)\n\t\t  raise(tokPos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n\t\t++tokPos;\n\t\tvar esc = readHexChar(4);\n\t\tvar escStr = String.fromCharCode(esc);\n\t\tif (!escStr) raise(tokPos - 1, \"Invalid Unicode escape\");\n\t\tif (!(first ? isIdentifierStart(esc) : isIdentifierChar(esc)))\n\t\t  raise(tokPos - 4, \"Invalid Unicode escape\");\n\t\tword += escStr;\n\t  } else {\n\t\tbreak;\n\t  }\n\t  first = false;\n\t}\n\treturn containsEsc ? word : input.slice(start, tokPos);\n  }\n\n  function readWord() {\n\tvar word = readWord1();\n\tvar type = _name;\n\tif (!containsEsc && isKeyword(word))\n\t  type = keywordTypes[word];\n\treturn finishToken(type, word);\n  }\n\n  function next() {\n\tlastStart = tokStart;\n\tlastEnd = tokEnd;\n\tlastEndLoc = tokEndLoc;\n\treadToken();\n  }\n\n  function setStrict(strct) {\n\tstrict = strct;\n\ttokPos = tokStart;\n\tif (options.locations) {\n\t  while (tokPos < tokLineStart) {\n\t\ttokLineStart = input.lastIndexOf(\"\\n\", tokLineStart - 2) + 1;\n\t\t--tokCurLine;\n\t  }\n\t}\n\tskipSpace();\n\treadToken();\n  }\n\n  function node_t() {\n\tthis.type = null;\n\tthis.start = tokStart;\n\tthis.end = null;\n  }\n\n  function node_loc_t() {\n\tthis.start = tokStartLoc;\n\tthis.end = null;\n\tif (sourceFile !== null) this.source = sourceFile;\n  }\n\n  function startNode() {\n\tvar node = new node_t();\n\tif (options.locations)\n\t  node.loc = new node_loc_t();\n\tif (options.directSourceFile)\n\t  node.sourceFile = options.directSourceFile;\n\tif (options.ranges)\n\t  node.range = [tokStart, 0];\n\treturn node;\n  }\n\n  function startNodeFrom(other) {\n\tvar node = new node_t();\n\tnode.start = other.start;\n\tif (options.locations) {\n\t  node.loc = new node_loc_t();\n\t  node.loc.start = other.loc.start;\n\t}\n\tif (options.ranges)\n\t  node.range = [other.range[0], 0];\n\n\treturn node;\n  }\n\n  function finishNode(node, type) {\n\tnode.type = type;\n\tnode.end = lastEnd;\n\tif (options.locations)\n\t  node.loc.end = lastEndLoc;\n\tif (options.ranges)\n\t  node.range[1] = lastEnd;\n\treturn node;\n  }\n\n  function isUseStrict(stmt) {\n\treturn options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" &&\n\t  stmt.expression.type === \"Literal\" && stmt.expression.value === \"use strict\";\n  }\n\n  function eat(type) {\n\tif (tokType === type) {\n\t  next();\n\t  return true;\n\t}\n  }\n\n  function canInsertSemicolon() {\n\treturn !options.strictSemicolons &&\n\t  (tokType === _eof || tokType === _braceR || newline.test(input.slice(lastEnd, tokStart)));\n  }\n\n  function semicolon() {\n\tif (!eat(_semi) && !canInsertSemicolon()) unexpected();\n  }\n\n  function expect(type) {\n\tif (tokType === type) next();\n\telse unexpected();\n  }\n\n  function unexpected() {\n\traise(tokStart, \"Unexpected token\");\n  }\n\n  function checkLVal(expr) {\n\tif (expr.type !== \"Identifier\" && expr.type !== \"MemberExpression\")\n\t  raise(expr.start, \"Assigning to rvalue\");\n\tif (strict && expr.type === \"Identifier\" && isStrictBadIdWord(expr.name))\n\t  raise(expr.start, \"Assigning to \" + expr.name + \" in strict mode\");\n  }\n\n  function parseTopLevel(program) {\n\tlastStart = lastEnd = tokPos;\n\tif (options.locations) lastEndLoc = new line_loc_t;\n\tinFunction = strict = null;\n\tlabels = [];\n\treadToken();\n\n\tvar node = program || startNode(), first = true;\n\tif (!program) node.body = [];\n\twhile (tokType !== _eof) {\n\t  var stmt = parseStatement();\n\t  node.body.push(stmt);\n\t  if (first && isUseStrict(stmt)) setStrict(true);\n\t  first = false;\n\t}\n\treturn finishNode(node, \"Program\");\n  }\n\n  var loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\n  function parseStatement() {\n\tif (tokType === _slash || tokType === _assign && tokVal == \"/=\")\n\t  readToken(true);\n\n\tvar starttype = tokType, node = startNode();\n\n\tswitch (starttype) {\n\tcase _break: case _continue:\n\t  next();\n\t  var isBreak = starttype === _break;\n\t  if (eat(_semi) || canInsertSemicolon()) node.label = null;\n\t  else if (tokType !== _name) unexpected();\n\t  else {\n\t\tnode.label = parseIdent();\n\t\tsemicolon();\n\t  }\n\n\t  for (var i = 0; i < labels.length; ++i) {\n\t\tvar lab = labels[i];\n\t\tif (node.label == null || lab.name === node.label.name) {\n\t\t  if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n\t\t  if (node.label && isBreak) break;\n\t\t}\n\t  }\n\t  if (i === labels.length) raise(node.start, \"Unsyntactic \" + starttype.keyword);\n\t  return finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n\n\tcase _debugger:\n\t  next();\n\t  semicolon();\n\t  return finishNode(node, \"DebuggerStatement\");\n\n\tcase _do:\n\t  next();\n\t  labels.push(loopLabel);\n\t  node.body = parseStatement();\n\t  labels.pop();\n\t  expect(_while);\n\t  node.test = parseParenExpression();\n\t  semicolon();\n\t  return finishNode(node, \"DoWhileStatement\");\n\n\tcase _for:\n\t  next();\n\t  labels.push(loopLabel);\n\t  expect(_parenL);\n\t  if (tokType === _semi) return parseFor(node, null);\n\t  if (tokType === _var) {\n\t\tvar init = startNode();\n\t\tnext();\n\t\tparseVar(init, true);\n\t\tfinishNode(init, \"VariableDeclaration\");\n\t\tif (init.declarations.length === 1 && eat(_in))\n\t\t  return parseForIn(node, init);\n\t\treturn parseFor(node, init);\n\t  }\n\t  var init = parseExpression(false, true);\n\t  if (eat(_in)) {checkLVal(init); return parseForIn(node, init);}\n\t  return parseFor(node, init);\n\n\tcase _function:\n\t  next();\n\t  return parseFunction(node, true);\n\n\tcase _if:\n\t  next();\n\t  node.test = parseParenExpression();\n\t  node.consequent = parseStatement();\n\t  node.alternate = eat(_else) ? parseStatement() : null;\n\t  return finishNode(node, \"IfStatement\");\n\n\tcase _return:\n\t  if (!inFunction && !options.allowReturnOutsideFunction)\n\t\traise(tokStart, \"'return' outside of function\");\n\t  next();\n\n\t  if (eat(_semi) || canInsertSemicolon()) node.argument = null;\n\t  else { node.argument = parseExpression(); semicolon(); }\n\t  return finishNode(node, \"ReturnStatement\");\n\n\tcase _switch:\n\t  next();\n\t  node.discriminant = parseParenExpression();\n\t  node.cases = [];\n\t  expect(_braceL);\n\t  labels.push(switchLabel);\n\n\t  for (var cur, sawDefault; tokType != _braceR;) {\n\t\tif (tokType === _case || tokType === _default) {\n\t\t  var isCase = tokType === _case;\n\t\t  if (cur) finishNode(cur, \"SwitchCase\");\n\t\t  node.cases.push(cur = startNode());\n\t\t  cur.consequent = [];\n\t\t  next();\n\t\t  if (isCase) cur.test = parseExpression();\n\t\t  else {\n\t\t\tif (sawDefault) raise(lastStart, \"Multiple default clauses\"); sawDefault = true;\n\t\t\tcur.test = null;\n\t\t  }\n\t\t  expect(_colon);\n\t\t} else {\n\t\t  if (!cur) unexpected();\n\t\t  cur.consequent.push(parseStatement());\n\t\t}\n\t  }\n\t  if (cur) finishNode(cur, \"SwitchCase\");\n\t  next();\n\t  labels.pop();\n\t  return finishNode(node, \"SwitchStatement\");\n\n\tcase _throw:\n\t  next();\n\t  if (newline.test(input.slice(lastEnd, tokStart)))\n\t\traise(lastEnd, \"Illegal newline after throw\");\n\t  node.argument = parseExpression();\n\t  semicolon();\n\t  return finishNode(node, \"ThrowStatement\");\n\n\tcase _try:\n\t  next();\n\t  node.block = parseBlock();\n\t  node.handler = null;\n\t  if (tokType === _catch) {\n\t\tvar clause = startNode();\n\t\tnext();\n\t\texpect(_parenL);\n\t\tclause.param = parseIdent();\n\t\tif (strict && isStrictBadIdWord(clause.param.name))\n\t\t  raise(clause.param.start, \"Binding \" + clause.param.name + \" in strict mode\");\n\t\texpect(_parenR);\n\t\tclause.guard = null;\n\t\tclause.body = parseBlock();\n\t\tnode.handler = finishNode(clause, \"CatchClause\");\n\t  }\n\t  node.guardedHandlers = empty;\n\t  node.finalizer = eat(_finally) ? parseBlock() : null;\n\t  if (!node.handler && !node.finalizer)\n\t\traise(node.start, \"Missing catch or finally clause\");\n\t  return finishNode(node, \"TryStatement\");\n\n\tcase _var:\n\t  next();\n\t  parseVar(node);\n\t  semicolon();\n\t  return finishNode(node, \"VariableDeclaration\");\n\n\tcase _while:\n\t  next();\n\t  node.test = parseParenExpression();\n\t  labels.push(loopLabel);\n\t  node.body = parseStatement();\n\t  labels.pop();\n\t  return finishNode(node, \"WhileStatement\");\n\n\tcase _with:\n\t  if (strict) raise(tokStart, \"'with' in strict mode\");\n\t  next();\n\t  node.object = parseParenExpression();\n\t  node.body = parseStatement();\n\t  return finishNode(node, \"WithStatement\");\n\n\tcase _braceL:\n\t  return parseBlock();\n\n\tcase _semi:\n\t  next();\n\t  return finishNode(node, \"EmptyStatement\");\n\n\tdefault:\n\t  var maybeName = tokVal, expr = parseExpression();\n\t  if (starttype === _name && expr.type === \"Identifier\" && eat(_colon)) {\n\t\tfor (var i = 0; i < labels.length; ++i)\n\t\t  if (labels[i].name === maybeName) raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n\t\tvar kind = tokType.isLoop ? \"loop\" : tokType === _switch ? \"switch\" : null;\n\t\tlabels.push({name: maybeName, kind: kind});\n\t\tnode.body = parseStatement();\n\t\tlabels.pop();\n\t\tnode.label = expr;\n\t\treturn finishNode(node, \"LabeledStatement\");\n\t  } else {\n\t\tnode.expression = expr;\n\t\tsemicolon();\n\t\treturn finishNode(node, \"ExpressionStatement\");\n\t  }\n\t}\n  }\n\n  function parseParenExpression() {\n\texpect(_parenL);\n\tvar val = parseExpression();\n\texpect(_parenR);\n\treturn val;\n  }\n\n  function parseBlock(allowStrict) {\n\tvar node = startNode(), first = true, strict = false, oldStrict;\n\tnode.body = [];\n\texpect(_braceL);\n\twhile (!eat(_braceR)) {\n\t  var stmt = parseStatement();\n\t  node.body.push(stmt);\n\t  if (first && allowStrict && isUseStrict(stmt)) {\n\t\toldStrict = strict;\n\t\tsetStrict(strict = true);\n\t  }\n\t  first = false;\n\t}\n\tif (strict && !oldStrict) setStrict(false);\n\treturn finishNode(node, \"BlockStatement\");\n  }\n\n  function parseFor(node, init) {\n\tnode.init = init;\n\texpect(_semi);\n\tnode.test = tokType === _semi ? null : parseExpression();\n\texpect(_semi);\n\tnode.update = tokType === _parenR ? null : parseExpression();\n\texpect(_parenR);\n\tnode.body = parseStatement();\n\tlabels.pop();\n\treturn finishNode(node, \"ForStatement\");\n  }\n\n  function parseForIn(node, init) {\n\tnode.left = init;\n\tnode.right = parseExpression();\n\texpect(_parenR);\n\tnode.body = parseStatement();\n\tlabels.pop();\n\treturn finishNode(node, \"ForInStatement\");\n  }\n\n  function parseVar(node, noIn) {\n\tnode.declarations = [];\n\tnode.kind = \"var\";\n\tfor (;;) {\n\t  var decl = startNode();\n\t  decl.id = parseIdent();\n\t  if (strict && isStrictBadIdWord(decl.id.name))\n\t\traise(decl.id.start, \"Binding \" + decl.id.name + \" in strict mode\");\n\t  decl.init = eat(_eq) ? parseExpression(true, noIn) : null;\n\t  node.declarations.push(finishNode(decl, \"VariableDeclarator\"));\n\t  if (!eat(_comma)) break;\n\t}\n\treturn node;\n  }\n\n  function parseExpression(noComma, noIn) {\n\tvar expr = parseMaybeAssign(noIn);\n\tif (!noComma && tokType === _comma) {\n\t  var node = startNodeFrom(expr);\n\t  node.expressions = [expr];\n\t  while (eat(_comma)) node.expressions.push(parseMaybeAssign(noIn));\n\t  return finishNode(node, \"SequenceExpression\");\n\t}\n\treturn expr;\n  }\n\n  function parseMaybeAssign(noIn) {\n\tvar left = parseMaybeConditional(noIn);\n\tif (tokType.isAssign) {\n\t  var node = startNodeFrom(left);\n\t  node.operator = tokVal;\n\t  node.left = left;\n\t  next();\n\t  node.right = parseMaybeAssign(noIn);\n\t  checkLVal(left);\n\t  return finishNode(node, \"AssignmentExpression\");\n\t}\n\treturn left;\n  }\n\n  function parseMaybeConditional(noIn) {\n\tvar expr = parseExprOps(noIn);\n\tif (eat(_question)) {\n\t  var node = startNodeFrom(expr);\n\t  node.test = expr;\n\t  node.consequent = parseExpression(true);\n\t  expect(_colon);\n\t  node.alternate = parseExpression(true, noIn);\n\t  return finishNode(node, \"ConditionalExpression\");\n\t}\n\treturn expr;\n  }\n\n  function parseExprOps(noIn) {\n\treturn parseExprOp(parseMaybeUnary(), -1, noIn);\n  }\n\n  function parseExprOp(left, minPrec, noIn) {\n\tvar prec = tokType.binop;\n\tif (prec != null && (!noIn || tokType !== _in)) {\n\t  if (prec > minPrec) {\n\t\tvar node = startNodeFrom(left);\n\t\tnode.left = left;\n\t\tnode.operator = tokVal;\n\t\tvar op = tokType;\n\t\tnext();\n\t\tnode.right = parseExprOp(parseMaybeUnary(), prec, noIn);\n\t\tvar exprNode = finishNode(node, (op === _logicalOR || op === _logicalAND) ? \"LogicalExpression\" : \"BinaryExpression\");\n\t\treturn parseExprOp(exprNode, minPrec, noIn);\n\t  }\n\t}\n\treturn left;\n  }\n\n  function parseMaybeUnary() {\n\tif (tokType.prefix) {\n\t  var node = startNode(), update = tokType.isUpdate;\n\t  node.operator = tokVal;\n\t  node.prefix = true;\n\t  tokRegexpAllowed = true;\n\t  next();\n\t  node.argument = parseMaybeUnary();\n\t  if (update) checkLVal(node.argument);\n\t  else if (strict && node.operator === \"delete\" &&\n\t\t\t   node.argument.type === \"Identifier\")\n\t\traise(node.start, \"Deleting local variable in strict mode\");\n\t  return finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n\t}\n\tvar expr = parseExprSubscripts();\n\twhile (tokType.postfix && !canInsertSemicolon()) {\n\t  var node = startNodeFrom(expr);\n\t  node.operator = tokVal;\n\t  node.prefix = false;\n\t  node.argument = expr;\n\t  checkLVal(expr);\n\t  next();\n\t  expr = finishNode(node, \"UpdateExpression\");\n\t}\n\treturn expr;\n  }\n\n  function parseExprSubscripts() {\n\treturn parseSubscripts(parseExprAtom());\n  }\n\n  function parseSubscripts(base, noCalls) {\n\tif (eat(_dot)) {\n\t  var node = startNodeFrom(base);\n\t  node.object = base;\n\t  node.property = parseIdent(true);\n\t  node.computed = false;\n\t  return parseSubscripts(finishNode(node, \"MemberExpression\"), noCalls);\n\t} else if (eat(_bracketL)) {\n\t  var node = startNodeFrom(base);\n\t  node.object = base;\n\t  node.property = parseExpression();\n\t  node.computed = true;\n\t  expect(_bracketR);\n\t  return parseSubscripts(finishNode(node, \"MemberExpression\"), noCalls);\n\t} else if (!noCalls && eat(_parenL)) {\n\t  var node = startNodeFrom(base);\n\t  node.callee = base;\n\t  node.arguments = parseExprList(_parenR, false);\n\t  return parseSubscripts(finishNode(node, \"CallExpression\"), noCalls);\n\t} else return base;\n  }\n\n  function parseExprAtom() {\n\tswitch (tokType) {\n\tcase _this:\n\t  var node = startNode();\n\t  next();\n\t  return finishNode(node, \"ThisExpression\");\n\tcase _name:\n\t  return parseIdent();\n\tcase _num: case _string: case _regexp:\n\t  var node = startNode();\n\t  node.value = tokVal;\n\t  node.raw = input.slice(tokStart, tokEnd);\n\t  next();\n\t  return finishNode(node, \"Literal\");\n\n\tcase _null: case _true: case _false:\n\t  var node = startNode();\n\t  node.value = tokType.atomValue;\n\t  node.raw = tokType.keyword;\n\t  next();\n\t  return finishNode(node, \"Literal\");\n\n\tcase _parenL:\n\t  var tokStartLoc1 = tokStartLoc, tokStart1 = tokStart;\n\t  next();\n\t  var val = parseExpression();\n\t  val.start = tokStart1;\n\t  val.end = tokEnd;\n\t  if (options.locations) {\n\t\tval.loc.start = tokStartLoc1;\n\t\tval.loc.end = tokEndLoc;\n\t  }\n\t  if (options.ranges)\n\t\tval.range = [tokStart1, tokEnd];\n\t  expect(_parenR);\n\t  return val;\n\n\tcase _bracketL:\n\t  var node = startNode();\n\t  next();\n\t  node.elements = parseExprList(_bracketR, true, true);\n\t  return finishNode(node, \"ArrayExpression\");\n\n\tcase _braceL:\n\t  return parseObj();\n\n\tcase _function:\n\t  var node = startNode();\n\t  next();\n\t  return parseFunction(node, false);\n\n\tcase _new:\n\t  return parseNew();\n\n\tdefault:\n\t  unexpected();\n\t}\n  }\n\n  function parseNew() {\n\tvar node = startNode();\n\tnext();\n\tnode.callee = parseSubscripts(parseExprAtom(), true);\n\tif (eat(_parenL)) node.arguments = parseExprList(_parenR, false);\n\telse node.arguments = empty;\n\treturn finishNode(node, \"NewExpression\");\n  }\n\n  function parseObj() {\n\tvar node = startNode(), first = true, sawGetSet = false;\n\tnode.properties = [];\n\tnext();\n\twhile (!eat(_braceR)) {\n\t  if (!first) {\n\t\texpect(_comma);\n\t\tif (options.allowTrailingCommas && eat(_braceR)) break;\n\t  } else first = false;\n\n\t  var prop = {key: parsePropertyName()}, isGetSet = false, kind;\n\t  if (eat(_colon)) {\n\t\tprop.value = parseExpression(true);\n\t\tkind = prop.kind = \"init\";\n\t  } else if (options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n\t\t\t\t (prop.key.name === \"get\" || prop.key.name === \"set\")) {\n\t\tisGetSet = sawGetSet = true;\n\t\tkind = prop.kind = prop.key.name;\n\t\tprop.key = parsePropertyName();\n\t\tif (tokType !== _parenL) unexpected();\n\t\tprop.value = parseFunction(startNode(), false);\n\t  } else unexpected();\n\n\t  if (prop.key.type === \"Identifier\" && (strict || sawGetSet)) {\n\t\tfor (var i = 0; i < node.properties.length; ++i) {\n\t\t  var other = node.properties[i];\n\t\t  if (other.key.name === prop.key.name) {\n\t\t\tvar conflict = kind == other.kind || isGetSet && other.kind === \"init\" ||\n\t\t\t  kind === \"init\" && (other.kind === \"get\" || other.kind === \"set\");\n\t\t\tif (conflict && !strict && kind === \"init\" && other.kind === \"init\") conflict = false;\n\t\t\tif (conflict) raise(prop.key.start, \"Redefinition of property\");\n\t\t  }\n\t\t}\n\t  }\n\t  node.properties.push(prop);\n\t}\n\treturn finishNode(node, \"ObjectExpression\");\n  }\n\n  function parsePropertyName() {\n\tif (tokType === _num || tokType === _string) return parseExprAtom();\n\treturn parseIdent(true);\n  }\n\n  function parseFunction(node, isStatement) {\n\tif (tokType === _name) node.id = parseIdent();\n\telse if (isStatement) unexpected();\n\telse node.id = null;\n\tnode.params = [];\n\tvar first = true;\n\texpect(_parenL);\n\twhile (!eat(_parenR)) {\n\t  if (!first) expect(_comma); else first = false;\n\t  node.params.push(parseIdent());\n\t}\n\n\tvar oldInFunc = inFunction, oldLabels = labels;\n\tinFunction = true; labels = [];\n\tnode.body = parseBlock(true);\n\tinFunction = oldInFunc; labels = oldLabels;\n\n\tif (strict || node.body.body.length && isUseStrict(node.body.body[0])) {\n\t  for (var i = node.id ? -1 : 0; i < node.params.length; ++i) {\n\t\tvar id = i < 0 ? node.id : node.params[i];\n\t\tif (isStrictReservedWord(id.name) || isStrictBadIdWord(id.name))\n\t\t  raise(id.start, \"Defining '\" + id.name + \"' in strict mode\");\n\t\tif (i >= 0) for (var j = 0; j < i; ++j) if (id.name === node.params[j].name)\n\t\t  raise(id.start, \"Argument name clash in strict mode\");\n\t  }\n\t}\n\n\treturn finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n  }\n\n  function parseExprList(close, allowTrailingComma, allowEmpty) {\n\tvar elts = [], first = true;\n\twhile (!eat(close)) {\n\t  if (!first) {\n\t\texpect(_comma);\n\t\tif (allowTrailingComma && options.allowTrailingCommas && eat(close)) break;\n\t  } else first = false;\n\n\t  if (allowEmpty && tokType === _comma) elts.push(null);\n\t  else elts.push(parseExpression(true));\n\t}\n\treturn elts;\n  }\n\n  function parseIdent(liberal) {\n\tvar node = startNode();\n\tif (liberal && options.forbidReserved == \"everywhere\") liberal = false;\n\tif (tokType === _name) {\n\t  if (!liberal &&\n\t\t  (options.forbidReserved &&\n\t\t   (options.ecmaVersion === 3 ? isReservedWord3 : isReservedWord5)(tokVal) ||\n\t\t   strict && isStrictReservedWord(tokVal)) &&\n\t\t  input.slice(tokStart, tokEnd).indexOf(\"\\\\\") == -1)\n\t\traise(tokStart, \"The keyword '\" + tokVal + \"' is reserved\");\n\t  node.name = tokVal;\n\t} else if (liberal && tokType.keyword) {\n\t  node.name = tokType.keyword;\n\t} else {\n\t  unexpected();\n\t}\n\ttokRegexpAllowed = false;\n\tnext();\n\treturn finishNode(node, \"Identifier\");\n  }\n\n});\n\n\t\tif (!acorn.version)\n\t\t\tacorn = null;\n\t}\n\n\tfunction parse(code, options) {\n\t\treturn (global.acorn || acorn).parse(code, options);\n\t}\n\n\tvar binaryOperators = {\n\t\t'+': '__add',\n\t\t'-': '__subtract',\n\t\t'*': '__multiply',\n\t\t'/': '__divide',\n\t\t'%': '__modulo',\n\t\t'==': '__equals',\n\t\t'!=': '__equals'\n\t};\n\n\tvar unaryOperators = {\n\t\t'-': '__negate',\n\t\t'+': '__self'\n\t};\n\n\tvar fields = Base.each(\n\t\t['add', 'subtract', 'multiply', 'divide', 'modulo', 'equals', 'negate'],\n\t\tfunction(name) {\n\t\t\tthis['__' + name] = '#' + name;\n\t\t},\n\t\t{\n\t\t\t__self: function() {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t);\n\tPoint.inject(fields);\n\tSize.inject(fields);\n\tColor.inject(fields);\n\n\tfunction __$__(left, operator, right) {\n\t\tvar handler = binaryOperators[operator];\n\t\tif (left && left[handler]) {\n\t\t\tvar res = left[handler](right);\n\t\t\treturn operator === '!=' ? !res : res;\n\t\t}\n\t\tswitch (operator) {\n\t\tcase '+': return left + right;\n\t\tcase '-': return left - right;\n\t\tcase '*': return left * right;\n\t\tcase '/': return left / right;\n\t\tcase '%': return left % right;\n\t\tcase '==': return left == right;\n\t\tcase '!=': return left != right;\n\t\t}\n\t}\n\n\tfunction $__(operator, value) {\n\t\tvar handler = unaryOperators[operator];\n\t\tif (value && value[handler])\n\t\t\treturn value[handler]();\n\t\tswitch (operator) {\n\t\tcase '+': return +value;\n\t\tcase '-': return -value;\n\t\t}\n\t}\n\n\tfunction compile(code, options) {\n\t\tif (!code)\n\t\t\treturn '';\n\t\toptions = options || {};\n\n\t\tvar insertions = [];\n\n\t\tfunction getOffset(offset) {\n\t\t\tfor (var i = 0, l = insertions.length; i < l; i++) {\n\t\t\t\tvar insertion = insertions[i];\n\t\t\t\tif (insertion[0] >= offset)\n\t\t\t\t\tbreak;\n\t\t\t\toffset += insertion[1];\n\t\t\t}\n\t\t\treturn offset;\n\t\t}\n\n\t\tfunction getCode(node) {\n\t\t\treturn code.substring(getOffset(node.range[0]),\n\t\t\t\t\tgetOffset(node.range[1]));\n\t\t}\n\n\t\tfunction getBetween(left, right) {\n\t\t\treturn code.substring(getOffset(left.range[1]),\n\t\t\t\t\tgetOffset(right.range[0]));\n\t\t}\n\n\t\tfunction replaceCode(node, str) {\n\t\t\tvar start = getOffset(node.range[0]),\n\t\t\t\tend = getOffset(node.range[1]),\n\t\t\t\tinsert = 0;\n\t\t\tfor (var i = insertions.length - 1; i >= 0; i--) {\n\t\t\t\tif (start > insertions[i][0]) {\n\t\t\t\t\tinsert = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tinsertions.splice(insert, 0, [start, str.length - end + start]);\n\t\t\tcode = code.substring(0, start) + str + code.substring(end);\n\t\t}\n\n\t\tfunction walkAST(node, parent) {\n\t\t\tif (!node)\n\t\t\t\treturn;\n\t\t\tfor (var key in node) {\n\t\t\t\tif (key === 'range' || key === 'loc')\n\t\t\t\t\tcontinue;\n\t\t\t\tvar value = node[key];\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tfor (var i = 0, l = value.length; i < l; i++)\n\t\t\t\t\t\twalkAST(value[i], node);\n\t\t\t\t} else if (value && typeof value === 'object') {\n\t\t\t\t\twalkAST(value, node);\n\t\t\t\t}\n\t\t\t}\n\t\t\tswitch (node.type) {\n\t\t\tcase 'UnaryExpression':\n\t\t\t\tif (node.operator in unaryOperators\n\t\t\t\t\t\t&& node.argument.type !== 'Literal') {\n\t\t\t\t\tvar arg = getCode(node.argument);\n\t\t\t\t\treplaceCode(node, '$__(\"' + node.operator + '\", '\n\t\t\t\t\t\t\t+ arg + ')');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'BinaryExpression':\n\t\t\t\tif (node.operator in binaryOperators\n\t\t\t\t\t\t&& node.left.type !== 'Literal') {\n\t\t\t\t\tvar left = getCode(node.left),\n\t\t\t\t\t\tright = getCode(node.right),\n\t\t\t\t\t\tbetween = getBetween(node.left, node.right),\n\t\t\t\t\t\toperator = node.operator;\n\t\t\t\t\treplaceCode(node, '__$__(' + left + ','\n\t\t\t\t\t\t\t+ between.replace(new RegExp('\\\\' + operator),\n\t\t\t\t\t\t\t\t'\"' + operator + '\"')\n\t\t\t\t\t\t\t+ ', ' + right + ')');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'UpdateExpression':\n\t\t\tcase 'AssignmentExpression':\n\t\t\t\tvar parentType = parent && parent.type;\n\t\t\t\tif (!(\n\t\t\t\t\t\tparentType === 'ForStatement'\n\t\t\t\t\t\t|| parentType === 'BinaryExpression'\n\t\t\t\t\t\t\t&& /^[=!<>]/.test(parent.operator)\n\t\t\t\t\t\t|| parentType === 'MemberExpression' && parent.computed\n\t\t\t\t)) {\n\t\t\t\t\tif (node.type === 'UpdateExpression') {\n\t\t\t\t\t\tvar arg = getCode(node.argument),\n\t\t\t\t\t\t\texp = '__$__(' + arg + ', \"' + node.operator[0]\n\t\t\t\t\t\t\t\t\t+ '\", 1)',\n\t\t\t\t\t\t\tstr = arg + ' = ' + exp;\n\t\t\t\t\t\tif (!node.prefix\n\t\t\t\t\t\t\t\t&& (parentType === 'AssignmentExpression'\n\t\t\t\t\t\t\t\t\t|| parentType === 'VariableDeclarator')) {\n\t\t\t\t\t\t\tif (getCode(parent.left || parent.id) === arg)\n\t\t\t\t\t\t\t\tstr = exp;\n\t\t\t\t\t\t\tstr = arg + '; ' + str;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treplaceCode(node, str);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (/^.=$/.test(node.operator)\n\t\t\t\t\t\t\t\t&& node.left.type !== 'Literal') {\n\t\t\t\t\t\t\tvar left = getCode(node.left),\n\t\t\t\t\t\t\t\tright = getCode(node.right),\n\t\t\t\t\t\t\t\texp = left + ' = __$__(' + left + ', \"'\n\t\t\t\t\t\t\t\t\t+ node.operator[0] + '\", ' + right + ')';\n\t\t\t\t\t\t\treplaceCode(node, /^\\(.*\\)$/.test(getCode(node))\n\t\t\t\t\t\t\t\t\t? '(' + exp + ')' : exp);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction encodeVLQ(value) {\n\t\t\tvar res = '',\n\t\t\t\tbase64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\t\tvalue = (Math.abs(value) << 1) + (value < 0 ? 1 : 0);\n\t\t\twhile (value || !res) {\n\t\t\t\tvar next = value & (32 - 1);\n\t\t\t\tvalue >>= 5;\n\t\t\t\tif (value)\n\t\t\t\t\tnext |= 32;\n\t\t\t\tres += base64[next];\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\n\t\tvar url = options.url || '',\n\t\t\tagent = paper.agent,\n\t\t\tversion = agent.versionNumber,\n\t\t\toffsetCode = false,\n\t\t\tsourceMaps = options.sourceMaps,\n\t\t\tsource = options.source || code,\n\t\t\tlineBreaks = /\\r\\n|\\n|\\r/mg,\n\t\t\toffset = options.offset || 0,\n\t\t\tmap;\n\t\tif (sourceMaps && (agent.chrome && version >= 30\n\t\t\t\t|| agent.webkit && version >= 537.76\n\t\t\t\t|| agent.firefox && version >= 23\n\t\t\t\t|| agent.node)) {\n\t\t\tif (agent.node) {\n\t\t\t\toffset -= 2;\n\t\t\t} else if (window && url && !window.location.href.indexOf(url)) {\n\t\t\t\tvar html = document.getElementsByTagName('html')[0].innerHTML;\n\t\t\t\toffset = html.substr(0, html.indexOf(code) + 1).match(\n\t\t\t\t\t\tlineBreaks).length + 1;\n\t\t\t}\n\t\t\toffsetCode = offset > 0 && !(\n\t\t\t\t\tagent.chrome && version >= 36 ||\n\t\t\t\t\tagent.safari && version >= 600 ||\n\t\t\t\t\tagent.firefox && version >= 40 ||\n\t\t\t\t\tagent.node);\n\t\t\tvar mappings = ['AA' + encodeVLQ(offsetCode ? 0 : offset) + 'A'];\n\t\t\tmappings.length = (code.match(lineBreaks) || []).length + 1\n\t\t\t\t\t+ (offsetCode ? offset : 0);\n\t\t\tmap = {\n\t\t\t\tversion: 3,\n\t\t\t\tfile: url,\n\t\t\t\tnames:[],\n\t\t\t\tmappings: mappings.join(';AACA'),\n\t\t\t\tsourceRoot: '',\n\t\t\t\tsources: [url],\n\t\t\t\tsourcesContent: [source]\n\t\t\t};\n\t\t}\n\t\twalkAST(parse(code, { ranges: true, preserveParens: true }));\n\t\tif (map) {\n\t\t\tif (offsetCode) {\n\t\t\t\tcode = new Array(offset + 1).join('\\n') + code;\n\t\t\t}\n\t\t\tif (/^(inline|both)$/.test(sourceMaps)) {\n\t\t\t\tcode += \"\\n//# sourceMappingURL=data:application/json;base64,\"\n\t\t\t\t\t\t+ self.btoa(unescape(encodeURIComponent(\n\t\t\t\t\t\t\tJSON.stringify(map))));\n\t\t\t}\n\t\t\tcode += \"\\n//# sourceURL=\" + (url || 'paperscript');\n\t\t}\n\t\treturn {\n\t\t\turl: url,\n\t\t\tsource: source,\n\t\t\tcode: code,\n\t\t\tmap: map\n\t\t};\n\t}\n\n\tfunction execute(code, scope, options) {\n\t\tpaper = scope;\n\t\tvar view = scope.getView(),\n\t\t\ttool = /\\btool\\.\\w+|\\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\\b/\n\t\t\t\t\t.test(code) && !/\\bnew\\s+Tool\\b/.test(code)\n\t\t\t\t\t\t? new Tool() : null,\n\t\t\ttoolHandlers = tool ? tool._events : [],\n\t\t\thandlers = ['onFrame', 'onResize'].concat(toolHandlers),\n\t\t\tparams = [],\n\t\t\targs = [],\n\t\t\tfunc,\n\t\t\tcompiled = typeof code === 'object' ? code : compile(code, options);\n\t\tcode = compiled.code;\n\t\tfunction expose(scope, hidden) {\n\t\t\tfor (var key in scope) {\n\t\t\t\tif ((hidden || !/^_/.test(key)) && new RegExp('([\\\\b\\\\s\\\\W]|^)'\n\t\t\t\t\t\t+ key.replace(/\\$/g, '\\\\$') + '\\\\b').test(code)) {\n\t\t\t\t\tparams.push(key);\n\t\t\t\t\targs.push(scope[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texpose({ __$__: __$__, $__: $__, paper: scope, view: view, tool: tool },\n\t\t\t\ttrue);\n\t\texpose(scope);\n\t\thandlers = Base.each(handlers, function(key) {\n\t\t\tif (new RegExp('\\\\s+' + key + '\\\\b').test(code)) {\n\t\t\t\tparams.push(key);\n\t\t\t\tthis.push(key + ': ' + key);\n\t\t\t}\n\t\t}, []).join(', ');\n\t\tif (handlers)\n\t\t\tcode += '\\nreturn { ' + handlers + ' };';\n\t\tvar agent = paper.agent;\n\t\tif (document && (agent.chrome\n\t\t\t\t|| agent.firefox && agent.versionNumber < 40)) {\n\t\t\tvar script = document.createElement('script'),\n\t\t\t\thead = document.head || document.getElementsByTagName('head')[0];\n\t\t\tif (agent.firefox)\n\t\t\t\tcode = '\\n' + code;\n\t\t\tscript.appendChild(document.createTextNode(\n\t\t\t\t'paper._execute = function(' + params + ') {' + code + '\\n}'\n\t\t\t));\n\t\t\thead.appendChild(script);\n\t\t\tfunc = paper._execute;\n\t\t\tdelete paper._execute;\n\t\t\thead.removeChild(script);\n\t\t} else {\n\t\t\tfunc = Function(params, code);\n\t\t}\n\t\tvar res = func.apply(scope, args) || {};\n\t\tBase.each(toolHandlers, function(key) {\n\t\t\tvar value = res[key];\n\t\t\tif (value)\n\t\t\t\ttool[key] = value;\n\t\t});\n\t\tif (view) {\n\t\t\tif (res.onResize)\n\t\t\t\tview.setOnResize(res.onResize);\n\t\t\tview.emit('resize', {\n\t\t\t\tsize: view.size,\n\t\t\t\tdelta: new Point()\n\t\t\t});\n\t\t\tif (res.onFrame)\n\t\t\t\tview.setOnFrame(res.onFrame);\n\t\t\tview.requestUpdate();\n\t\t}\n\t\treturn compiled;\n\t}\n\n\tfunction loadScript(script) {\n\t\tif (/^text\\/(?:x-|)paperscript$/.test(script.type)\n\t\t\t\t&& PaperScope.getAttribute(script, 'ignore') !== 'true') {\n\t\t\tvar canvasId = PaperScope.getAttribute(script, 'canvas'),\n\t\t\t\tcanvas = document.getElementById(canvasId),\n\t\t\t\tsrc = script.src || script.getAttribute('data-src'),\n\t\t\t\tasync = PaperScope.hasAttribute(script, 'async'),\n\t\t\t\tscopeAttribute = 'data-paper-scope';\n\t\t\tif (!canvas)\n\t\t\t\tthrow new Error('Unable to find canvas with id \"'\n\t\t\t\t\t\t+ canvasId + '\"');\n\t\t\tvar scope = PaperScope.get(canvas.getAttribute(scopeAttribute))\n\t\t\t\t\t\t|| new PaperScope().setup(canvas);\n\t\t\tcanvas.setAttribute(scopeAttribute, scope._id);\n\t\t\tif (src) {\n\t\t\t\tHttp.request({\n\t\t\t\t\turl: src,\n\t\t\t\t\tasync: async,\n\t\t\t\t\tmimeType: 'text/plain',\n\t\t\t\t\tonLoad: function(code) {\n\t\t\t\t\t\texecute(code, scope, src);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\texecute(script.innerHTML, scope, script.baseURI);\n\t\t\t}\n\t\t\tscript.setAttribute('data-paper-ignore', 'true');\n\t\t\treturn scope;\n\t\t}\n\t}\n\n\tfunction loadAll() {\n\t\tBase.each(document && document.getElementsByTagName('script'),\n\t\t\t\tloadScript);\n\t}\n\n\tfunction load(script) {\n\t\treturn script ? loadScript(script) : loadAll();\n\t}\n\n\tif (window) {\n\t\tif (document.readyState === 'complete') {\n\t\t\tsetTimeout(loadAll);\n\t\t} else {\n\t\t\tDomEvent.add(window, { load: loadAll });\n\t\t}\n\t}\n\n\treturn {\n\t\tcompile: compile,\n\t\texecute: execute,\n\t\tload: load,\n\t\tparse: parse\n\t};\n\n}.call(this);\n\npaper = new (PaperScope.inject(Base.exports, {\n\tBase: Base,\n\tNumerical: Numerical,\n\tKey: Key,\n\tDomEvent: DomEvent,\n\tDomElement: DomElement,\n\tdocument: document,\n\twindow: window,\n\tSymbol: SymbolDefinition,\n\tPlacedSymbol: SymbolItem\n}))();\n\nif (paper.agent.node) {\n\trequire('./node/extend.js')(paper);\n}\n\nif (typeof define === 'function' && define.amd) {\n\tdefine('paper', paper);\n} else if (typeof module === 'object' && module) {\n\tmodule.exports = paper;\n}\n\nreturn paper;\n}.call(this, typeof self === 'object' ? self : null);\n","export function RoughSegmentRelation() {\n  return {\n    LEFT: 0,\n    RIGHT: 1,\n    INTERSECTS: 2,\n    AHEAD: 3,\n    BEHIND: 4,\n    SEPARATE: 5,\n    UNDEFINED: 6\n  };\n}\n\nexport class RoughSegment {\n  constructor(px1, py1, px2, py2) {\n    this.RoughSegmentRelationConst = RoughSegmentRelation();\n    this.px1 = px1;\n    this.py1 = py1;\n    this.px2 = px2;\n    this.py2 = py2;\n    this.xi = Number.MAX_VALUE;\n    this.yi = Number.MAX_VALUE;\n    this.a = py2 - py1;\n    this.b = px1 - px2;\n    this.c = px2 * py1 - px1 * py2;\n    this._undefined = ((this.a == 0) && (this.b == 0) && (this.c == 0));\n  }\n\n  isUndefined() {\n    return this._undefined;\n  }\n\n  compare(otherSegment) {\n    if (this.isUndefined() || otherSegment.isUndefined()) {\n      return this.RoughSegmentRelationConst.UNDEFINED;\n    }\n    var grad1 = Number.MAX_VALUE;\n    var grad2 = Number.MAX_VALUE;\n    var int1 = 0, int2 = 0;\n    var a = this.a, b = this.b, c = this.c;\n\n    if (Math.abs(b) > 0.00001) {\n      grad1 = -a / b;\n      int1 = -c / b;\n    }\n    if (Math.abs(otherSegment.b) > 0.00001) {\n      grad2 = -otherSegment.a / otherSegment.b;\n      int2 = -otherSegment.c / otherSegment.b;\n    }\n\n    if (grad1 == Number.MAX_VALUE) {\n      if (grad2 == Number.MAX_VALUE) {\n        if ((-c / a) != (-otherSegment.c / otherSegment.a)) {\n          return this.RoughSegmentRelationConst.SEPARATE;\n        }\n        if ((this.py1 >= Math.min(otherSegment.py1, otherSegment.py2)) && (this.py1 <= Math.max(otherSegment.py1, otherSegment.py2))) {\n          this.xi = this.px1;\n          this.yi = this.py1;\n          return this.RoughSegmentRelationConst.INTERSECTS;\n        }\n        if ((this.py2 >= Math.min(otherSegment.py1, otherSegment.py2)) && (this.py2 <= Math.max(otherSegment.py1, otherSegment.py2))) {\n          this.xi = this.px2;\n          this.yi = this.py2;\n          return this.RoughSegmentRelationConst.INTERSECTS;\n        }\n        return this.RoughSegmentRelationConst.SEPARATE;\n      }\n      this.xi = this.px1;\n      this.yi = (grad2 * this.xi + int2);\n      if (((this.py1 - this.yi) * (this.yi - this.py2) < -0.00001) || ((otherSegment.py1 - this.yi) * (this.yi - otherSegment.py2) < -0.00001)) {\n        return this.RoughSegmentRelationConst.SEPARATE;\n      }\n      if (Math.abs(otherSegment.a) < 0.00001) {\n        if ((otherSegment.px1 - this.xi) * (this.xi - otherSegment.px2) < -0.00001) {\n          return this.RoughSegmentRelationConst.SEPARATE;\n        }\n        return this.RoughSegmentRelationConst.INTERSECTS;\n      }\n      return this.RoughSegmentRelationConst.INTERSECTS;\n    }\n\n    if (grad2 == Number.MAX_VALUE) {\n      this.xi = otherSegment.px1;\n      this.yi = grad1 * this.xi + int1;\n      if (((otherSegment.py1 - this.yi) * (this.yi - otherSegment.py2) < -0.00001) || ((this.py1 - this.yi) * (this.yi - this.py2) < -0.00001)) {\n        return this.RoughSegmentRelationConst.SEPARATE;\n      }\n      if (Math.abs(a) < 0.00001) {\n        if ((this.px1 - this.xi) * (this.xi - this.px2) < -0.00001) {\n          return this.RoughSegmentRelationConst.SEPARATE;\n        }\n        return this.RoughSegmentRelationConst.INTERSECTS;\n      }\n      return this.RoughSegmentRelationConst.INTERSECTS;\n    }\n\n    if (grad1 == grad2) {\n      if (int1 != int2) {\n        return this.RoughSegmentRelationConst.SEPARATE;\n      }\n      if ((this.px1 >= Math.min(otherSegment.px1, otherSegment.px2)) && (this.px1 <= Math.max(otherSegment.py1, otherSegment.py2))) {\n        this.xi = this.px1;\n        this.yi = this.py1;\n        return this.RoughSegmentRelationConst.INTERSECTS;\n      }\n      if ((this.px2 >= Math.min(otherSegment.px1, otherSegment.px2)) && (this.px2 <= Math.max(otherSegment.px1, otherSegment.px2))) {\n        this.xi = this.px2;\n        this.yi = this.py2;\n        return this.RoughSegmentRelationConst.INTERSECTS;\n      }\n      return this.RoughSegmentRelationConst.SEPARATE;\n    }\n\n    this.xi = ((int2 - int1) / (grad1 - grad2));\n    this.yi = (grad1 * this.xi + int1);\n\n    if (((this.px1 - this.xi) * (this.xi - this.px2) < -0.00001) || ((otherSegment.px1 - this.xi) * (this.xi - otherSegment.px2) < -0.00001)) {\n      return this.RoughSegmentRelationConst.SEPARATE;\n    }\n    return this.RoughSegmentRelationConst.INTERSECTS;\n  }\n\n  getLength() {\n    return this._getLength(this.px1, this.py1, this.px2, this.py2);\n  }\n\n  _getLength(x1, y1, x2, y2) {\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n}","import { RoughSegmentRelation, RoughSegment } from \"./segment\";\n\nexport class RoughHachureIterator {\n  constructor(top, bottom, left, right, gap, sinAngle, cosAngle, tanAngle) {\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n    this.gap = gap;\n    this.sinAngle = sinAngle;\n    this.tanAngle = tanAngle;\n\n    if (Math.abs(sinAngle) < 0.0001) {\n      this.pos = left + gap;\n    } else if (Math.abs(sinAngle) > 0.9999) {\n      this.pos = top + gap;\n    } else {\n      this.deltaX = (bottom - top) * Math.abs(tanAngle);\n      this.pos = left - Math.abs(this.deltaX);\n      this.hGap = Math.abs(gap / cosAngle);\n      this.sLeft = new RoughSegment(left, bottom, left, top);\n      this.sRight = new RoughSegment(right, bottom, right, top);\n    }\n  }\n\n  getNextLine() {\n    if (Math.abs(this.sinAngle) < 0.0001) {\n      if (this.pos < this.right) {\n        let line = [this.pos, this.top, this.pos, this.bottom];\n        this.pos += this.gap;\n        return line;\n      }\n    } else if (Math.abs(this.sinAngle) > 0.9999) {\n      if (this.pos < this.bottom) {\n        let line = [this.left, this.pos, this.right, this.pos];\n        this.pos += this.gap;\n        return line;\n      }\n    } else {\n      let xLower = this.pos - this.deltaX / 2;\n      let xUpper = this.pos + this.deltaX / 2;\n      let yLower = this.bottom;\n      let yUpper = this.top;\n      if (this.pos < (this.right + this.deltaX)) {\n        while (((xLower < this.left) && (xUpper < this.left)) || ((xLower > this.right) && (xUpper > this.right))) {\n          this.pos += this.hGap;\n          xLower = this.pos - this.deltaX / 2;\n          xUpper = this.pos + this.deltaX / 2;\n          if (this.pos > (this.right + this.deltaX)) {\n            return null;\n          }\n        }\n        let s = new RoughSegment(xLower, yLower, xUpper, yUpper);\n        if (s.compare(this.sLeft) == RoughSegmentRelation().INTERSECTS) {\n          xLower = s.xi;\n          yLower = s.yi;\n        }\n        if (s.compare(this.sRight) == RoughSegmentRelation().INTERSECTS) {\n          xUpper = s.xi;\n          yUpper = s.yi;\n        }\n        if (this.tanAngle > 0) {\n          xLower = this.right - (xLower - this.left);\n          xUpper = this.right - (xUpper - this.left);\n        }\n        let line = [xLower, yLower, xUpper, yUpper];\n        this.pos += this.hGap;\n        return line;\n      }\n    }\n    return null;\n  }\n}","class PathToken {\n  constructor(type, text) {\n    this.type = type;\n    this.text = text;\n  }\n  isType(type) {\n    return this.type === type;\n  }\n}\n\nclass ParsedPath {\n  constructor(d) {\n    this.PARAMS = {\n      A: [\"rx\", \"ry\", \"x-axis-rotation\", \"large-arc-flag\", \"sweep-flag\", \"x\", \"y\"],\n      a: [\"rx\", \"ry\", \"x-axis-rotation\", \"large-arc-flag\", \"sweep-flag\", \"x\", \"y\"],\n      C: [\"x1\", \"y1\", \"x2\", \"y2\", \"x\", \"y\"],\n      c: [\"x1\", \"y1\", \"x2\", \"y2\", \"x\", \"y\"],\n      H: [\"x\"],\n      h: [\"x\"],\n      L: [\"x\", \"y\"],\n      l: [\"x\", \"y\"],\n      M: [\"x\", \"y\"],\n      m: [\"x\", \"y\"],\n      Q: [\"x1\", \"y1\", \"x\", \"y\"],\n      q: [\"x1\", \"y1\", \"x\", \"y\"],\n      S: [\"x2\", \"y2\", \"x\", \"y\"],\n      s: [\"x2\", \"y2\", \"x\", \"y\"],\n      T: [\"x\", \"y\"],\n      t: [\"x\", \"y\"],\n      V: [\"y\"],\n      v: [\"y\"],\n      Z: [],\n      z: []\n    };\n    this.COMMAND = 0;\n    this.NUMBER = 1;\n    this.EOD = 2;\n    this.segments = [];\n    this.d = d || \"\";\n    this.parseData(d);\n    this.processPoints();\n  }\n\n  loadFromSegments(segments) {\n    this.segments = segments;\n    this.processPoints();\n  }\n\n  processPoints() {\n    let first = null, prev = null, currentPoint = [0, 0];\n    for (let i = 0; i < this.segments.length; i++) {\n      let s = this.segments[i];\n      switch (s.key) {\n        case 'M':\n        case 'L':\n        case 'T':\n          s.point = [s.data[0], s.data[1]];\n          break;\n        case 'm':\n        case 'l':\n        case 't':\n          s.point = [s.data[0] + currentPoint[0], s.data[1] + currentPoint[1]];\n          break;\n        case 'H':\n          s.point = [s.data[0], currentPoint[1]];\n          break;\n        case 'h':\n          s.point = [s.data[0] + currentPoint[0], currentPoint[1]];\n          break;\n        case 'V':\n          s.point = [currentPoint[0], s.data[0]];\n          break;\n        case 'v':\n          s.point = [currentPoint[0], s.data[0] + currentPoint[1]];\n          break;\n        case 'z':\n        case 'Z':\n          if (first) {\n            s.point = [first[0], first[1]];\n          }\n          break;\n        case 'C':\n          s.point = [s.data[4], s.data[5]];\n          break;\n        case 'c':\n          s.point = [s.data[4] + currentPoint[0], s.data[5] + currentPoint[1]];\n          break;\n        case 'S':\n          s.point = [s.data[2], s.data[3]];\n          break;\n        case 's':\n          s.point = [s.data[2] + currentPoint[0], s.data[3] + currentPoint[1]];\n          break;\n        case 'Q':\n          s.point = [s.data[2], s.data[3]];\n          break;\n        case 'q':\n          s.point = [s.data[2] + currentPoint[0], s.data[3] + currentPoint[1]];\n          break;\n        case 'A':\n          s.point = [s.data[5], s.data[6]];\n          break;\n        case 'a':\n          s.point = [s.data[5] + currentPoint[0], s.data[6] + currentPoint[1]];\n          break;\n      }\n      if (s.key === 'm' || s.key === 'M') {\n        first = null;\n      }\n      if (s.point) {\n        currentPoint = s.point;\n        if (!first) {\n          first = s.point;\n        }\n      }\n      if (s.key === 'z' || s.key === 'Z') {\n        first = null;\n      }\n      prev = s;\n    }\n  }\n\n  get closed() {\n    if (typeof this._closed === 'undefined') {\n      this._closed = false;\n      for (let s of this.segments) {\n        if (s.key.toLowerCase() === 'z') {\n          this._closed = true;\n        }\n      }\n    }\n    return this._closed;\n  }\n\n  parseData(d) {\n    var tokens = this.tokenize(d);\n    var index = 0;\n    var token = tokens[index];\n    var mode = \"BOD\";\n    this.segments = new Array();\n    while (!token.isType(this.EOD)) {\n      var param_length;\n      var params = new Array();\n      if (mode == \"BOD\") {\n        if (token.text == \"M\" || token.text == \"m\") {\n          index++;\n          param_length = this.PARAMS[token.text].length;\n          mode = token.text;\n        } else {\n          return this.parseData('M0,0' + d);\n        }\n      } else {\n        if (token.isType(this.NUMBER)) {\n          param_length = this.PARAMS[mode].length;\n        } else {\n          index++;\n          param_length = this.PARAMS[token.text].length;\n          mode = token.text;\n        }\n      }\n\n      if ((index + param_length) < tokens.length) {\n        for (var i = index; i < index + param_length; i++) {\n          var number = tokens[i];\n          if (number.isType(this.NUMBER)) {\n            params[params.length] = number.text;\n          }\n          else {\n            console.error(\"Parameter type is not a number: \" + mode + \",\" + number.text);\n            return;\n          }\n        }\n        var segment;\n        if (this.PARAMS[mode]) {\n          segment = { key: mode, data: params };\n        } else {\n          console.error(\"Unsupported segment type: \" + mode);\n          return;\n        }\n        this.segments.push(segment);\n        index += param_length;\n        token = tokens[index];\n        if (mode == \"M\") mode = \"L\";\n        if (mode == \"m\") mode = \"l\";\n      } else {\n        console.error(\"Path data ended before all parameters were found\");\n      }\n    }\n  }\n\n  tokenize(d) {\n    var tokens = new Array();\n    while (d != \"\") {\n      if (d.match(/^([ \\t\\r\\n,]+)/)) {\n        d = d.substr(RegExp.$1.length);\n      } else if (d.match(/^([aAcChHlLmMqQsStTvVzZ])/)) {\n        tokens[tokens.length] = new PathToken(this.COMMAND, RegExp.$1);\n        d = d.substr(RegExp.$1.length);\n      } else if (d.match(/^(([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)([eE][-+]?[0-9]+)?)/)) {\n        tokens[tokens.length] = new PathToken(this.NUMBER, parseFloat(RegExp.$1));\n        d = d.substr(RegExp.$1.length);\n      } else {\n        console.error(\"Unrecognized segment command: \" + d);\n        return null;\n      }\n    }\n    tokens[tokens.length] = new PathToken(this.EOD, null);\n    return tokens;\n  }\n}\n\nexport class RoughPath {\n  constructor(d) {\n    this.d = d;\n    this.parsed = new ParsedPath(d);\n    this._position = [0, 0];\n    this.bezierReflectionPoint = null;\n    this.quadReflectionPoint = null;\n    this._first = null;\n  }\n\n  get segments() {\n    return this.parsed.segments;\n  }\n\n  get closed() {\n    return this.parsed.closed;\n  }\n\n  get linearPoints() {\n    if (!this._linearPoints) {\n      const lp = [];\n      let points = [];\n      for (let s of this.parsed.segments) {\n        let key = s.key.toLowerCase();\n        if (key === 'm' || key === 'z') {\n          if (points.length) {\n            lp.push(points);\n            points = [];\n          }\n          if (key === 'z') {\n            continue;\n          }\n        }\n        if (s.point) {\n          points.push(s.point);\n        }\n      }\n      if (points.length) {\n        lp.push(points);\n        points = [];\n      }\n      this._linearPoints = lp;\n    }\n    return this._linearPoints;\n  }\n\n  get first() {\n    return this._first;\n  }\n\n  set first(v) {\n    this._first = v;\n  }\n\n  setPosition(x, y) {\n    this._position = [x, y];\n    if (!this._first) {\n      this._first = [x, y];\n    }\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  get x() {\n    return this._position[0];\n  }\n\n  get y() {\n    return this._position[1];\n  }\n}\n\nexport class RoughArcConverter {\n  // Algorithm as described in https://www.w3.org/TR/SVG/implnote.html\n  // Code adapted from nsSVGPathDataParser.cpp in Mozilla \n  // https://hg.mozilla.org/mozilla-central/file/17156fbebbc8/content/svg/content/src/nsSVGPathDataParser.cpp#l887\n  constructor(from, to, radii, angle, largeArcFlag, sweepFlag) {\n    const radPerDeg = Math.PI / 180;\n    this._segIndex = 0;\n    this._numSegs = 0;\n    if (from[0] == to[0] && from[1] == to[1]) {\n      return;\n    }\n    this._rx = Math.abs(radii[0]);\n    this._ry = Math.abs(radii[1]);\n    this._sinPhi = Math.sin(angle * radPerDeg);\n    this._cosPhi = Math.cos(angle * radPerDeg);\n    var x1dash = this._cosPhi * (from[0] - to[0]) / 2.0 + this._sinPhi * (from[1] - to[1]) / 2.0;\n    var y1dash = -this._sinPhi * (from[0] - to[0]) / 2.0 + this._cosPhi * (from[1] - to[1]) / 2.0;\n    var root;\n    var numerator = this._rx * this._rx * this._ry * this._ry - this._rx * this._rx * y1dash * y1dash - this._ry * this._ry * x1dash * x1dash;\n    if (numerator < 0) {\n      let s = Math.sqrt(1 - (numerator / (this._rx * this._rx * this._ry * this._ry)));\n      this._rx = s;\n      this._ry = s;\n      root = 0;\n    } else {\n      root = (largeArcFlag == sweepFlag ? -1.0 : 1.0) *\n        Math.sqrt(numerator / (this._rx * this._rx * y1dash * y1dash + this._ry * this._ry * x1dash * x1dash));\n    }\n    let cxdash = root * this._rx * y1dash / this._ry;\n    let cydash = -root * this._ry * x1dash / this._rx;\n    this._C = [0, 0];\n    this._C[0] = this._cosPhi * cxdash - this._sinPhi * cydash + (from[0] + to[0]) / 2.0;\n    this._C[1] = this._sinPhi * cxdash + this._cosPhi * cydash + (from[1] + to[1]) / 2.0;\n    this._theta = this.calculateVectorAngle(1.0, 0.0, (x1dash - cxdash) / this._rx, (y1dash - cydash) / this._ry);\n    let dtheta = this.calculateVectorAngle((x1dash - cxdash) / this._rx, (y1dash - cydash) / this._ry, (-x1dash - cxdash) / this._rx, (-y1dash - cydash) / this._ry);\n    if ((!sweepFlag) && (dtheta > 0)) {\n      dtheta -= 2 * Math.PI;\n    } else if (sweepFlag && (dtheta < 0)) {\n      dtheta += 2 * Math.PI;\n    }\n    this._numSegs = Math.ceil(Math.abs(dtheta / (Math.PI / 2)));\n    this._delta = dtheta / this._numSegs;\n    this._T = (8 / 3) * Math.sin(this._delta / 4) * Math.sin(this._delta / 4) / Math.sin(this._delta / 2);\n    this._from = from;\n  }\n\n  getNextSegment() {\n    var cp1, cp2, to;\n    if (this._segIndex == this._numSegs) {\n      return null;\n    }\n    let cosTheta1 = Math.cos(this._theta);\n    let sinTheta1 = Math.sin(this._theta);\n    let theta2 = this._theta + this._delta;\n    let cosTheta2 = Math.cos(theta2);\n    let sinTheta2 = Math.sin(theta2);\n\n    to = [\n      this._cosPhi * this._rx * cosTheta2 - this._sinPhi * this._ry * sinTheta2 + this._C[0],\n      this._sinPhi * this._rx * cosTheta2 + this._cosPhi * this._ry * sinTheta2 + this._C[1]\n    ];\n    cp1 = [\n      this._from[0] + this._T * (- this._cosPhi * this._rx * sinTheta1 - this._sinPhi * this._ry * cosTheta1),\n      this._from[1] + this._T * (- this._sinPhi * this._rx * sinTheta1 + this._cosPhi * this._ry * cosTheta1)\n    ];\n    cp2 = [\n      to[0] + this._T * (this._cosPhi * this._rx * sinTheta2 + this._sinPhi * this._ry * cosTheta2),\n      to[1] + this._T * (this._sinPhi * this._rx * sinTheta2 - this._cosPhi * this._ry * cosTheta2)\n    ];\n\n    this._theta = theta2;\n    this._from = [to[0], to[1]];\n    this._segIndex++;\n\n    return {\n      cp1: cp1,\n      cp2: cp2,\n      to: to\n    };\n  }\n\n  calculateVectorAngle(ux, uy, vx, vy) {\n    let ta = Math.atan2(uy, ux);\n    let tb = Math.atan2(vy, vx);\n    if (tb >= ta)\n      return tb - ta;\n    return 2 * Math.PI - (ta - tb);\n  }\n}\n\nexport class PathFitter {\n  constructor(sets, closed) {\n    this.sets = sets;\n    this.closed = closed;\n  }\n\n  fit(simplification) {\n    let outSets = [];\n    for (const set of this.sets) {\n      let length = set.length;\n      let estLength = Math.floor(simplification * length);\n      if (estLength < 5) {\n        if (length <= 5) {\n          continue;\n        }\n        estLength = 5;\n      }\n      outSets.push(this.reduce(set, estLength));\n    }\n\n    let d = '';\n    for (const set of outSets) {\n      for (let i = 0; i < set.length; i++) {\n        let point = set[i];\n        if (i === 0) {\n          d += 'M' + point[0] + \",\" + point[1];\n        } else {\n          d += 'L' + point[0] + \",\" + point[1];\n        }\n      }\n      if (this.closed) {\n        d += 'z ';\n      }\n    }\n    return d;\n  }\n\n  distance(p1, p2) {\n    return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n  }\n\n  reduce(set, count) {\n    if (set.length <= count) {\n      return set;\n    }\n    let points = set.slice(0);\n    while (points.length > count) {\n      let areas = [];\n      let minArea = -1;\n      let minIndex = -1;\n      for (let i = 1; i < (points.length - 1); i++) {\n        let a = this.distance(points[i - 1], points[i]);\n        let b = this.distance(points[i], points[i + 1]);\n        let c = this.distance(points[i - 1], points[i + 1]);\n        let s = (a + b + c) / 2.0;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        areas.push(area);\n        if ((minArea < 0) || (area < minArea)) {\n          minArea = area;\n          minIndex = i;\n        }\n      }\n      if (minIndex > 0) {\n        points.splice(minIndex, 1);\n      } else {\n        break;\n      }\n    }\n    return points;\n  }\n}","import { RoughHachureIterator } from './hachure.js';\nimport { RoughSegmentRelation, RoughSegment } from './segment.js';\nimport { RoughPath, RoughArcConverter, PathFitter } from './path.js';\n\nexport class RoughRenderer {\n  line(x1, y1, x2, y2, o) {\n    let ops = this._doubleLine(x1, y1, x2, y2, o);\n    return { type: 'path', ops };\n  }\n\n  linearPath(points, close, o) {\n    const len = (points || []).length;\n    if (len > 2) {\n      let ops = [];\n      for (let i = 0; i < (len - 1); i++) {\n        ops = ops.concat(this._doubleLine(points[i][0], points[i][1], points[i + 1][0], points[i + 1][1], o));\n      }\n      if (close) {\n        ops = ops.concat(this._doubleLine(points[len - 1][0], points[len - 1][1], points[0][0], points[0][1], o));\n      }\n      return { type: 'path', ops };\n    } else if (len === 2) {\n      return this.line(points[0][0], points[0][1], points[1][0], points[1][1], o);\n    }\n  }\n\n  polygon(points, o) {\n    return this.linearPath(points, true, o);\n  }\n\n  rectangle(x, y, width, height, o) {\n    let points = [\n      [x, y], [x + width, y], [x + width, y + height], [x, y + height]\n    ];\n    return this.polygon(points, o);\n  }\n\n  curve(points, o) {\n    let o1 = this._curveWithOffset(points, 1 * (1 + o.roughness * 0.2), o);\n    let o2 = this._curveWithOffset(points, 1.5 * (1 + o.roughness * 0.22), o);\n    return { type: 'path', ops: o1.concat(o2) };\n  }\n\n  ellipse(x, y, width, height, o) {\n    const increment = (Math.PI * 2) / o.curveStepCount;\n    let rx = Math.abs(width / 2);\n    let ry = Math.abs(height / 2);\n    rx += this._getOffset(-rx * 0.05, rx * 0.05, o);\n    ry += this._getOffset(-ry * 0.05, ry * 0.05, o);\n    let o1 = this._ellipse(increment, x, y, rx, ry, 1, increment * this._getOffset(0.1, this._getOffset(0.4, 1, o), o), o);\n    let o2 = this._ellipse(increment, x, y, rx, ry, 1.5, 0, o);\n    return { type: 'path', ops: o1.concat(o2) };\n  }\n\n  arc(x, y, width, height, start, stop, closed, roughClosure, o) {\n    let cx = x;\n    let cy = y;\n    let rx = Math.abs(width / 2);\n    let ry = Math.abs(height / 2);\n    rx += this._getOffset(-rx * 0.01, rx * 0.01, o);\n    ry += this._getOffset(-ry * 0.01, ry * 0.01, o);\n    let strt = start;\n    let stp = stop;\n    while (strt < 0) {\n      strt += Math.PI * 2;\n      stp += Math.PI * 2;\n    }\n    if ((stp - strt) > (Math.PI * 2)) {\n      strt = 0;\n      stp = Math.PI * 2;\n    }\n    let ellipseInc = (Math.PI * 2) / o.curveStepCount;\n    let arcInc = Math.min(ellipseInc / 2, (stp - strt) / 2);\n    let o1 = this._arc(arcInc, cx, cy, rx, ry, strt, stp, 1, o);\n    let o2 = this._arc(arcInc, cx, cy, rx, ry, strt, stp, 1.5, o);\n    let ops = o1.concat(o2);\n    if (closed) {\n      if (roughClosure) {\n        ops = ops.concat(this._doubleLine(cx, cy, cx + rx * Math.cos(strt), cy + ry * Math.sin(strt), o));\n        ops = ops.concat(this._doubleLine(cx, cy, cx + rx * Math.cos(stp), cy + ry * Math.sin(stp), o));\n      } else {\n        ops.push({ op: 'lineTo', data: [cx, cy] });\n        ops.push({ op: 'lineTo', data: [cx + rx * Math.cos(strt), cy + ry * Math.sin(strt)] });\n      }\n    }\n    return { type: 'path', ops };\n  }\n\n  hachureFillArc(x, y, width, height, start, stop, o) {\n    let cx = x;\n    let cy = y;\n    let rx = Math.abs(width / 2);\n    let ry = Math.abs(height / 2);\n    rx += this._getOffset(-rx * 0.01, rx * 0.01, o);\n    ry += this._getOffset(-ry * 0.01, ry * 0.01, o);\n    let strt = start;\n    let stp = stop;\n    while (strt < 0) {\n      strt += Math.PI * 2;\n      stp += Math.PI * 2;\n    }\n    if ((stp - strt) > (Math.PI * 2)) {\n      strt = 0;\n      stp = Math.PI * 2;\n    }\n    let increment = (stp - strt) / o.curveStepCount;\n    let offset = 1;\n    let xc = [], yc = [];\n    for (let angle = strt; angle <= stp; angle = angle + increment) {\n      xc.push(cx + rx * Math.cos(angle));\n      yc.push(cy + ry * Math.sin(angle));\n    }\n    xc.push(cx + rx * Math.cos(stp));\n    yc.push(cy + ry * Math.sin(stp));\n    xc.push(cx);\n    yc.push(cy);\n    return this.hachureFillShape(xc, yc, o);\n  }\n\n  solidFillShape(xCoords, yCoords, o) {\n    let ops = [];\n    if (xCoords && yCoords && xCoords.length && yCoords.length && xCoords.length === yCoords.length) {\n      let offset = o.maxRandomnessOffset || 0;\n      const len = xCoords.length;\n      if (len > 2) {\n        ops.push({ op: 'move', data: [xCoords[0] + this._getOffset(-offset, offset, o), yCoords[0] + this._getOffset(-offset, offset, o)] });\n        for (var i = 1; i < len; i++) {\n          ops.push({ op: 'lineTo', data: [xCoords[i] + this._getOffset(-offset, offset, o), yCoords[i] + this._getOffset(-offset, offset, o)] });\n        }\n      }\n    }\n    return { type: 'fillPath', ops };\n  }\n\n  hachureFillShape(xCoords, yCoords, o) {\n    let ops = [];\n    if (xCoords && yCoords && xCoords.length && yCoords.length) {\n      let left = xCoords[0];\n      let right = xCoords[0];\n      let top = yCoords[0];\n      let bottom = yCoords[0];\n      for (let i = 1; i < xCoords.length; i++) {\n        left = Math.min(left, xCoords[i]);\n        right = Math.max(right, xCoords[i]);\n        top = Math.min(top, yCoords[i]);\n        bottom = Math.max(bottom, yCoords[i]);\n      }\n      const angle = o.hachureAngle;\n      let gap = o.hachureGap;\n      if (gap < 0) {\n        gap = o.strokeWidth * 4;\n      }\n      gap = Math.max(gap, 0.1);\n\n      const radPerDeg = Math.PI / 180;\n      const hachureAngle = (angle % 180) * radPerDeg;\n      const cosAngle = Math.cos(hachureAngle);\n      const sinAngle = Math.sin(hachureAngle);\n      const tanAngle = Math.tan(hachureAngle);\n\n      const it = new RoughHachureIterator(top - 1, bottom + 1, left - 1, right + 1, gap, sinAngle, cosAngle, tanAngle);\n      let rectCoords;\n      while ((rectCoords = it.getNextLine()) != null) {\n        let lines = this._getIntersectingLines(rectCoords, xCoords, yCoords);\n        for (let i = 0; i < lines.length; i++) {\n          if (i < (lines.length - 1)) {\n            let p1 = lines[i];\n            let p2 = lines[i + 1];\n            ops = ops.concat(this._doubleLine(p1[0], p1[1], p2[0], p2[1], o));\n          }\n        }\n      }\n    }\n    return { type: 'fillSketch', ops };\n  }\n\n  hachureFillEllipse(cx, cy, width, height, o) {\n    let ops = [];\n    let rx = Math.abs(width / 2);\n    let ry = Math.abs(height / 2);\n    rx += this._getOffset(-rx * 0.05, rx * 0.05, o);\n    ry += this._getOffset(-ry * 0.05, ry * 0.05, o);\n    let angle = o.hachureAngle;\n    let gap = o.hachureGap;\n    if (gap <= 0) {\n      gap = o.strokeWidth * 4;\n    }\n    let fweight = o.fillWeight;\n    if (fweight < 0) {\n      fweight = o.strokeWidth / 2;\n    }\n    const radPerDeg = Math.PI / 180;\n    let hachureAngle = (angle % 180) * radPerDeg;\n    let tanAngle = Math.tan(hachureAngle);\n    let aspectRatio = ry / rx;\n    let hyp = Math.sqrt(aspectRatio * tanAngle * aspectRatio * tanAngle + 1);\n    let sinAnglePrime = aspectRatio * tanAngle / hyp;\n    let cosAnglePrime = 1 / hyp;\n    let gapPrime = gap / ((rx * ry / Math.sqrt((ry * cosAnglePrime) * (ry * cosAnglePrime) + (rx * sinAnglePrime) * (rx * sinAnglePrime))) / rx);\n    let halfLen = Math.sqrt((rx * rx) - (cx - rx + gapPrime) * (cx - rx + gapPrime));\n    for (var xPos = cx - rx + gapPrime; xPos < cx + rx; xPos += gapPrime) {\n      halfLen = Math.sqrt((rx * rx) - (cx - xPos) * (cx - xPos));\n      let p1 = this._affine(xPos, cy - halfLen, cx, cy, sinAnglePrime, cosAnglePrime, aspectRatio);\n      let p2 = this._affine(xPos, cy + halfLen, cx, cy, sinAnglePrime, cosAnglePrime, aspectRatio);\n      ops = ops.concat(this._doubleLine(p1[0], p1[1], p2[0], p2[1], o));\n    }\n    return { type: 'fillSketch', ops };\n  }\n\n  svgPath(path, o) {\n    path = (path || '').replace(/\\n/g, \" \").replace(/(-)/g, \" -\").replace(/(-\\s)/g, \"-\").replace(\"/(\\s\\s)/g\", \" \");\n    let p = new RoughPath(path);\n    if (o.simplification) {\n      let fitter = new PathFitter(p.linearPoints, p.closed);\n      let d = fitter.fit(o.simplification);\n      p = new RoughPath(d);\n    }\n    let ops = [];\n    let segments = p.segments || [];\n    for (let i = 0; i < segments.length; i++) {\n      let s = segments[i];\n      let prev = i > 0 ? segments[i - 1] : null;\n      let opList = this._processSegment(p, s, prev, o);\n      if (opList && opList.length) {\n        ops = ops.concat(opList);\n      }\n    }\n    return { type: 'path', ops };\n  }\n\n  // privates\n\n  _bezierTo(x1, y1, x2, y2, x, y, path, o) {\n    let ops = [];\n    let ros = [o.maxRandomnessOffset || 1, (o.maxRandomnessOffset || 1) + 0.5];\n    let f = null;\n    for (let i = 0; i < 2; i++) {\n      if (i === 0) {\n        ops.push({ op: 'move', data: [path.x, path.y] });\n      } else {\n        ops.push({ op: 'move', data: [path.x + this._getOffset(-ros[0], ros[0], o), path.y + this._getOffset(-ros[0], ros[0], o)] });\n      }\n      f = [x + this._getOffset(-ros[i], ros[i], o), y + this._getOffset(-ros[i], ros[i], o)];\n      ops.push({\n        op: 'bcurveTo', data: [\n          x1 + this._getOffset(-ros[i], ros[i], o), y1 + this._getOffset(-ros[i], ros[i], o),\n          x2 + this._getOffset(-ros[i], ros[i], o), y2 + this._getOffset(-ros[i], ros[i], o),\n          f[0], f[1]\n        ]\n      });\n    }\n    path.setPosition(f[0], f[1]);\n    return ops;\n  }\n\n  _processSegment(path, seg, prevSeg, o) {\n    let ops = [];\n    switch (seg.key) {\n      case 'M':\n      case 'm': {\n        let delta = seg.key === 'm';\n        if (seg.data.length >= 2) {\n          let x = +seg.data[0];\n          let y = +seg.data[1];\n          if (delta) {\n            x += path.x;\n            y += path.y;\n          }\n          let ro = 1 * (o.maxRandomnessOffset || 0);\n          x = x + this._getOffset(-ro, ro, o);\n          y = y + this._getOffset(-ro, ro, o);\n          path.setPosition(x, y);\n          ops.push({ op: 'move', data: [x, y] });\n        }\n        break;\n      }\n      case 'L':\n      case 'l': {\n        let delta = seg.key === 'l';\n        if (seg.data.length >= 2) {\n          let x = +seg.data[0];\n          let y = +seg.data[1];\n          if (delta) {\n            x += path.x;\n            y += path.y;\n          }\n          ops = ops.concat(this._doubleLine(path.x, path.y, x, y, o));\n          path.setPosition(x, y);\n        }\n        break;\n      }\n      case 'H':\n      case 'h': {\n        const delta = seg.key === 'h';\n        if (seg.data.length) {\n          let x = +seg.data[0];\n          if (delta) {\n            x += path.x;\n          }\n          ops = ops.concat(this._doubleLine(path.x, path.y, x, path.y, o));\n          path.setPosition(x, path.y);\n        }\n        break;\n      }\n      case 'V':\n      case 'v': {\n        const delta = seg.key === 'v';\n        if (seg.data.length) {\n          let y = +seg.data[0];\n          if (delta) {\n            y += path.y;\n          }\n          ops = ops.concat(this._doubleLine(path.x, path.y, path.x, y, o));\n          path.setPosition(path.x, y);\n        }\n        break;\n      }\n      case 'Z':\n      case 'z': {\n        if (path.first) {\n          ops = ops.concat(this._doubleLine(path.x, path.y, path.first[0], path.first[1], o));\n          path.setPosition(path.first[0], path.first[1]);\n          path.first = null;\n        }\n        break;\n      }\n      case 'C':\n      case 'c': {\n        const delta = seg.key === 'c';\n        if (seg.data.length >= 6) {\n          let x1 = +seg.data[0];\n          let y1 = +seg.data[1];\n          let x2 = +seg.data[2];\n          let y2 = +seg.data[3];\n          let x = +seg.data[4];\n          let y = +seg.data[5];\n          if (delta) {\n            x1 += path.x;\n            x2 += path.x;\n            x += path.x;\n            y1 += path.y;\n            y2 += path.y;\n            y += path.y;\n          }\n          let ob = this._bezierTo(x1, y1, x2, y2, x, y, path, o);\n          ops = ops.concat(ob);\n          path.bezierReflectionPoint = [x + (x - x2), y + (y - y2)];\n        }\n        break;\n      }\n      case 'S':\n      case 's': {\n        const delta = seg.key === 's';\n        if (seg.data.length >= 4) {\n          let x2 = +seg.data[0];\n          let y2 = +seg.data[1];\n          let x = +seg.data[2];\n          let y = +seg.data[3];\n          if (delta) {\n            x2 += path.x;\n            x += path.x;\n            y2 += path.y;\n            y += path.y;\n          }\n          let x1 = x2;\n          let y1 = y2;\n          let prevKey = prevSeg ? prevSeg.key : \"\";\n          var ref = null;\n          if (prevKey == 'c' || prevKey == 'C' || prevKey == 's' || prevKey == 'S') {\n            ref = path.bezierReflectionPoint;\n          }\n          if (ref) {\n            x1 = ref[0];\n            y1 = ref[1];\n          }\n          let ob = this._bezierTo(x1, y1, x2, y2, x, y, path, o);\n          ops = ops.concat(ob);\n          path.bezierReflectionPoint = [x + (x - x2), y + (y - y2)];\n        }\n        break;\n      }\n      case 'Q':\n      case 'q': {\n        const delta = seg.key === 'q';\n        if (seg.data.length >= 4) {\n          let x1 = +seg.data[0];\n          let y1 = +seg.data[1];\n          let x = +seg.data[2];\n          let y = +seg.data[3];\n          if (delta) {\n            x1 += path.x;\n            x += path.x;\n            y1 += path.y;\n            y += path.y;\n          }\n          let offset1 = 1 * (1 + o.roughness * 0.2);\n          let offset2 = 1.5 * (1 + o.roughness * 0.22);\n          ops.push({ op: 'move', data: [path.x + this._getOffset(-offset1, offset1, o), path.y + this._getOffset(-offset1, offset1, o)] });\n          let f = [x + this._getOffset(-offset1, offset1, o), y + this._getOffset(-offset1, offset1, o)];\n          ops.push({\n            op: 'qcurveTo', data: [\n              x1 + this._getOffset(-offset1, offset1, o), y1 + this._getOffset(-offset1, offset1, o),\n              f[0], f[1]\n            ]\n          });\n          ops.push({ op: 'move', data: [path.x + this._getOffset(-offset2, offset2, o), path.y + this._getOffset(-offset2, offset2, o)] });\n          f = [x + this._getOffset(-offset2, offset2, o), y + this._getOffset(-offset2, offset2, o)];\n          ops.push({\n            op: 'qcurveTo', data: [\n              x1 + this._getOffset(-offset2, offset2, o), y1 + this._getOffset(-offset2, offset2, o),\n              f[0], f[1]\n            ]\n          });\n          path.setPosition(f[0], f[1]);\n          path.quadReflectionPoint = [x + (x - x1), y + (y - y1)];\n        }\n        break;\n      }\n      case 'T':\n      case 't': {\n        const delta = seg.key === 't';\n        if (seg.data.length >= 2) {\n          let x = +seg.data[0];\n          let y = +seg.data[1];\n          if (delta) {\n            x += path.x;\n            y += path.y;\n          }\n          let x1 = x;\n          let y1 = y;\n          let prevKey = prevSeg ? prevSeg.key : \"\";\n          var ref = null;\n          if (prevKey == 'q' || prevKey == 'Q' || prevKey == 't' || prevKey == 'T') {\n            ref = path.quadReflectionPoint;\n          }\n          if (ref) {\n            x1 = ref[0];\n            y1 = ref[1];\n          }\n          let offset1 = 1 * (1 + o.roughness * 0.2);\n          let offset2 = 1.5 * (1 + o.roughness * 0.22);\n          ops.push({ op: 'move', data: [path.x + this._getOffset(-offset1, offset1, o), path.y + this._getOffset(-offset1, offset1, o)] });\n          let f = [x + this._getOffset(-offset1, offset1, o), y + this._getOffset(-offset1, offset1, o)];\n          ops.push({\n            op: 'qcurveTo', data: [\n              x1 + this._getOffset(-offset1, offset1, o), y1 + this._getOffset(-offset1, offset1, o),\n              f[0], f[1]\n            ]\n          });\n          ops.push({ op: 'move', data: [path.x + this._getOffset(-offset2, offset2, o), path.y + this._getOffset(-offset2, offset2, o)] });\n          f = [x + this._getOffset(-offset2, offset2, o), y + this._getOffset(-offset2, offset2, o)];\n          ops.push({\n            op: 'qcurveTo', data: [\n              x1 + this._getOffset(-offset2, offset2, o), y1 + this._getOffset(-offset2, offset2, o),\n              f[0], f[1]\n            ]\n          });\n          path.setPosition(f[0], f[1]);\n          path.quadReflectionPoint = [x + (x - x1), y + (y - y1)];\n        }\n        break;\n      }\n      case 'A':\n      case 'a': {\n        const delta = seg.key === 'a';\n        if (seg.data.length >= 7) {\n          let rx = +seg.data[0];\n          let ry = +seg.data[1];\n          let angle = +seg.data[2];\n          let largeArcFlag = +seg.data[3];\n          let sweepFlag = +seg.data[4];\n          let x = +seg.data[5];\n          let y = +seg.data[6];\n          if (delta) {\n            x += path.x;\n            y += path.y;\n          }\n          if (x == path.x && y == path.y) {\n            break;\n          }\n          if (rx == 0 || ry == 0) {\n            ops = ops.concat(this._doubleLine(path.x, path.y, x, y, o));\n            path.setPosition(x, y);\n          } else {\n            let final = null;\n            let ro = o.maxRandomnessOffset || 0;\n            for (let i = 0; i < 1; i++) {\n              let arcConverter = new RoughArcConverter(\n                [path.x, path.y],\n                [x, y],\n                [rx, ry],\n                angle,\n                largeArcFlag ? true : false,\n                sweepFlag ? true : false\n              );\n              let segment = arcConverter.getNextSegment();\n              while (segment) {\n                let ob = this._bezierTo(segment.cp1[0], segment.cp1[1], segment.cp2[0], segment.cp2[1], segment.to[0], segment.to[1], path, o);\n                ops = ops.concat(ob);\n                segment = arcConverter.getNextSegment();\n              }\n            }\n          }\n        }\n        break;\n      }\n      default:\n        break;\n    }\n    return ops;\n  }\n\n  _getOffset(min, max, ops) {\n    return ops.roughness * ((Math.random() * (max - min)) + min);\n  }\n\n  _affine(x, y, cx, cy, sinAnglePrime, cosAnglePrime, R) {\n    var A = -cx * cosAnglePrime - cy * sinAnglePrime + cx;\n    var B = R * (cx * sinAnglePrime - cy * cosAnglePrime) + cy;\n    var C = cosAnglePrime;\n    var D = sinAnglePrime;\n    var E = -R * sinAnglePrime;\n    var F = R * cosAnglePrime;\n    return [\n      A + C * x + D * y,\n      B + E * x + F * y\n    ];\n  }\n\n  _doubleLine(x1, y1, x2, y2, o) {\n    const o1 = this._line(x1, y1, x2, y2, o, true, false);\n    const o2 = this._line(x1, y1, x2, y2, o, true, true);\n    return o1.concat(o2);\n  }\n\n  _line(x1, y1, x2, y2, o, move, overlay) {\n    const lengthSq = Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2);\n    let offset = o.maxRandomnessOffset || 0;\n    if ((offset * offset * 100) > lengthSq) {\n      offset = Math.sqrt(lengthSq) / 10;\n    }\n    const halfOffset = offset / 2;\n    const divergePoint = 0.2 + Math.random() * 0.2;\n    let midDispX = o.bowing * o.maxRandomnessOffset * (y2 - y1) / 200;\n    let midDispY = o.bowing * o.maxRandomnessOffset * (x1 - x2) / 200;\n    midDispX = this._getOffset(-midDispX, midDispX, o);\n    midDispY = this._getOffset(-midDispY, midDispY, o);\n    let ops = [];\n    if (move) {\n      if (overlay) {\n        ops.push({\n          op: 'move', data: [\n            x1 + this._getOffset(-halfOffset, halfOffset, o),\n            y1 + this._getOffset(-halfOffset, halfOffset, o)\n          ]\n        });\n      } else {\n        ops.push({\n          op: 'move', data: [\n            x1 + this._getOffset(-offset, offset, o),\n            y1 + this._getOffset(-offset, offset, o)\n          ]\n        });\n      }\n    }\n    if (overlay) {\n      ops.push({\n        op: 'bcurveTo', data: [\n          midDispX + x1 + (x2 - x1) * divergePoint + this._getOffset(-halfOffset, halfOffset, o),\n          midDispY + y1 + (y2 - y1) * divergePoint + this._getOffset(-halfOffset, halfOffset, o),\n          midDispX + x1 + 2 * (x2 - x1) * divergePoint + this._getOffset(-halfOffset, halfOffset, o),\n          midDispY + y1 + 2 * (y2 - y1) * divergePoint + this._getOffset(-halfOffset, halfOffset, o),\n          x2 + this._getOffset(-halfOffset, halfOffset, o),\n          y2 + this._getOffset(-halfOffset, halfOffset, o)\n        ]\n      });\n    } else {\n      ops.push({\n        op: 'bcurveTo', data: [\n          midDispX + x1 + (x2 - x1) * divergePoint + this._getOffset(-offset, offset, o),\n          midDispY + y1 + (y2 - y1) * divergePoint + this._getOffset(-offset, offset, o),\n          midDispX + x1 + 2 * (x2 - x1) * divergePoint + this._getOffset(-offset, offset, o),\n          midDispY + y1 + 2 * (y2 - y1) * divergePoint + this._getOffset(-offset, offset, o),\n          x2 + this._getOffset(-offset, offset, o),\n          y2 + this._getOffset(-offset, offset, o)\n        ]\n      });\n    }\n    return ops;\n  }\n\n  _curve(points, closePoint, o) {\n    const len = points.length;\n    let ops = [];\n    if (len > 3) {\n      const b = [];\n      const s = 1 - o.curveTightness;\n      ops.push({ op: 'move', data: [points[1][0], points[1][1]] });\n      for (let i = 1; (i + 2) < len; i++) {\n        const cachedVertArray = points[i];\n        b[0] = [cachedVertArray[0], cachedVertArray[1]];\n        b[1] = [cachedVertArray[0] + (s * points[i + 1][0] - s * points[i - 1][0]) / 6, cachedVertArray[1] + (s * points[i + 1][1] - s * points[i - 1][1]) / 6];\n        b[2] = [points[i + 1][0] + (s * points[i][0] - s * points[i + 2][0]) / 6, points[i + 1][1] + (s * points[i][1] - s * points[i + 2][1]) / 6];\n        b[3] = [points[i + 1][0], points[i + 1][1]];\n        ops.push({ op: 'bcurveTo', data: [b[1][0], b[1][1], b[2][0], b[2][1], b[3][0], b[3][1]] });\n      }\n      if (closePoint && closePoint.length === 2) {\n        let ro = o.maxRandomnessOffset;\n        // TODO: more roughness here?\n        ops.push({ ops: 'lineTo', data: [closePoint[0] + this._getOffset(-ro, ro, o), closePoint[1] + + this._getOffset(-ro, ro, o)] });\n      }\n    } else if (len === 3) {\n      ops.push({ op: 'move', data: [points[1][0], points[1][1]] });\n      ops.push({\n        op: 'bcurveTo', data: [\n          points[1][0], points[1][1],\n          points[2][0], points[2][1],\n          points[2][0], points[2][1]]\n      });\n    } else if (len === 2) {\n      ops = ops.concat(this._doubleLine(points[0][0], points[0][1], points[1][0], points[1][1], o));\n    }\n    return ops;\n  }\n\n  _ellipse(increment, cx, cy, rx, ry, offset, overlap, o) {\n    const radOffset = this._getOffset(-0.5, 0.5, o) - (Math.PI / 2);\n    const points = [];\n    points.push([\n      this._getOffset(-offset, offset, o) + cx + 0.9 * rx * Math.cos(radOffset - increment),\n      this._getOffset(-offset, offset, o) + cy + 0.9 * ry * Math.sin(radOffset - increment)\n    ]);\n    for (let angle = radOffset; angle < (Math.PI * 2 + radOffset - 0.01); angle = angle + increment) {\n      points.push([\n        this._getOffset(-offset, offset, o) + cx + rx * Math.cos(angle),\n        this._getOffset(-offset, offset, o) + cy + ry * Math.sin(angle)\n      ]);\n    }\n    points.push([\n      this._getOffset(-offset, offset, o) + cx + rx * Math.cos(radOffset + Math.PI * 2 + overlap * 0.5),\n      this._getOffset(-offset, offset, o) + cy + ry * Math.sin(radOffset + Math.PI * 2 + overlap * 0.5)\n    ]);\n    points.push([\n      this._getOffset(-offset, offset, o) + cx + 0.98 * rx * Math.cos(radOffset + overlap),\n      this._getOffset(-offset, offset, o) + cy + 0.98 * ry * Math.sin(radOffset + overlap)\n    ]);\n    points.push([\n      this._getOffset(-offset, offset, o) + cx + 0.9 * rx * Math.cos(radOffset + overlap * 0.5),\n      this._getOffset(-offset, offset, o) + cy + 0.9 * ry * Math.sin(radOffset + overlap * 0.5)\n    ]);\n    return this._curve(points, null, o);\n  }\n\n  _curveWithOffset(points, offset, o) {\n    const ps = [];\n    ps.push([\n      points[0][0] + this._getOffset(-offset, offset, o),\n      points[0][1] + this._getOffset(-offset, offset, o),\n    ]);\n    ps.push([\n      points[0][0] + this._getOffset(-offset, offset, o),\n      points[0][1] + this._getOffset(-offset, offset, o),\n    ]);\n    for (let i = 1; i < points.length; i++) {\n      ps.push([\n        points[i][0] + this._getOffset(-offset, offset, o),\n        points[i][1] + this._getOffset(-offset, offset, o),\n      ]);\n      if (i === (points.length - 1)) {\n        ps.push([\n          points[i][0] + this._getOffset(-offset, offset, o),\n          points[i][1] + this._getOffset(-offset, offset, o),\n        ]);\n      }\n    }\n    return this._curve(ps, null, o);\n  }\n\n  _arc(increment, cx, cy, rx, ry, strt, stp, offset, o) {\n    const radOffset = strt + this._getOffset(-0.1, 0.1, o);\n    const points = [];\n    points.push([\n      this._getOffset(-offset, offset, o) + cx + 0.9 * rx * Math.cos(radOffset - increment),\n      this._getOffset(-offset, offset, o) + cy + 0.9 * ry * Math.sin(radOffset - increment)\n    ]);\n    for (let angle = radOffset; angle <= stp; angle = angle + increment) {\n      points.push([\n        this._getOffset(-offset, offset, o) + cx + rx * Math.cos(angle),\n        this._getOffset(-offset, offset, o) + cy + ry * Math.sin(angle)\n      ]);\n    }\n    points.push([\n      cx + rx * Math.cos(stp),\n      cy + ry * Math.sin(stp)\n    ]);\n    points.push([\n      cx + rx * Math.cos(stp),\n      cy + ry * Math.sin(stp)\n    ]);\n    return this._curve(points, null, o);\n  }\n\n  _getIntersectingLines(lineCoords, xCoords, yCoords) {\n    let intersections = [];\n    var s1 = new RoughSegment(lineCoords[0], lineCoords[1], lineCoords[2], lineCoords[3]);\n    for (var i = 0; i < xCoords.length; i++) {\n      let s2 = new RoughSegment(xCoords[i], yCoords[i], xCoords[(i + 1) % xCoords.length], yCoords[(i + 1) % xCoords.length]);\n      if (s1.compare(s2) == RoughSegmentRelation().INTERSECTS) {\n        intersections.push([s1.xi, s1.yi]);\n      }\n    }\n    return intersections;\n  }\n}","import { RoughRenderer } from './renderer.js';\nself._roughScript = self.document && self.document.currentScript && self.document.currentScript.src;\n\nexport class RoughGenerator {\n  constructor(config, canvas) {\n    this.config = config || {};\n    this.canvas = canvas;\n    this.defaultOptions = {\n      maxRandomnessOffset: 2,\n      roughness: 1,\n      bowing: 1,\n      stroke: '#000',\n      strokeWidth: 1,\n      curveTightness: 0,\n      curveStepCount: 9,\n      fill: null,\n      fillStyle: 'hachure',\n      fillWeight: -1,\n      hachureAngle: -41,\n      hachureGap: -1\n    };\n    if (this.config.options) {\n      this.defaultOptions = this._options(this.config.options);\n    }\n  }\n\n  _options(options) {\n    return options ? Object.assign({}, this.defaultOptions, options) : this.defaultOptions;\n  }\n\n  _drawable(shape, sets, options) {\n    return { shape, sets: sets || [], options: options || this.defaultOptions };\n  }\n\n  get lib() {\n    if (!this._renderer) {\n      if (self && self.workly && this.config.async && (!this.config.noWorker)) {\n        const tos = Function.prototype.toString;\n        const worklySource = this.config.worklyURL || 'https://cdn.jsdelivr.net/gh/pshihn/workly/dist/workly.min.js';\n        const rendererSource = this.config.roughURL || self._roughScript;\n        if (rendererSource && worklySource) {\n          let code = `importScripts('${worklySource}', '${rendererSource}');\\nworkly.expose(self.rough.createRenderer());`;\n          let ourl = URL.createObjectURL(new Blob([code]));\n          this._renderer = workly.proxy(ourl);\n        } else {\n          this._renderer = new RoughRenderer();\n        }\n      } else {\n        this._renderer = new RoughRenderer();\n      }\n    }\n    return this._renderer;\n  }\n\n  line(x1, y1, x2, y2, options) {\n    const o = this._options(options);\n    return this._drawable('line', [this.lib.line(x1, y1, x2, y2, o)], o);\n  }\n\n  rectangle(x, y, width, height, options) {\n    const o = this._options(options);\n    const paths = [];\n    if (o.fill) {\n      const xc = [x, x + width, x + width, x];\n      const yc = [y, y, y + height, y + height];\n      if (o.fillStyle === 'solid') {\n        paths.push(this.lib.solidFillShape(xc, yc, o))\n      } else {\n        paths.push(this.lib.hachureFillShape(xc, yc, o));\n      }\n    }\n    paths.push(this.lib.rectangle(x, y, width, height, o));\n    return this._drawable('rectangle', paths, o);\n  }\n\n  ellipse(x, y, width, height, options) {\n    const o = this._options(options);\n    const paths = [];\n    if (o.fill) {\n      if (o.fillStyle === 'solid') {\n        const shape = this.lib.ellipse(x, y, width, height, o);\n        shape.type = 'fillPath';\n        paths.push(shape);\n      } else {\n        paths.push(this.lib.hachureFillEllipse(x, y, width, height, o));\n      }\n    }\n    paths.push(this.lib.ellipse(x, y, width, height, o));\n    return this._drawable('ellipse', paths, o);\n  }\n\n  circle(x, y, diameter, options) {\n    let ret = this.ellipse(x, y, diameter, diameter, options);\n    ret.shape = 'circle';\n    return ret;\n  }\n\n  linearPath(points, options) {\n    const o = this._options(options);\n    return this._drawable('linearPath', [this.lib.linearPath(points, false, o)], o);\n  }\n\n  polygon(points, options) {\n    const o = this._options(options);\n    const paths = [];\n    if (o.fill) {\n      let xc = [], yc = [];\n      for (let p of points) {\n        xc.push(p[0]);\n        yc.push(p[1]);\n      }\n      if (o.fillStyle === 'solid') {\n        paths.push(this.lib.solidFillShape(xc, yc, o));\n      } else {\n        paths.push(this.lib.hachureFillShape(xc, yc, o));\n      }\n    }\n    paths.push(this.lib.linearPath(points, true, o));\n    return this._drawable('polygon', paths, o);\n  }\n\n  arc(x, y, width, height, start, stop, closed, options) {\n    const o = this._options(options);\n    const paths = [];\n    if (closed && o.fill) {\n      if (o.fillStyle === 'solid') {\n        let shape = this.lib.arc(x, y, width, height, start, stop, true, false, o);\n        shape.type = 'fillPath';\n        paths.push(shape);\n      } else {\n        paths.push(this.lib.hachureFillArc(x, y, width, height, start, stop, o));\n      }\n    }\n    paths.push(this.lib.arc(x, y, width, height, start, stop, closed, true, o));\n    return this._drawable('arc', paths, o);\n  }\n\n  curve(points, options) {\n    const o = this._options(options);\n    return this._drawable('curve', [this.lib.curve(points, o)], o);\n  }\n\n  path(d, options) {\n    const o = this._options(options);\n    const paths = [];\n    if (!d) {\n      return this._drawable('path', paths, o);\n    }\n    if (o.fill) {\n      if (o.fillStyle === 'solid') {\n        let shape = { type: 'path2Dfill', path: d };\n        paths.push(shape);\n      } else {\n        const size = this._computePathSize(d);\n        let xc = [0, size[0], size[0], 0];\n        let yc = [0, 0, size[1], size[1]];\n        let shape = this.lib.hachureFillShape(xc, yc, o);\n        shape.type = 'path2Dpattern';\n        shape.size = size;\n        shape.path = d;\n        paths.push(shape);\n      }\n    }\n    paths.push(this.lib.svgPath(d, o));\n    return this._drawable('path', paths, o);\n  }\n\n  _computePathSize(d) {\n    let size = [0, 0];\n    if (self.document) {\n      try {\n        const ns = \"http://www.w3.org/2000/svg\";\n        let svg = self.document.createElementNS(ns, \"svg\");\n        svg.setAttribute(\"width\", \"0\");\n        svg.setAttribute(\"height\", \"0\");\n        let pathNode = self.document.createElementNS(ns, \"path\");\n        pathNode.setAttribute('d', d);\n        svg.appendChild(pathNode);\n        self.document.body.appendChild(svg);\n        let bb = pathNode.getBBox()\n        if (bb) {\n          size[0] = bb.width || 0;\n          size[1] = bb.height || 0;\n        }\n        self.document.body.removeChild(svg);\n      } catch (err) { }\n    }\n    if (!(size[0] * size[1])) {\n      size = [this.canvas.width || 100, this.canvas.height || 100];\n    }\n    size[0] = Math.min(size[0] * 4, this.canvas.width);\n    size[1] = Math.min(size[1] * 4, this.canvas.height);\n    return size;\n  }\n}\n\nexport class RoughGeneratorAsync extends RoughGenerator {\n  async line(x1, y1, x2, y2, options) {\n    const o = this._options(options);\n    return this._drawable('line', [await this.lib.line(x1, y1, x2, y2, o)], o);\n  }\n\n  async rectangle(x, y, width, height, options) {\n    const o = this._options(options);\n    const paths = [];\n    if (o.fill) {\n      const xc = [x, x + width, x + width, x];\n      const yc = [y, y, y + height, y + height];\n      if (o.fillStyle === 'solid') {\n        paths.push(await this.lib.solidFillShape(xc, yc, o))\n      } else {\n        paths.push(await this.lib.hachureFillShape(xc, yc, o));\n      }\n    }\n    paths.push(await this.lib.rectangle(x, y, width, height, o));\n    return this._drawable('rectangle', paths, o);\n  }\n\n  async ellipse(x, y, width, height, options) {\n    const o = this._options(options);\n    const paths = [];\n    if (o.fill) {\n      if (o.fillStyle === 'solid') {\n        const shape = await this.lib.ellipse(x, y, width, height, o);\n        shape.type = 'fillPath';\n        paths.push(shape);\n      } else {\n        paths.push(await this.lib.hachureFillEllipse(x, y, width, height, o));\n      }\n    }\n    paths.push(await this.lib.ellipse(x, y, width, height, o));\n    return this._drawable('ellipse', paths, o);\n  }\n\n  async circle(x, y, diameter, options) {\n    let ret = await this.ellipse(x, y, diameter, diameter, options);\n    ret.shape = 'circle';\n    return ret;\n  }\n\n  async linearPath(points, options) {\n    const o = this._options(options);\n    return this._drawable('linearPath', [await this.lib.linearPath(points, false, o)], o);\n  }\n\n  async polygon(points, options) {\n    const o = this._options(options);\n    const paths = [];\n    if (o.fill) {\n      let xc = [], yc = [];\n      for (let p of points) {\n        xc.push(p[0]);\n        yc.push(p[1]);\n      }\n      if (o.fillStyle === 'solid') {\n        paths.push(await this.lib.solidFillShape(xc, yc, o));\n      } else {\n        paths.push(await this.lib.hachureFillShape(xc, yc, o));\n      }\n    }\n    paths.push(await this.lib.linearPath(points, true, o));\n    return this._drawable('polygon', paths, o);\n  }\n\n  async arc(x, y, width, height, start, stop, closed, options) {\n    const o = this._options(options);\n    const paths = [];\n    if (closed && o.fill) {\n      if (o.fillStyle === 'solid') {\n        let shape = await this.lib.arc(x, y, width, height, start, stop, true, false, o);\n        shape.type = 'fillPath';\n        paths.push(shape);\n      } else {\n        paths.push(await this.lib.hachureFillArc(x, y, width, height, start, stop, o));\n      }\n    }\n    paths.push(await this.lib.arc(x, y, width, height, start, stop, closed, true, o));\n    return this._drawable('arc', paths, o);\n  }\n\n  async curve(points, options) {\n    const o = this._options(options);\n    return this._drawable('curve', [await this.lib.curve(points, o)], o);\n  }\n\n  async path(d, options) {\n    const o = this._options(options);\n    const paths = [];\n    if (!d) {\n      return this._drawable('path', paths, o);\n    }\n    if (o.fill) {\n      if (o.fillStyle === 'solid') {\n        let shape = { type: 'path2Dfill', path: d };\n        paths.push(shape);\n      } else {\n        const size = this._computePathSize(d);\n        let xc = [0, size[0], size[0], 0];\n        let yc = [0, 0, size[1], size[1]];\n        let shape = await this.lib.hachureFillShape(xc, yc, o);\n        shape.type = 'path2Dpattern';\n        shape.size = size;\n        shape.path = d;\n        paths.push(shape);\n      }\n    }\n    paths.push(await this.lib.svgPath(d, o));\n    return this._drawable('path', paths, o);\n  }\n}","import { RoughGenerator, RoughGeneratorAsync } from './generator.js'\nimport { RoughRenderer } from './renderer.js';\n\nexport class RoughCanvas {\n  constructor(canvas, config) {\n    this.canvas = canvas;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this._init(config);\n  }\n\n  _init(config) {\n    this.gen = new RoughGenerator(config, this.canvas);\n  }\n\n  get generator() {\n    return this.gen;\n  }\n\n  static createRenderer() {\n    return new RoughRenderer();\n  }\n\n  line(x1, y1, x2, y2, options) {\n    let d = this.gen.line(x1, y1, x2, y2, options);\n    this.draw(d);\n    return d;\n  }\n\n  rectangle(x, y, width, height, options) {\n    let d = this.gen.rectangle(x, y, width, height, options);\n    this.draw(d);\n    return d;\n  }\n\n  ellipse(x, y, width, height, options) {\n    let d = this.gen.ellipse(x, y, width, height, options);\n    this.draw(d);\n    return d;\n  }\n\n  circle(x, y, diameter, options) {\n    let d = this.gen.circle(x, y, diameter, options);\n    this.draw(d);\n    return d;\n  }\n\n  linearPath(points, options) {\n    let d = this.gen.linearPath(points, options);\n    this.draw(d);\n    return d;\n  }\n\n  polygon(points, options) {\n    let d = this.gen.polygon(points, options);\n    this.draw(d);\n    return d;\n  }\n\n  arc(x, y, width, height, start, stop, closed, options) {\n    let d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n    this.draw(d);\n    return d;\n  }\n\n  curve(points, options) {\n    let d = this.gen.curve(points, options);\n    this.draw(d);\n    return d;\n  }\n\n  path(d, options) {\n    let drawing = this.gen.path(d, options);\n    this.draw(drawing);\n    return drawing;\n  }\n\n  draw(drawable) {\n    let sets = drawable.sets || [];\n    let o = drawable.options || this.gen.defaultOptions;\n    let ctx = this.ctx;\n    for (let drawing of sets) {\n      switch (drawing.type) {\n        case 'path':\n          ctx.save();\n          ctx.strokeStyle = o.stroke;\n          ctx.lineWidth = o.strokeWidth;\n          this._drawToContext(ctx, drawing);\n          ctx.restore();\n          break;\n        case 'fillPath':\n          ctx.save();\n          ctx.fillStyle = o.fill;\n          this._drawToContext(ctx, drawing, o);\n          ctx.restore();\n          break;\n        case 'fillSketch':\n          this._fillSketch(ctx, drawing, o);\n          break;\n        case 'path2Dfill': {\n          this.ctx.save();\n          this.ctx.fillStyle = o.fill;\n          let p2d = new Path2D(drawing.path);\n          this.ctx.fill(p2d);\n          this.ctx.restore();\n          break;\n        }\n        case 'path2Dpattern': {\n          let size = drawing.size;\n          let hcanvas = document.createElement('canvas');\n          hcanvas.width = size[0];\n          hcanvas.height = size[1];\n          this._fillSketch(hcanvas.getContext(\"2d\"), drawing, o);\n          this.ctx.save();\n          this.ctx.fillStyle = this.ctx.createPattern(hcanvas, 'repeat');\n          let p2d = new Path2D(drawing.path);\n          this.ctx.fill(p2d);\n          this.ctx.restore();\n          break;\n        }\n      }\n    }\n  }\n\n  _fillSketch(ctx, drawing, o) {\n    let fweight = o.fillWeight;\n    if (fweight < 0) {\n      fweight = o.strokeWidth / 2;\n    }\n    ctx.save();\n    ctx.strokeStyle = o.fill;\n    ctx.lineWidth = fweight;\n    this._drawToContext(ctx, drawing);\n    ctx.restore();\n  }\n\n  _drawToContext(ctx, drawing) {\n    ctx.beginPath();\n    for (let item of drawing.ops) {\n      const data = item.data;\n      switch (item.op) {\n        case 'move':\n          ctx.moveTo(data[0], data[1]);\n          break;\n        case 'bcurveTo':\n          ctx.bezierCurveTo(data[0], data[1], data[2], data[3], data[4], data[5]);\n          break;\n        case 'qcurveTo':\n          ctx.quadraticCurveTo(data[0], data[1], data[2], data[3]);\n          break;\n        case 'lineTo':\n          ctx.lineTo(data[0], data[1]);\n          break;\n      }\n    }\n    if (drawing.type === 'fillPath') {\n      ctx.fill();\n    } else {\n      ctx.stroke();\n    }\n  }\n}\n\nexport class RoughCanvasAsync extends RoughCanvas {\n  _init(config) {\n    this.gen = new RoughGeneratorAsync(config, this.canvas);\n  }\n\n  async line(x1, y1, x2, y2, options) {\n    let d = await this.gen.line(x1, y1, x2, y2, options);\n    this.draw(d);\n    return d;\n  }\n\n  async rectangle(x, y, width, height, options) {\n    let d = await this.gen.rectangle(x, y, width, height, options);\n    this.draw(d);\n    return d;\n  }\n\n  async ellipse(x, y, width, height, options) {\n    let d = await this.gen.ellipse(x, y, width, height, options);\n    this.draw(d);\n    return d;\n  }\n\n  async circle(x, y, diameter, options) {\n    let d = await this.gen.circle(x, y, diameter, options);\n    this.draw(d);\n    return d;\n  }\n\n  async linearPath(points, options) {\n    let d = await this.gen.linearPath(points, options);\n    this.draw(d);\n    return d;\n  }\n\n  async polygon(points, options) {\n    let d = await this.gen.polygon(points, options);\n    this.draw(d);\n    return d;\n  }\n\n  async arc(x, y, width, height, start, stop, closed, options) {\n    let d = await this.gen.arc(x, y, width, height, start, stop, closed, options);\n    this.draw(d);\n    return d;\n  }\n\n  async curve(points, options) {\n    let d = await this.gen.curve(points, options);\n    this.draw(d);\n    return d;\n  }\n\n  async path(d, options) {\n    let drawing = await this.gen.path(d, options);\n    this.draw(drawing);\n    return drawing;\n  }\n}","import { RoughCanvas, RoughCanvasAsync } from './canvas.js';\nimport { RoughGenerator, RoughGeneratorAsync } from './generator.js'\n\nexport default {\n  canvas(canvas, config) {\n    if (config && config.async) {\n      return new RoughCanvasAsync(canvas, config);\n    }\n    return new RoughCanvas(canvas, config);\n  },\n  createRenderer() {\n    return RoughCanvas.createRenderer();\n  },\n  generator(config, size) {\n    if (config && config.async) {\n      return new RoughGeneratorAsync(config, size);\n    }\n    return new RoughGenerator(config, size);\n  }\n};","import paper from 'paper';\nimport rough from 'roughjs';\n\npaper.install(window);\n\nwindow.onload = () => {\n  // Generate paper.js graph\n  paper.setup('paper');\n  const viewWidth = view.size.width;\n  const viewHeight = view.size.height;\n\n  const strokeColor = 'white';\n  const strokeWidth = 2;\n\n  const firstDiagonal = new Path.Line({\n    from: new Point(0, 0),\n    to: new Point(viewWidth, viewHeight),\n    strokeColor: strokeColor,\n    strokeWidth: strokeWidth\n  });\n\n  const secondDiagonal = new Path.Line({\n    from: new Point(0, viewHeight),\n    to: new Point(viewWidth, 0),\n    strokeColor: strokeColor,\n    strokeWidth: strokeWidth\n  });\n\n  const firstVertical = new Path.Line({\n    from: new Point(viewWidth/4, viewHeight/4),\n    to: new Point(viewWidth/4, (viewHeight/4)*3),\n    strokeColor: strokeColor,\n    strokeWidth: strokeWidth\n  });\n\n  const secondVertical = new Path.Line({\n    from: new Point((viewWidth/4)*3, viewHeight/4),\n    to: new Point((viewWidth/4)*3, (viewHeight/4)*3),\n    strokeColor: strokeColor,\n    strokeWidth: strokeWidth\n  });\n\n  const circle = new Path.Circle({\n    center: new Point(view.center),\n    radius: view.center.subtract(new Point(view.size.width/4, view.size.height/4)).length,\n    strokeColor: strokeColor,\n    strokeWidth: strokeWidth\n  });\n\n  // Generate SVG for using with rough.js\n  const roughCanvasElement = document.createElement('canvas');\n  roughCanvasElement.width = viewWidth;\n  roughCanvasElement.height = viewHeight;\n  // document.body.appendChild(project.exportSVG());\n  document.body.appendChild(roughCanvasElement);\n\n  const roughCanvas = rough.canvas(\n    roughCanvasElement,\n    { options: {\n      stroke: 'white',\n      strokeWidth: strokeWidth,\n      roughness: 2.7,\n      bowing: 2\n    } }\n  );\n\n  // Array.from(document.getElementsByTagName('path')).forEach((path) => {\n  Array.from(project.exportSVG().querySelectorAll('path')).forEach((path) => {\n    roughCanvas.path(path.getAttribute('d'));\n    roughCanvas.path(path.getAttribute('d'));\n    roughCanvas.path(path.getAttribute('d'));\n    roughCanvas.path(path.getAttribute('d'));\n    roughCanvas.path(path.getAttribute('d'));\n  });\n}\n"]}